{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033{\fonttbl{\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}{\f4\froman\fcharset0\fprq2{\*\panose 00000000000000000000}Times;}
{\f5\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}Helvetica;}{\f6\fmodern\fcharset0\fprq1{\*\panose 00000000000000000000}Courier;}{\f7\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}Geneva;}
{\f8\froman\fcharset0\fprq2{\*\panose 00000000000000000000}Tms Rmn{\*\falt Times New Roman};}{\f9\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}Helv{\*\falt Arial};}{\f10\froman\fcharset0\fprq2{\*\panose 00000000000000000000}MS Serif;}
{\f11\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}MS Sans Serif;}{\f12\froman\fcharset0\fprq2{\*\panose 00000000000000000000}New York;}{\f13\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}System;}
{\f14\fnil\fcharset2\fprq2{\*\panose 05000000000000000000}Wingdings;}{\f15\fswiss\fcharset0\fprq2{\*\panose 020b0604030504040204}Tahoma;}{\f16\froman\fcharset0\fprq2{\*\panose 00000000000000000000}CG Times{\*\falt Times New Roman};}
{\f17\froman\fcharset0\fprq2{\*\panose 00000000000000000000}CG Times (W1){\*\falt Times New Roman};}{\f18\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}Univers{\*\falt Arial};}
{\f19\fswiss\fcharset0\fprq0{\*\panose 00000000000000000000}Small Fonts;}{\f20\fswiss\fcharset0\fprq0{\*\panose 00000000000000000000}DIGITAL;}{\f21\froman\fcharset0\fprq2{\*\panose 00000000000000000000}Bookman;}
{\f22\fnil\fcharset2\fprq2{\*\panose 00000000000000000000}Marlett;}{\f23\fswiss\fcharset0\fprq2{\*\panose 020b0706040902060204}Haettenschweiler;}{\f24\fswiss\fcharset0\fprq2{\*\panose 020b0506020202030204}Arial Narrow;}
{\f25\fswiss\fcharset0\fprq2{\*\panose 020b0a04020102020204}Arial Black;}{\f26\froman\fcharset0\fprq2{\*\panose 02050604050505020204}Bookman Old Style;}{\f27\fnil\fcharset2\fprq2{\*\panose 01010601010101010101}Monotype Sorts;}
{\f28\froman\fcharset0\fprq2{\*\panose 02020404030301010803}Garamond;}{\f29\fswiss\fcharset0\fprq2{\*\panose 020b0806030902050204}Impact;}{\f30\fnil\fcharset2\fprq2{\*\panose 05000000000000000000}MS Outlook;}
{\f31\fscript\fcharset0\fprq2{\*\panose 030f0702030302020204}Comic Sans MS;}{\f32\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}AvantGarde;}{\f33\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}Helvetica-Narrow;}
{\f34\froman\fcharset0\fprq2{\*\panose 00000000000000000000}NewCenturySchlbk;}{\f35\froman\fcharset0\fprq2{\*\panose 00000000000000000000}Palatino;}{\f36\froman\fcharset0\fprq2{\*\panose 00000000000000000000}ZapfChancery;}
{\f37\fdecor\fcharset2\fprq2{\*\panose 00000000000000000000}ZapfDingbats;}{\f38\fswiss\fcharset0\fprq2{\*\panose 00000000000000000000}Univers (E1);}{\f39\froman\fcharset0\fprq2{\*\panose 00000000000000000000}CG Times (E1);}
{\f40\froman\fcharset0\fprq0{\*\panose 00000000000000000000}ariel;}{\f41\fmodern\fcharset0\fprq0{\*\panose 00000000000000000000}LinePrinter;}{\f42\fswiss\fcharset0\fprq0{\*\panose 00000000000000000000}Univers Condensed;}
{\f43\fswiss\fcharset0\fprq0{\*\panose 00000000000000000000}Antique Olive;}{\f44\fswiss\fcharset0\fprq0{\*\panose 00000000000000000000}CG Omega;}{\f45\fswiss\fcharset0\fprq0{\*\panose 00000000000000000000}Albertus Medium;}
{\f46\fswiss\fcharset0\fprq0{\*\panose 00000000000000000000}Albertus Extra Bold;}{\f47\froman\fcharset0\fprq0{\*\panose 00000000000000000000}Clarendon Condensed;}{\f48\fscript\fcharset0\fprq0{\*\panose 00000000000000000000}Coronet;}
{\f49\fmodern\fcharset0\fprq0{\*\panose 00000000000000000000}Letter Gothic;}{\f50\fscript\fcharset0\fprq0{\*\panose 00000000000000000000}Marigold;}{\f51\fmodern\fcharset0\fprq0{\*\panose 00000000000000000000}Lucida Console;}
{\f52\fnil\fcharset0\fprq0{\*\panose 00000000000000000000}Microsoft Logo;}{\f53\froman\fcharset0\fprq0{\*\panose 00000000000000000000}Book Antiqua;}{\f54\fswiss\fcharset0\fprq0{\*\panose 00000000000000000000}Century Gothic;}
{\f55\fscript\fcharset0\fprq0{\*\panose 00000000000000000000}Monotype Corsiva;}{\f56\froman\fcharset0\fprq0{\*\panose 00000000000000000000}Century Schoolbook;}{\f57\froman\fcharset0\fprq0{\*\panose 00000000000000000000}MT Extra;}
{\f58\fmodern\fcharset0\fprq0{\*\panose 00000000000000000000}MS LineDraw;}{\f59\fdecor\fcharset0\fprq0{\*\panose 00000000000000000000}Algerian;}{\f60\fswiss\fcharset0\fprq0{\*\panose 00000000000000000000}Arial Rounded MT Bold;}
{\f61\fdecor\fcharset0\fprq0{\*\panose 00000000000000000000}Braggadocio;}{\f62\fswiss\fcharset0\fprq0{\*\panose 00000000000000000000}Britannic Bold;}{\f63\fscript\fcharset0\fprq0{\*\panose 00000000000000000000}Brush Script MT;}
{\f64\fdecor\fcharset0\fprq0{\*\panose 00000000000000000000}Colonna MT;}{\f65\fdecor\fcharset0\fprq0{\*\panose 00000000000000000000}Desdemona;}{\f66\froman\fcharset0\fprq0{\*\panose 00000000000000000000}Footlight MT Light;}
{\f67\fdecor\fcharset0\fprq0{\*\panose 00000000000000000000}Kino MT;}{\f68\froman\fcharset0\fprq0{\*\panose 00000000000000000000}Wide Latin;}{\f69\fscript\fcharset0\fprq0{\*\panose 00000000000000000000}Matura MT Script Capitals;}
{\f70\fdecor\fcharset0\fprq0{\*\panose 00000000000000000000}Playbill;}{\f71\fswiss\fcharset0\fprq0{\*\panose 00000000000000000000}Bookshelf Symbol 1;}{\f72\fswiss\fcharset0\fprq0{\*\panose 00000000000000000000}Bookshelf Symbol 2;}
{\f73\froman\fcharset0\fprq0{\*\panose 00000000000000000000}Bookshelf Symbol 3;}{\f74\fswiss\fcharset0\fprq0{\*\panose 00000000000000000000}MS Dialog;}{\f75\froman\fcharset0\fprq0{\*\panose 00000000000000000000}CG Times (WN);}
{\f76\fdecor\fcharset0\fprq0{\*\panose 00000000000000000000}ITC Zapf Dingbats (D1);}{\f77\fdecor\fcharset0\fprq0{\*\panose 00000000000000000000}ITC Zapf Dingbats (D2);}{\f78\fdecor\fcharset0\fprq0{\*\panose 00000000000000000000}ITC Zapf Dingbats (D3);}
{\f79\fdecor\fcharset0\fprq0{\*\panose 00000000000000000000}ITC Zapf Dingbats (DS);}{\f80\fdecor\fcharset0\fprq0{\*\panose 00000000000000000000}ITC Zapf Dingbats (DV);}{\f81\fmodern\fcharset0\fprq0{\*\panose 00000000000000000000}Courier New (OEM);}
{\f82\fnil\fcharset0\fprq0{\*\panose 00000000000000000000}Windows Logo;}{\f83\fnil\fcharset0\fprq0{\*\panose 00000000000000000000}Fences;}{\f84\froman\fcharset0\fprq0{\*\panose 00000000000000000000}Roman;}
{\f85\fscript\fcharset0\fprq0{\*\panose 00000000000000000000}Script;}{\f86\fmodern\fcharset0\fprq0{\*\panose 00000000000000000000}Modern;}{\f87\fswiss\fcharset0\fprq0{\*\panose 00000000000000000000}Univers (W1);}
{\f88\fmodern\fcharset0\fprq0{\*\panose 00000000000000000000}Lucida Sans Typewriter;}{\f89\fnil\fcharset0\fprq0{\*\panose 00000000000000000000}BlackChancery;}{\f90\fmodern\fcharset0\fprq0{\*\panose 00000000000000000000}lettergothic;}
{\f91\fmodern\fcharset0\fprq0{\*\panose 00000000000000000000}prestige;}{\f92\froman\fcharset0\fprq0{\*\panose 00000000000000000000}Roman PS;}{\f93\froman\fcharset0\fprq0{\*\panose 00000000000000000000}university;}
{\f94\froman\fcharset0\fprq0{\*\panose 00000000000000000000}Wingdings 3;}{\f95\fdecor\fcharset0\fprq0{\*\panose 00000000000000000000}Stop;}{\f96\fdecor\fcharset0\fprq0{\*\panose 00000000000000000000}Peignot Medium;}
{\f97\fswiss\fcharset0\fprq0{\*\panose 00000000000000000000}Eurostile;}{\f98\fswiss\fcharset0\fprq0{\*\panose 00000000000000000000}Gill Sans Ultra Bold;}{\f99\fswiss\fcharset0\fprq0{\*\panose 00000000000000000000}Futura;}
{\f100\fscript\fcharset0\fprq0{\*\panose 00000000000000000000}BriemScript;}{\f101\fdecor\fcharset0\fprq0{\*\panose 00000000000000000000}Stencil;}{\f102\fscript\fcharset0\fprq0{\*\panose 00000000000000000000}Gradl;}
{\f103\froman\fcharset0\fprq0{\*\panose 00000000000000000000}Castellar;}{\f104\froman\fcharset0\fprq0{\*\panose 00000000000000000000}Elephant;}{\f105\froman\fcharset0\fprq0{\*\panose 00000000000000000000}Baskerville Old Face;}
{\f106\fscript\fcharset0\fprq0{\*\panose 00000000000000000000}Contemporary Brush;}{\f107\froman\fcharset0\fprq0{\*\panose 00000000000000000000}Wingdings 2;}{\f108\fscript\fcharset0\fprq0{\*\panose 00000000000000000000}Eckmann;}
{\f109\fscript\fcharset0\fprq0{\*\panose 00000000000000000000}Parade;}{\f110\froman\fcharset0\fprq0{\*\panose 00000000000000000000}New Caledonia;}{\f111\fdecor\fcharset0\fprq0{\*\panose 00000000000000000000}Ransom;}
{\f112\fdecor\fcharset0\fprq0{\*\panose 00000000000000000000}Harrington;}{\f113\fdecor\fcharset0\fprq0{\*\panose 00000000000000000000}Augsburger Initials;}{\f114\fdecor\fcharset0\fprq0{\*\panose 00000000000000000000}Onyx;}
{\f115\froman\fcharset0\fprq0{\*\panose 00000000000000000000}Bell MT;}{\f116\froman\fcharset0\fprq0{\*\panose 00000000000000000000}Centaur;}{\f117\fscript\fcharset0\fprq0{\*\panose 00000000000000000000}Old English Text MT;}
{\f118\fdecor\fcharset0\fprq0{\*\panose 00000000000000000000}Edda;}{\f119\fscript\fcharset0\fprq0{\*\panose 00000000000000000000}Mistral;}{\f210\fswiss\fcharset238\fprq2 Tahoma CE;}{\f211\fswiss\fcharset204\fprq2 Tahoma Cyr;}
{\f213\fswiss\fcharset161\fprq2 Tahoma Greek;}{\f214\fswiss\fcharset162\fprq2 Tahoma Tur;}{\f215\fswiss\fcharset186\fprq2 Tahoma Baltic;}{\f264\fswiss\fcharset238\fprq2 Arial Narrow CE;}{\f265\fswiss\fcharset204\fprq2 Arial Narrow Cyr;}
{\f267\fswiss\fcharset161\fprq2 Arial Narrow Greek;}{\f268\fswiss\fcharset162\fprq2 Arial Narrow Tur;}{\f269\fswiss\fcharset186\fprq2 Arial Narrow Baltic;}{\f270\fswiss\fcharset238\fprq2 Arial Black CE;}{\f271\fswiss\fcharset204\fprq2 Arial Black Cyr;}
{\f273\fswiss\fcharset161\fprq2 Arial Black Greek;}{\f274\fswiss\fcharset162\fprq2 Arial Black Tur;}{\f275\fswiss\fcharset186\fprq2 Arial Black Baltic;}{\f276\froman\fcharset238\fprq2 Bookman Old Style CE;}
{\f277\froman\fcharset204\fprq2 Bookman Old Style Cyr;}{\f279\froman\fcharset161\fprq2 Bookman Old Style Greek;}{\f280\froman\fcharset162\fprq2 Bookman Old Style Tur;}{\f281\froman\fcharset186\fprq2 Bookman Old Style Baltic;}
{\f288\froman\fcharset238\fprq2 Garamond CE;}{\f289\froman\fcharset204\fprq2 Garamond Cyr;}{\f291\froman\fcharset161\fprq2 Garamond Greek;}{\f292\froman\fcharset162\fprq2 Garamond Tur;}{\f293\froman\fcharset186\fprq2 Garamond Baltic;}
{\f294\fswiss\fcharset238\fprq2 Impact CE;}{\f295\fswiss\fcharset204\fprq2 Impact Cyr;}{\f297\fswiss\fcharset161\fprq2 Impact Greek;}{\f298\fswiss\fcharset162\fprq2 Impact Tur;}{\f299\fswiss\fcharset186\fprq2 Impact Baltic;}}{\colortbl;\red0\green0\blue0;
\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;
\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{\nowidctlpar\widctlpar\adjustright \fs20\lang1024\cgrid \snext0 Normal;}{\s1\sb240\sa240\keep\keepn\nowidctlpar\widctlpar\tlul\tx8640\adjustright 
\b\f38\fs36\cgrid \sbasedon72 \snext0 heading 1;}{\s2\sb240\sa240\sl240\slmult0\keep\keepn\nowidctlpar\widctlpar\tx1440\adjustright \b\f38\fs28\cgrid \sbasedon72 \snext0 heading 2;}{\s3\sb240\sa240\sl240\slmult0\keep\keepn\nowidctlpar\widctlpar
\tx1440\adjustright \b\f38\cgrid \sbasedon72 \snext0 heading 3;}{\s4\sb240\sa240\sl240\slmult0\keep\keepn\nowidctlpar\widctlpar\tx1440\adjustright \b\i\f38\cgrid \sbasedon72 \snext0 heading 4;}{\s5\sb240\sa240\sl240\slmult0
\keep\keepn\nowidctlpar\widctlpar\tx1440\outlinelevel3\adjustright \b\f38\cgrid \sbasedon4 \snext0 heading 5;}{\s6\sb240\sa240\keep\keepn\nowidctlpar\widctlpar\adjustright \b\f39\cgrid \sbasedon81 \snext0 heading 6;}{
\s7\sb240\sa240\keep\keepn\nowidctlpar\widctlpar\outlinelevel5\adjustright \b\f39\cgrid \sbasedon6 \snext0 heading 7;}{\s8\sb240\sa240\keep\keepn\nowidctlpar\widctlpar\outlinelevel5\adjustright \b\f39\cgrid \sbasedon6 \snext38 heading 8;}{
\s9\sb240\sa240\keep\keepn\nowidctlpar\widctlpar\outlinelevel5\adjustright \b\f39\cgrid \sbasedon6 \snext38 heading 9;}{\*\cs10 \additive Default Paragraph Font;}{\s17\li4032\keep\nowidctlpar\widctlpar\tqr\tx8640\adjustright \f39\cgrid 
\sbasedon23 \snext17 toc 8;}{\s18\li3456\keep\nowidctlpar\widctlpar\tqr\tx8640\adjustright \f39\cgrid \sbasedon23 \snext18 toc 7;}{\s19\li2880\keep\nowidctlpar\widctlpar\tqr\tx8640\adjustright \f39\cgrid \sbasedon23 \snext19 toc 6;}{
\s20\li2304\keep\nowidctlpar\widctlpar\tqr\tx8640\adjustright \f39\cgrid \sbasedon23 \snext0 toc 5;}{\s21\li1728\keep\nowidctlpar\widctlpar\tqr\tx8640\adjustright \f39\cgrid \sbasedon23 \snext21 toc 4;}{\s22\li1152\keep\nowidctlpar\widctlpar
\tqr\tx8640\adjustright \f39\cgrid \sbasedon23 \snext22 toc 3;}{\s23\li432\keep\nowidctlpar\widctlpar\tqr\tx8640\adjustright \f39\cgrid \sbasedon81 \snext23 toc 2;}{\s24\sb240\keep\keepn\nowidctlpar\widctlpar\tqr\tlul\tx8640\adjustright \b\f38\cgrid 
\sbasedon72 \snext24 toc 1;}{\s25\li2160\sa240\keep\nowidctlpar\widctlpar\adjustright \f39\cgrid \sbasedon81 \snext0 index 7;}{\s26\li1800\sa240\keep\nowidctlpar\widctlpar\adjustright \f39\cgrid \sbasedon81 \snext0 index 6;}{
\s27\li1440\sa240\keep\nowidctlpar\widctlpar\adjustright \f39\cgrid \sbasedon81 \snext0 index 5;}{\s28\fi864\sa240\keep\nowidctlpar\widctlpar\adjustright \f39\cgrid \sbasedon81 \snext28 index 4;}{\s29\fi576\sa240\keep\nowidctlpar\widctlpar\adjustright 
\f39\cgrid \sbasedon81 \snext29 index 3;}{\s30\fi288\keep\nowidctlpar\widctlpar\adjustright \f39\cgrid \sbasedon81 \snext30 index 2;}{\s31\keep\nowidctlpar\widctlpar\adjustright \f39\cgrid \sbasedon81 \snext31 index 1;}{\*\cs32 \additive \sbasedon10 
line number;}{\s33\keep\keepn\nowidctlpar\widctlpar\adjustright \b\f38\fs28\cgrid \sbasedon72 \snext31 index heading;}{\s34\keep\keepn\nowidctlpar\widctlpar\brdrt\brdrs\brdrw30\brsp20 \brdrbtw\brdrs\brdrw30\brsp20 \tqc\tx4320\tqr\tx8640\adjustright 
\f38\fs20\cgrid \sbasedon72 \snext34 footer;}{\s35\qr\keep\keepn\nowidctlpar\widctlpar\brdrb\brdrs\brdrw30\brsp20 \brdrbtw\brdrs\brdrw30\brsp20 \adjustright \b\i\f38\fs28\cgrid \sbasedon72 \snext35 header;}{\*\cs36 \additive \fs16\up6 \sbasedon10 
footnote reference;}{\s37\sa240\keep\nowidctlpar\widctlpar\adjustright \f39\fs20\cgrid \sbasedon81 \snext37 footnote text;}{\s38\li576\nowidctlpar\widctlpar\adjustright \fs20\lang1024\cgrid \sbasedon0 \snext38 Normal Indent;}{
\s42\sa240\keep\nowidctlpar\widctlpar\tx1152\tx1728\adjustright \f39\cgrid \sbasedon81 \snext42 B1;}{\s43\li576\sa240\keep\nowidctlpar\widctlpar\tx1728\tx2304\adjustright \f39\cgrid \sbasedon81 \snext43 B2;}{\s44\li1152\sa240\keep\nowidctlpar\widctlpar
\tx2304\tx2880\adjustright \f39\cgrid \sbasedon81 \snext44 B3;}{\s45\fi-576\li576\sa240\keep\nowidctlpar\widctlpar\adjustright \f39\fs20\cgrid \sbasedon81 \snext45 I1;}{\s46\fi-576\li1152\sa240\keep\nowidctlpar\widctlpar\tx1728\adjustright \f39\cgrid 
\sbasedon81 \snext46 I2;}{\s47\fi-576\li1728\sa240\keep\nowidctlpar\widctlpar\tx2304\adjustright \f39\cgrid \sbasedon81 \snext47 I3;}{\s48\li720\ri4608\sb240\sa240\keep\keepn\nowidctlpar\widctlpar\adjustright \f39\cgrid \sbasedon81 \snext48 
Left2: side-by-side;}{\s49\sb240\sa240\keep\nowidctlpar\widctlpar\adjustright \f6\cgrid \sbasedon81 \snext49 LineDraw;}{\s50\fi-576\li1152\sa240\keep\nowidctlpar\widctlpar\tx1152\adjustright \f39\cgrid \sbasedon81 \snext50 Bullet: space;}{
\s51\li5328\sb240\sa240\keep\nowidctlpar\widctlpar\adjustright \f39\cgrid \sbasedon81 \snext51 Right2: side-by-side;}{\s52\li1728\sa240\keep\nowidctlpar\widctlpar\tx2880\tx3456\adjustright \f39\cgrid \sbasedon81 \snext52 B4;}{
\s53\qc\sa240\keep\nowidctlpar\widctlpar\adjustright \f39\cgrid \sbasedon81 \snext53 Centered;}{\s54\qj\sa240\keep\nowidctlpar\widctlpar\tx1152\tx1728\adjustright \f39\cgrid \sbasedon42 \snext54 B1J;}{\s55\qj\li576\sa240\keep\nowidctlpar\widctlpar
\tx1728\tx2304\adjustright \f39\cgrid \sbasedon43 \snext55 B2J;}{\s57\fi-576\li576\sb240\sa240\keep\keepn\nowidctlpar\widctlpar\tx1440\adjustright \b\f38\cgrid \sbasedon72 \snext57 Title: space;}{
\s58\fi-576\li576\sb240\keep\keepn\nowidctlpar\widctlpar\adjustright \b\f38\cgrid \sbasedon72 \snext58 Title: no space;}{\s59\fi-1440\li1440\sa240\keep\nowidctlpar\widctlpar\tx1440\tqr\tx8640\adjustright \f39\cgrid \sbasedon81 \snext59 Figure list (toc);}
{\s60\li576\sa240\keep\nowidctlpar\widctlpar\tx1008\tx1440\tx1872\tx4032\tx5472\tx6480\adjustright \f39\cgrid \sbasedon81 \snext60 PP;}{\s61\li576\sa240\keep\nowidctlpar\widctlpar\tx1440\tx2304\tx4320\adjustright \f39\cgrid \sbasedon81 \snext61 
Call interface;}{\s62\sa240\keep\nowidctlpar\widctlpar\box\brdrs\brdrw15\brsp20 \tx1584\tx3024\tx4464\tx5904\tx7344\tx8784\adjustright \f6\cgrid \sbasedon81 \snext62 Timing Diagram;}{\s63\qj\fi-576\li576\sa240\keep\nowidctlpar\widctlpar\adjustright 
\f39\fs20\cgrid \sbasedon45 \snext63 I1J;}{\s64\qj\fi-576\li1152\sa240\keep\nowidctlpar\widctlpar\tx1728\adjustright \f39\cgrid \sbasedon46 \snext64 I2J;}{\s65\qj\fi-576\li1728\sa240\sl240\slmult0\keep\nowidctlpar\widctlpar\tx2304\adjustright \f39\cgrid 
\sbasedon47 \snext65 I3J;}{\s66\keepn\nowidctlpar\widctlpar\adjustright \fs20\lang1024\cgrid \sbasedon0 \snext66 Normal: keep;}{\s67\sa240\keep\keepn\nowidctlpar\widctlpar\tx1152\tx1728\adjustright \f39\cgrid \sbasedon42 \snext67 B1: keep;}{
\s68\sa240\keep\nowidctlpar\widctlpar\box\brdrs\brdrw15\brsp20 \tx576\tx2016\tx2592\tx3168\tx6768\adjustright \f39\cgrid \sbasedon81 \snext68 Bit description;}{\s69\sa240\keep\nowidctlpar\widctlpar\tx1152\tx2304\tx4608\tx7632\adjustright \f39\cgrid 
\sbasedon81 \snext69 C3 column;}{\s70\sa240\keep\nowidctlpar\widctlpar\tx576\tx4320\adjustright \f39\cgrid \sbasedon81 \snext70 C2 column;}{\s71\sa240\keep\nowidctlpar\widctlpar\tx2880\tx4752\adjustright \f39\cgrid \sbasedon81 \snext71 C1 column;}{
\s72\keep\keepn\nowidctlpar\widctlpar\adjustright \b\f38\cgrid \snext0 Std Title;}{\s73\fi576\sa240\keep\nowidctlpar\widctlpar\adjustright \f39\cgrid \sbasedon81 \snext73 Let1;}{\s74\qc\sb240\keep\nowidctlpar\widctlpar\adjustright \b\f38\cgrid 
\sbasedon72 \snext74 Figure Title;}{\s75\fi-1440\li1440\sa240\keep\nowidctlpar\widctlpar\tx1440\adjustright \f39\cgrid \sbasedon81 \snext75 I1L;}{\s76\sb240\sa240\keep\keepn\nowidctlpar\widctlpar\tlul\tx8640\outlinelevel0\adjustright \b\f38\fs36\cgrid 
\sbasedon1 \snext76 toc:title;}{\s77\qc\sb2160\sa480\keep\keepn\nowidctlpar\widctlpar\adjustright \b\f38\fs36\cgrid \sbasedon72 \snext78 Doc:Title;}{\s78\qc\sa1920\keep\keepn\nowidctlpar\widctlpar\adjustright \b\f38\cgrid \sbasedon72 \snext78 
Doc:Version;}{\s79\qc\sa2160\keep\keepn\nowidctlpar\widctlpar\adjustright \f38\cgrid \sbasedon72 \snext80 Doc:Author;}{\s80\qc\sa240\keep\nowidctlpar\widctlpar\brdrt\brdrs\brdrw30\brsp20 \brdrbtw\brdrs\brdrw30\brsp20 \adjustright \f39\fs20\cgrid 
\sbasedon81 \snext76 Doc:Copywrite;}{\s81\sa240\keep\nowidctlpar\widctlpar\adjustright \f39\cgrid \snext81 Std Txt;}{\s82\keep\nowidctlpar\widctlpar\tx4032\tx6480\adjustright \f39\cgrid \sbasedon81 \snext82 Sched;}{
\s83\qc\sb2880\sa120\keepn\nowidctlpar\widctlpar\tx540\outlinelevel0\adjustright \b\fs36\cgrid \sbasedon1 \snext0 Title;}{\s84\li576\sl240\slmult0\keep\nowidctlpar\widctlpar\tx1008\tx1440\tx1872\tx4032\tx5472\tx6480\adjustright \cgrid \snext84 Wide;}{
\s85\fi576\sa240\keep\nowidctlpar\widctlpar\adjustright \cgrid \snext85 Letter;}{\s86\nowidctlpar\widctlpar\adjustright \fs20\lang1024\cgrid \sbasedon0 \snext86 Table;}{\s87\qc\fi-360\li360\nowidctlpar\widctlpar\adjustright \b\fs20\lang1024\cgrid 
\sbasedon0 \snext87 Table Head;}{\s88\qj\fi-864\li1152\nowidctlpar\widctlpar\adjustright \f1\lang1024\cgrid \sbasedon0 \snext88 iiden1;}{\s89\nowidctlpar\widctlpar\adjustright \f4\fs20\lang1024\cgrid \snext89 list;}}{\*\revtbl {Unknown;}}{\info{\title  PNP BIOS SPEC 1.0A}
{\author Paul Rea}{\operator A-LEOCH}{\creatim\yr1997\mo7\dy10\hr13\min50}{\revtim\yr1997\mo7\dy10\hr13\min50}{\version3}{\edmins1}{\nofpages30}{\nofwords21753}{\nofchars123993}{\*\company MSFT}{\nofcharsws152272}{\vern71}}
\widowctrl\ftnbj\aenddoc\noextrasprl\prcolbl\cvmme\sprsspbf\brkfrm\swpbdr\lytprtmet\hyphcaps0\formshade\fracwidth\viewkind4\viewscale100\pgbrdrhead\pgbrdrfoot \fet0\sectd \linex0\endnhere\titlepg\sectdefaultcl {\header \pard\plain 
\s35\keep\keepn\nowidctlpar\widctlpar\brdrb\brdrs\brdrw30\brsp20 \brdrbtw\brdrs\brdrw30\brsp20 \adjustright \b\i\f38\fs28\cgrid {\fs16 Plug and Play BIOS Specification 1.0A\tab \tab \tab \tab \tab \tab \tab \tab Page }{\field{\*\fldinst {\fs16 PAGE}
}{\fldrslt {\fs16\lang1024 29}}}{\fs16 
\par }}{\footer \pard\plain \s34\keep\keepn\nowidctlpar\widctlpar\brdrt\brdrs\brdrw30\brsp20 \brdrbtw\brdrs\brdrw30\brsp20 \tqc\tx4320\tqr\tx8640\adjustright \f38\fs20\cgrid {\tab \tab 
\par }}{\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}
{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8
\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}\pard\plain \qc\nowidctlpar\widctlpar\adjustright \fs20\lang1024\cgrid {\b\fs30 
\par }\pard \qc\nowidctlpar\widctlpar\adjustright {\b\fs30 
\par Compaq Computer Corporation
\par }\pard \qc\nowidctlpar\widctlpar\adjustright {\b\fs30 Phoenix Technologies Ltd.
\par }\pard \qc\nowidctlpar\widctlpar\adjustright {\b\fs30 Intel Corporation
\par }\pard\plain \s77\qc\sb240\sa480\keep\keepn\nowidctlpar\widctlpar\adjustright \b\f38\fs36\cgrid {\f0 Plug and Play BIOS Specification
\par }\pard\plain \s78\qc\sa1680\keep\keepn\nowidctlpar\widctlpar\adjustright \b\f38\cgrid {\f0 Version 1.0A\line \line }{\field\fldedit{\*\fldinst {\f0 savedate \\@ "MMMM d, yyyy"}}{\fldrslt {\f0 May 5, 1994}}}{\f0 
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\lang1024\cgrid {
This specification has been made available to the public.  You are hereby granted the right to use, implement, reproduce, and distribute this specification with the foregoing rights at no charge.  This specification is, and shall remain, the property of C
ompaq Computer Corporation ("Compaq") Phoenix Technologies LTD ("Phoenix") and Intel corporation ("Intel").
\par }\pard \nowidctlpar\widctlpar\adjustright {\b NEITHER COMPAQ, PHOENIX NOR INTEL MAKE ANY REPRESENTATION OR WARRANTY REGARDING THIS SPECIFICATION OR ANY P
RODUCT OR ITEM DEVELOPED BASED ON THIS SPECIFICATION.  USE OF THIS SPECIFICATION FOR ANY PURPOSE IS AT THE RISK OF THE PERSON OR ENTITY USING IT.  COMPAQ, PHOENIX AND INTEL DISCLAIM ALL EXPRESS AND IMPLIED WARRANTIES, INCLUDING BUT NOT LIMITED TO THE IMPL
IED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND FREEDOM FROM INFRINGEMENT.  WITHOUT LIMITING THE GENERALITY OF THE FOREGOING, NEITHER COMPAQ, PHOENIX NOR INTEL MAKE ANY WARRANTY OF ANY KIND THAT ANY ITEM DEVELOPED BASED ON THIS SPE
CIFICATION, OR ANY PORTION OF IT, WILL NOT INFRINGE ANY COPYRIGHT, PATENT, TRADE SECRET OR OTHER INTELLECTUAL PROPERTY RIGHT OF ANY PERSON OR ENTITY IN ANY COUNTRY. 
\par }\pard\plain \s80\qc\sa240\keep\nowidctlpar\widctlpar\brdrt\brdrs\brdrw30\brsp20 \brdrbtw\brdrs\brdrw30\brsp20 \adjustright \f39\fs20\cgrid {\f0 \line \line 
\par }\pard\plain \s76\sb240\sa240\keep\keepn\nowidctlpar\widctlpar\tlul\tx8640\outlinelevel0\adjustright \b\f38\fs36\cgrid {\f0 Table Of Contents\tab 
\par }\pard\plain \s24\sb240\keep\keepn\nowidctlpar\widctlpar\tqr\tlul\tx8640\adjustright \b\f38\cgrid {\field\flddirty{\*\fldinst {\f0\fs20 TOC \\o "1-3"}}{\fldrslt {\f0\fs20 References\tab 3
\par }\pard \s24\sb240\keep\keepn\nowidctlpar\widctlpar\tqr\tlul\tx8640\adjustright {\f0\fs20 1.0  Overview\tab 3
\par }\pard\plain \s23\li432\keep\nowidctlpar\widctlpar\tqr\tx8640\adjustright \f39\cgrid {\f0\fs20 1.1 Goals of a Plug and Play System BIOS\tab 4
\par 1.2  Enhancements to the current BIOS architecture\tab 5
\par }\pard \s23\li432\keep\nowidctlpar\widctlpar\tqr\tx8640\adjustright {\f0\fs20 1.3  Elements of the Plug and Play BIOS architecture\tab 6
\par }\pard\plain \s22\li1152\keep\nowidctlpar\widctlpar\tqr\tx8640\adjustright \f39\cgrid {\f0\fs20 1.3.1 Bi-modal functionality\tab 6
\par 1.3.2  OS Independence\tab 6
\par }\pard \s22\li1152\keep\nowidctlpar\widctlpar\tqr\tx8640\adjustright {\f0\fs20 1.3.3  Expandability\tab 6
\par }\pard\plain \s23\li432\keep\nowidctlpar\widctlpar\tqr\tx8640\adjustright \f39\cgrid {\f0\fs20 1.4  Installation Structure\tab 7
\par }\pard\plain \s24\sb240\keep\keepn\nowidctlpar\widctlpar\tqr\tlul\tx8640\adjustright \b\f38\cgrid {\f0\fs20 2.0 System BIOS Initialization\tab 7
\par }\pard\plain \s23\li432\keep\nowidctlpar\widctlpar\tqr\tx8640\adjustright \f39\cgrid {\f0\fs20 2.1  System BIOS POST Requirements\tab 7
\par }\pard\plain \s22\li1152\keep\nowidctlpar\widctlpar\tqr\tx8640\adjustright \f39\cgrid {\f0\fs20 2.1.1  System Board Storage Requirements\tab 8
\par 2.1.2  System BIOS Resource Management\tab 9
\par }\pard \s22\li1152\keep\nowidctlpar\widctlpar\tqr\tx8640\adjustright {\f0\fs20 2.1.3  Isolating Committed Resources\tab 9
\par }\pard \s22\li1152\keep\nowidctlpar\widctlpar\tqr\tx8640\adjustright {\f0\fs20 2.1.4  System BIOS Resource Allocation\tab 9
\par }\pard\plain \s23\li432\keep\nowidctlpar\widctlpar\tqr\tx8640\adjustright \f39\cgrid {\f0\fs20 2.2  Plug and Play ISA Card Support\tab 11
\par }\pard\plain \s22\li1152\keep\nowidctlpar\widctlpar\tqr\tx8640\adjustright \f39\cgrid {\f0\fs20 2.2.1  Assigning CSN to Plug and Play ISA cards\tab 11
\par 2.2.2  Initializing Plug and Play ISA Cards\tab 11
\par }\pard\plain \s23\li432\keep\nowidctlpar\widctlpar\tqr\tx8640\adjustright \f39\cgrid {\f0\fs20 2.3  BIOS POST Option ROM Initialization\tab 12
\par }\pard \s23\li432\keep\nowidctlpar\widctlpar\tqr\tx8640\adjustright {\f0\fs20 2.4  Transferring Control to the Operating System\tab 13
\par 2.5  POST Execution flow\tab 13
\par }\pard\plain \s24\sb240\keep\keepn\nowidctlpar\widctlpar\tqr\tlul\tx8640\adjustright \b\f38\cgrid {\f0\fs20 3.0  Option ROM Support\tab 16
\par }\pard\plain \s23\li432\keep\nowidctlpar\widctlpar\tqr\tx8640\adjustright \f39\cgrid {\f0\fs20 3.1 Option ROM Header\tab 16
\par 3.2 Expansion Header for Plug and Play\tab 17
\par }\pard \s23\li432\keep\nowidctlpar\widctlpar\tqr\tx8640\adjustright {\f0\fs20 3.3 Option ROM Initialization\tab 22
\par }\pard \s23\li432\keep\nowidctlpar\widctlpar\tqr\tx8640\adjustright {\f0\fs20 3.4  Option ROM Initialization flow\tab 23
\par 3.5 ISA Option ROMs and Resource Mapping\tab 24
\par }\pard \s23\li432\keep\nowidctlpar\widctlpar\tqr\tx8640\adjustright {\f0\fs20 3.6 Error Recovery: Returning to the Boot flow\tab 24
\par }\pard\plain \s24\sb240\keep\keepn\nowidctlpar\widctlpar\tqr\tlul\tx8640\adjustright \b\f38\cgrid {\f0\fs20 4.0  Configuration Support\tab 25
\par }\pard\plain \s23\li432\keep\nowidctlpar\widctlpar\tqr\tx8640\adjustright \f39\cgrid {\f0\fs20 4.1  System Device Configuration List\tab 25
\par 4.2  System Device Node Definition\tab 25
\par }\pard \s23\li432\keep\nowidctlpar\widctlpar\tqr\tx8640\adjustright {\f0\fs20 4.3  Plug and Play BIOS Functions\tab 29
\par }\pard \s23\li432\keep\nowidctlpar\widctlpar\tqr\tx8640\adjustright {\f0\fs20 4.4  Plug and Play Installation Check\tab 29
\par }\pard\plain \s22\li1152\keep\nowidctlpar\widctlpar\tqr\tx8640\adjustright \f39\cgrid {\f0\fs20 4.4.1 System BIOS Plug and Play Compliance - "$PnP"\tab 32
\par }\pard\plain \s23\li432\keep\nowidctlpar\widctlpar\tqr\tx8640\adjustright \f39\cgrid {\f0\fs20 4.5  System Configuration Interface\tab 34
\par }\pard\plain \s22\li1152\keep\nowidctlpar\widctlpar\tqr\tx8640\adjustright \f39\cgrid {\f0\fs20 4.5.1  Function 0 - Get Number of System Device Nodes\tab 35
\par 4.5.2  Function 1 - Get System Device Node\tab 36
\par }\pard \s22\li1152\keep\nowidctlpar\widctlpar\tqr\tx8640\adjustright {\f0\fs20 4.5.3  Function 2 - Set System Device Node\tab 38
\par }\pard\plain \s23\li432\keep\nowidctlpar\widctlpar\tqr\tx8640\adjustright \f39\cgrid {\f0\fs20 4.6  Event Notification Interface\tab 40
\par }\pard\plain \s22\li1152\keep\nowidctlpar\widctlpar\tqr\tx8640\adjustright \f39\cgrid {\f0\fs20 4.6.1  Function 3 - Get Event\tab 42
\par 4.6.2  Function 4 - Send Message\tab 43
\par }\pard \s22\li1152\keep\nowidctlpar\widctlpar\tqr\tx8640\adjustright {\f0\fs20 4.6.3  Function 5 - Get Docking Station Information\tab 47
\par }\pard \s22\li1152\keep\nowidctlpar\widctlpar\tqr\tx8640\adjustright {\f0\fs20 4.6.4  Function 6 - Reserved\tab 49
\par 4.6.5  Function 7 - Reserved\tab 49
\par }\pard \s22\li1152\keep\nowidctlpar\widctlpar\tqr\tx8640\adjustright {\f0\fs20 4.6.6  Function 8 - Reserved\tab 49
\par }\pard\plain \s23\li432\keep\nowidctlpar\widctlpar\tqr\tx8640\adjustright \f39\cgrid {\f0\fs20 4.7  Extended Configuration Services\tab 50
\par }\pard\plain \s22\li1152\keep\nowidctlpar\widctlpar\tqr\tx8640\adjustright \f39\cgrid {\f0\fs20 4.7.1  Function 9 - Set Statically Allocated Resource Information\tab 51
\par 4.7.2  Function 0Ah - Get Statically Allocated Resource Information\tab 53
\par }\pard \s22\li1152\keep\nowidctlpar\widctlpar\tqr\tx8640\adjustright {\f0\fs20 4.7.3  Function 40h - Get Plug & Play ISA Configuration Structure\tab 54
\par }\pard \s22\li1152\keep\nowidctlpar\widctlpar\tqr\tx8640\adjustright {\f0\fs20 4.7.4  Function 41h - Get Extended System Configuration Data (ESCD) Info\tab 56
\par 4.7.5   Function 42h - Read Extended System Configuration Data (ESCD)\tab 56
\par }\pard \s22\li1152\keep\nowidctlpar\widctlpar\tqr\tx8640\adjustright {\f0\fs20 4.7.6   Function 43h - Write Extended System Configuration Data (ESCD)\tab 57
\par }\pard\plain \s23\li432\keep\nowidctlpar\widctlpar\tqr\tx8640\adjustright \f39\cgrid {\f0\fs20 4.8  Power Management Services\tab 58
\par }\pard\plain \s22\li1152\keep\nowidctlpar\widctlpar\tqr\tx8640\adjustright \f39\cgrid {\f0\fs20 4.8.1  Function 0Bh - Get APM ID Table\tab 58
\par }\pard\plain \s24\sb240\keep\keepn\nowidctlpar\widctlpar\tqr\tlul\tx8640\adjustright \b\f38\cgrid {\f0\fs20 Appendix A: Generic Option ROM Headers\tab 61
\par Appendix B: Device Driver Initialization Model\tab 62
\par }\pard \s24\sb240\keep\keepn\nowidctlpar\widctlpar\tqr\tlul\tx8640\adjustright {\f0\fs20 Appendix C:  Return Codes\tab 64
\par }\pard\plain \s1\sb240\sa240\keep\keepn\nowidctlpar\widctlpar\tlul\tx8640\outlinelevel0\adjustright \b\f38\fs36\cgrid }}\pard\plain \s1\sb240\sa240\keep\keepn\nowidctlpar\widctlpar\tlul\tx8640\outlinelevel0\adjustright \b\f38\fs36\cgrid {\f0 
\par }\pard \s1\sb240\sa240\keep\keepn\nowidctlpar\widctlpar\tlul\tx8640\outlinelevel0\adjustright {\f0 \page References\tab 
\par }\pard\plain \s45\fi-576\li576\sa240\keep\nowidctlpar\widctlpar\adjustright \f39\fs20\cgrid {\f0 Plug and Play ISA Specification Version 1.0A May 5, 1994\line {\*\bkmkstart i1}{\*\bkmkend i1}Send email to plugplay@microsoft.com to obtain a copy.
\par }\pard \s45\fi-576\li576\sa240\keep\nowidctlpar\widctlpar\adjustright {\f0 EISA Specification Version 3.12\line Contact BCPR Services Inc to obtain a copy.
\par }\pard \s45\fi-576\li576\sa240\keep\nowidctlpar\widctlpar\adjustright {\f0 Extended System Configuration Data Specification Version 1.02a\line \tab Contact Intel Corporation to obtain a copy.
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\lang1024\cgrid {Device Identifier Reference Table & Device Type Code Table\line \tab Browse the PlugPlay forum on CompuServe  to obtain a copy.
\par }\pard\plain \s1\sb240\sa240\keep\keepn\nowidctlpar\widctlpar\tlul\tx8640\outlinelevel0\adjustright \b\f38\fs36\cgrid {\f0 1.0  Overview\tab 
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\lang1024\cgrid {
This  Plug and Play BIOS Specification defines new functionality to be provided in a PC compatible system BIOS to fulfill the goals of Plug and Play.  To achieve these goals, several new components have been added to the System BIOS.  Two key areas that a
re addressed by the System BIOS are resource management and runtime configuration.
\par }\pard \nowidctlpar\widctlpar\adjustright {Resource management provides the ability to manage the fundamental system resources which include DMA, Interrupt Request Lines (IRQs), I/O and Memory addresses.  These resources, termed }{\b\i system resources, }
{
are in high demand and commonly are over-allocated or allocated in a conflicting manner in ISA systems, leading to bootstrap and system configuration failures.  A plug and play system BIOS will play a vital role in helping to manage these resources and en
sure a successful launch of the operating system.
\par In its role as resource manager, a Plug and Play BIOS takes on the responsibility for configuring Plug and Play cards, as well as syst
emboard devices during the power-up phase.  After the POST process is complete, control of the Plug and Play device configuration passes from the system BIOS to the system software.  The BIOS does, however, provide configuration services for systemboard d
evices even after the POST process is complete.  These services are known as Runtime Services.
\par Runtime configuration is a concept that has not previously existed in a System BIOS before.  The system BIOS has not previously provided the ability to dynamical
ly change the resources allocated to systemboard devices after the operating system has been loaded.  The Plug and Play BIOS Specification provides a mechanism whereby a Plug and Play operating system may perform this resource allocation dynamically at ru
ntime.  The operating system may directly manipulate the configuration of devices which have traditionally been considered static via a System BIOS device node structure.
\par In addition, a Plug and Play System BIOS may also support event management.  By means
 of the interfaces outlined in this document, the System BIOS may communicate the insertion and removal of newly installed devices which have been added to the system at runtime.  The event management support defined by this specification are specific to 
devices controlled by the system BIOS, such as docking a notebook system to, or undocking it from, an expansion base.  This event management does not encompass the insertion and removal of devices on the various expansion busses.
\par This document describes the BIOS support necessary for both systemboards and add-in boards with Option ROMs.
\par }\pard\plain \s2\sb240\sa240\sl240\slmult0\keep\keepn\nowidctlpar\widctlpar\tx1440\outlinelevel1\adjustright \b\f38\fs28\cgrid {\f0 1.1 Goals of a Plug and Play System BIOS
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\lang1024\cgrid {Considering the scope of Plug and Play, the following are the goals of the Plug and Play BIOS Specification.
\par }\pard \nowidctlpar\widctlpar\adjustright {\b Maximize ISA compatibility
\par }\pard\plain \s43\li576\sa240\keep\nowidctlpar\widctlpar\tx1728\tx2304\adjustright \f39\cgrid {\f0\fs20 
This is the key consideration in a system BIOS.  It is considered unacceptable to change the architecture of a System BIOS to prevent the thousands of ISA cards and software programs that rely on the system BIOS for services.
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\lang1024\cgrid {\b Eliminate resource conflicts during the POST procedure
\par }\pard\plain \s43\li576\sa240\keep\nowidctlpar\widctlpar\tx1728\tx2304\adjustright \f39\cgrid {\f0\fs20 
A common problem that plagues many ISA systems today is the fact that there are a lot more devices available than there are system resources.  In this environment, devices are bound to have conflicting resources.  The system BIOS will now play a key role 
to help prevent these resource conflicts by not enabling devices which conflict with the primary boot devices, and relocating boot devices, if necessary, to allow a successful load of the operating system.  It is the role 
of the operating system to provide support for communicating irreconcilable resource conflicts to the user.
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\lang1024\cgrid {\b Support Plug and Play ISA cards
\par }\pard\plain \s43\li576\sa240\keep\nowidctlpar\widctlpar\tx1728\tx2304\adjustright \f39\cgrid {\f0\fs20 
A Plug and Play system BIOS is responsible for the isolation, enumeration, and optional configuration of Plug and Play ISA cards.  These cards, which provide information on their resource requirements and permit software to configure those resources, will
 allow the system BIOS to arrive at a conflict free configuration necessary to load the operating system.
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\lang1024\cgrid {\b Allow dynamic configuration of systemboard devices
\par }\pard\plain \s43\li576\sa240\keep\nowidctlpar\widctlpar\tx1728\tx2304\adjustright \f39\cgrid {\f0\fs20 
Systemboard devices have traditionally been treated as having somewhat static configurations.  It is a goal of the Plug and Play BIOS specification to provide a standard mechanism whereby systemboard devices may be configured dynamically by system softwar
e.  This will grant configuration management software a great deal of flexibility when system resources are in demand and alternate configurations are necessary.
\par }{\i\f0\fs20 Note:  Dynamic device configuration requires explicit device driver support.
\par }{\f0\fs20 
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\lang1024\cgrid {\b Provide system event notification
\par }\pard\plain \s43\li576\sa240\keep\nowidctlpar\widctlpar\tx1728\tx2304\adjustright \f39\cgrid {\f0\fs20 
The system BIOS is capable of detecting certain hardware events that could affect the system configuration.  By providing an event notification mechanism, an operating system can recognize the event and process any necessary configuration changes.}{

\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\lang1024\cgrid {\page }{\b Hardware and Operating System independence
\par }\pard\plain \s43\li576\sa240\keep\nowidctlpar\widctlpar\tx1728\tx2304\adjustright \f39\cgrid {\f0\fs20 
The extensions to the system BIOS isolate the systemboard hardware through well defined interfaces and structures.  The system device nodes represent dev
ices that are controlled by the system BIOS.  The operating system requires no specific knowledge of the systemboard in order to control these devices, and instead relies on the system BIOS to isolate it from the underlying hardware.
\par }\pard\plain \s2\sb240\sa240\sl240\slmult0\keep\keepn\nowidctlpar\widctlpar\tx1440\outlinelevel1\adjustright \b\f38\fs28\cgrid {\f0 1.2  Enhancements to the current BIOS architecture
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\lang1024\cgrid {The Plug and Play BIOS Specification attempts to make several improvements to the current PC system BIOS architecture to achieve the goals stated previously.
\par }\pard\plain \s45\fi-576\li576\sa240\keep\nowidctlpar\widctlpar\adjustright \f39\fs20\cgrid {\field\flddirty{\*\fldinst {\b\f0 SYMBOL 183 \\f "Symbol" \\s 10 \\h}}{\fldrslt }}{\b\f0 \tab Perform resource allocation and conflict resolution at POST time.

\par }\pard \s45\fi-576\li576\sa240\keep\nowidctlpar\widctlpar\adjustright {\b\f0 \tab }{\f0 
The current System BIOS Architecture performs no such resource management at POST time.  The goal is to increase the probability of successfully bootstrapping into the OS by specifying resource management at POST time.
\par }{\field\flddirty{\*\fldinst {\b\f0 SYMBOL 183 \\f "Symbol" \\s 10 \\h}}{\fldrslt }}{\b\f0 \tab Actively monitor the INT 19h bootstrap vector
\par }{\f0 \tab The current System BIOS Architecture allows option ROMs to hook INT 19h indiscriminately.  By actively monitoring control of INT 19h, the System BIOS may regain control of th
e Bootstrap process to ensure that the Operating System is loaded from the proper device and in the proper manner.
\par }{\field\flddirty{\*\fldinst {\b\f0 SYMBOL 183 \\f "Symbol" \\s 10 \\h}}{\fldrslt }}{\b\f0 \tab Provide a mechanism for Remote Program Load
\par }{\f0 \tab 
The current architecture provides no specific support for RPL.  Consequently, RPL devices must resort to hooking the INT 19h bootstrap vector or INT 18h, the alternate bootstrap vector.  Hooking these vectors can interfere with system specific security f
eatures, as well as result in bootstrap failures.  The method and support for booting from RPL devices is beyond the scope of the Plug and Play BIOS Specification.  A separate specification should define explicit support for RPL devices.
\par }{\field\flddirty{\*\fldinst {\b\f0 SYMBOL 183 \\f "Symbol" \\s 10 \\h}}{\fldrslt }}{\b\f0 \tab Provide Runtime Configuration Support
\par }{\f0 \tab 
Proprietary techniques exist to support device resource configuration and reporting.  The Plug and Play BIOS Specification defines specific, standard interfaces whereby configuration software may identify and configure devices on the systemboard.
\par }{\field\flddirty{\*\fldinst {\b\f0 SYMBOL 183 \\f "Symbol" \\s 10 \\h}}{\fldrslt }}{\b\f0 \tab Provide Dynamic Event Notification
\par \tab }{\f0 
A further extension of the Runtime Configuration Support allows the System BIOS to report dynamic configuration events to the Plug and Play software such that new devices added into the system may be resource managed.  This dynamic event notification inte
rface is specific to devices controlled by the system BIOS.  It does not encompass the insertion and removal of devices on the various expansion busses
\par }\pard\plain \s2\sb240\sa240\sl240\slmult0\keep\keepn\nowidctlpar\widctlpar\tx1440\outlinelevel1\adjustright \b\f38\fs28\cgrid {\f0 1.3  Elements of the Plug and Play BIOS architecture
\par }\pard\plain \s3\sb240\sa240\sl240\slmult0\keep\keepn\nowidctlpar\widctlpar\tx1440\outlinelevel2\adjustright \b\f38\cgrid {\f0 1.3.1 Bi-modal functionality
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\lang1024\cgrid {
All Plug and Play BIOS Services which are accessible at runtime support a bi-modal interface.  The two modes supported are 16-bit Real Mode and 16-bit Protected Mode.  These two modes are sufficient to support a wide variety of operating environments.  Re
al Mode interfaces are defined in terms of the segment and offset of the service entry point.
\par }\pard \nowidctlpar\widctlpar\adjustright {Protected Mode interfaces specify the code segment base address so that the caller can construct the descriptor from the seg
ment base address before calling the interface from protected mode.  The offset value is the offset of the entry point.  It is assumed that the 16-Bit Protected Mode interface is sufficient for 32-Bit Protected Mode callers.  However, it is important to n
ote that Plug and Play BIOS functions will access arguments on the stack as a 16-bit stack frame.  Therefore, the caller must ensure that the function arguments are pushed onto the stack as 16-bit values and not 32-bit values.  For function arguments that
 are pointers, the pointer offset and data should be contained within the first 64K bytes of the segment.  Refer to section 4.4 Plug and Play Installation Check for a complete description of the bi-modal interface.
\par }\pard\plain \s3\sb240\sa240\sl240\slmult0\keep\keepn\nowidctlpar\widctlpar\tx1440\outlinelevel2\adjustright \b\f38\cgrid {\f0 1.3.2  OS Independence
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\lang1024\cgrid {
The Plug and Play BIOS services, which are accessible during normal system operation, are defined in a manner independent from the operating system.    The BIOS System Device Nodes are a compact form of a device node tailored specifically to the configura
tion of systemboard devices.
\par }\pard \nowidctlpar\widctlpar\adjustright {A Plug and Play OS which complies with the general framework of the Plug and Play Architecture requires a software isolation/translation layer between the System BIOS and the OS.  
\par The isolation/translation software performs the task of translating the generic BIOS interfaces defined in this specification into those required to support configuration management in the desired  operating environment.
\par }\pard\plain \s3\sb240\sa240\sl240\slmult0\keep\keepn\nowidctlpar\widctlpar\tx1440\outlinelevel2\adjustright \b\f38\cgrid {\f0 1.3.3  Expandability 
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\lang1024\cgrid {Throughout the Plug and Play BIOS Specification care was taken to provide 
a mechanism for extensibility of this specification.  All significant structures and interfaces are defined with revision identifiers.  These revision identifiers provide a mechanism whereby the interfaces defined may be extended so long as the interfaces
 remain backward compatible to the original specification.
\par }\pard\plain \s2\sb240\sa240\sl240\slmult0\keep\keepn\nowidctlpar\widctlpar\tx1440\outlinelevel1\adjustright \b\f38\fs28\cgrid {\f0 1.4  Installation Structure 
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\lang1024\cgrid {Section 4.4 of this specification defines the Plug and Play installation check procedure and structure.  This mechanism defines a structure which may be located on any
 16-byte boundary within the System BIOS address space of 0F0000h - 0FFFFFh.  Software which must determine if it is operating on a platform supporting a Plug and Play BIOS, should scan the specified address space searching for the ASCII string "$PnP" on 
16-byte boundaries.  If the software identifies such a string on a 16-byte boundary, it must validate that it has indeed found a Plug and Play Installation Check Structure by verifying the structure's checksum and validate either the version field or the 
length field or both.  A valid checksum indicates that the system BIOS provides all of the required functions of the Plug and Play System BIOS specification.
\par }\pard \nowidctlpar\widctlpar\adjustright {
Specifying this structure in this manner permits it to float anywhere in the specified address range.  This permits the System BIOS developer to locate the structure within their ROM without having to be concerned about it interfering with other structure
s that they may have specified at fixed addresses.
\par }\pard\plain \s1\sb240\sa240\keep\keepn\nowidctlpar\widctlpar\tlul\tx8640\outlinelevel0\adjustright \b\f38\fs36\cgrid {\f0 2.0 System BIOS Initialization\tab 
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\lang1024\cgrid {The Power On Se
lf Test (POST) procedure of a system BIOS is designed to identify, test, and configure the system in preparation for starting the operating system.  At the completion of POST, the PC compatible system BIOS attempts to have all of the appropriate devices e
nabled in order for them to be properly recognized and functioning when the operating system loads.
\par }\pard \nowidctlpar\widctlpar\adjustright {Over the years, PC compatible systems have become much more sophisticated in terms of the bus architectures supported and the devices attached.  As these PC
 compatible systems have evolved and become more sophisticated, so has the system BIOS, which is responsible for the initial configuration of these devices. However, one component has remained relatively constant in a PC compatible system. This is the }{
\b\i system resources}{.  }{\b\i System resources,}{ as described in this document include DMA channels, Interrupt Request Lines (IRQs), I/O addresses, and memory.
\par As the sophistication of these systems increases with more and more devices, the possibility of resource confli
cts also increase, leading to a possible boot or system failure. The Plug and Play BIOS specification is defined to solve the problems that occur with resource conflicts. Specifically, the Plug and Play BIOS is taking on a new responsibility to ensure tha
t the operating system is loaded with a conflict free set of resources, as well as indicating to the operating system the resources that are currently used by systemboard devices.
\par }\pard\plain \s2\sb240\sa240\sl240\slmult0\keep\keepn\nowidctlpar\widctlpar\tx1440\outlinelevel1\adjustright \b\f38\fs28\cgrid {\f0 2.1  System BIOS POST Requirements
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\lang1024\cgrid {In order to achieve the goals of Plug and Play, the system BIOS POST is responsible for achieving the requirements listed below:
\par }\pard \fi-360\li360\nowidctlpar\widctlpar\adjustright {\field\flddirty{\*\fldinst {\b SYMBOL 183 \\f "Symbol" \\s 10 \\h}}{\fldrslt }}{\b \tab Maintain ISA POST compatibility
\par }\pard \fi-360\li360\nowidctlpar\widctlpar\adjustright {\tab 
The important issue of this broad requirement is that a Plug and Play system BIOS is responsible for the same POST requirements of an existing PC compatible system BIOS.  This document focuses only on the enhancements necessary to a PC compatible system 
BIOS and assumes that the basic BIOS POST initialization is still performed.
\par }\pard \fi-360\li360\nowidctlpar\widctlpar\adjustright {\page }{\field\flddirty{\*\fldinst {SYMBOL 183 \\f "Symbol" \\s 10 \\h}}{\fldrslt }}{\tab }{\b Configuration of all static devices known to system BIOS
\par }\pard \fi-360\li360\nowidctlpar\widctlpar\adjustright {\tab 
At a minimum, this includes system board devices.  It can also include Plug and Play ISA Cards and devices located on EISA, ISA, PCI, or any of the other static bus architectures available.  How this configuration is completed will be described in a late
r section.
\par }\pard \fi-360\li360\nowidctlpar\widctlpar\adjustright {\field\flddirty{\*\fldinst {\b SYMBOL 183 \\f "Symbol" \\s 10 \\h}}{\fldrslt }}{\b \tab BIOS POST Resource arbitration
\par }\pard \fi-360\li360\nowidctlpar\widctlpar\adjustright {\tab The system BIOS must now be aware of  }{\b\i system resource}{ usage.  Using the information provided through runtim
e services (described in a later section), along with resource information known to the system BIOS, critical resource conflicts can be avoided.  Loading the operating system with a conflicting device disabled is better than causing a resource conflict an
d a possible system failure.
\par }\pard \fi-360\li360\nowidctlpar\widctlpar\adjustright {\field\flddirty{\*\fldinst {\b SYMBOL 183 \\f "Symbol" \\s 10 \\h}}{\fldrslt }}{\b \tab Initialization of the  Initial Program Load (IPL) device
\par }\pard \fi-360\li360\nowidctlpar\widctlpar\adjustright {\tab  It is the responsibility of the system BIOS POST to make sure that resources for the IPL device get allocated correctly in anticipation of a successful load of the operating system.  }{If 
\ldblquote disabled\rdblquote  IPL {\*\bkmkstart cpq01}{\*\bkmkend cpq01}devices are needed to achieve boot, then }{
the system BIOS POST should take the initiative to reenable "disabled" IPL devices in an intelligent sequence to provide the best opportunity for system boot.
\par }\pard \fi-360\li360\nowidctlpar\widctlpar\adjustright {\field\flddirty{\*\fldinst {\b SYMBOL 183 \\f "Symbol" \\s 10 \\h}}{\fldrslt }}{\b \tab Support for both Plug and Play and Non-Plug and Play Operating Systems
\par }\pard \fi-360\li360\nowidctlpar\widctlpar\adjustright {\tab The Plug and Play system BIOS POST must configure the system to operate with both Plug and Play aware, as well as non-Plug and Play oper
ating system.  In non-Plug and Play environments, either the system BIOS or the appropriate system software (device drivers) must configure all devices (Plug and Play ISA Cards, PCI devices, etc.).  This will allow all environments to load exactly as they
 would on a standard PC compatible systems. However, in a Plug and Play environment, the system BIOS can now assist the operating system to perform features such as runtime configuration of system board devices and event recognition when system board devi
ces have changed.
\par }\pard\plain \s3\sb240\sa240\sl240\slmult0\keep\keepn\nowidctlpar\widctlpar\tx1440\outlinelevel2\adjustright \b\f38\cgrid {\f0 2.1.1  System Board Storage Requirements
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\lang1024\cgrid {
Adding optional static resource allocation capabilities to the Plug and Play BIOS POST procedure will require additional storage.  This storage is necessary for maintaining information about }{\b\i system resources}{
 that have been explicitly assigned to the boot devices as well as the system resources being utilized by ISA devices in the system.  The amount of storage that will be necessary is platform specific, but could exceed the amount of storage normal
ly available in PC compatible systems.
\par }\pard \nowidctlpar\widctlpar\adjustright {
If the static resource allocation option is implemented, then the system BIOS is required to follow the function interface defined later in this document.  This interface provides the mechanism for system software to specify the information about these sy
stem resources.  How the information is actually stored in the nonvolatile storage on the system is left up to the BIOS implementor.
\par This new storage must be readily available and dependable during the system BIOS PO
ST for the system BIOS to provide effective resource allocation.  The type of storage, which can be either Flash, CMOS, NVRAM, or some other type of nonvolatile storage, and the amount of additional storage needed will vary depending on the systemboard re
quirements.  It is left to the systemboard manufacturer to make available additional storage to the system BIOS, and the BIOS suppliers responsibility to manage and allocate this nonvolatile storage.
\par }\pard\plain \s3\sb240\sa240\sl240\slmult0\keep\keepn\nowidctlpar\widctlpar\tx1440\outlinelevel2\adjustright \b\f38\cgrid {\f0 2.1.2  System BIOS Resource Management
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\lang1024\cgrid {A key element of a Plug and Play BIOS is to provide accurate resource management.  Management of }{\b\i system resources}{
, which includes DMA, IRQs, I/O, and Memory, is vital to a system BIOS POST if it is to guarantee successful loading of the operating system.  Unfortunately, there is no clear defined procedure for how these }{\b\i system resources}{
 should be allocated by the system BIOS.  This section will describe how the system BIOS POST can manage resources and will outline the different methods that can be used to allocate the system resources.
\par }\pard\plain \s3\sb240\sa240\sl240\slmult0\keep\keepn\nowidctlpar\widctlpar\tx1440\outlinelevel2\adjustright \b\f38\cgrid {\f0 2.1.3  Isolating Committed Resources
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\lang1024\cgrid {The first step to resource management is to determine }{\b\i system resources}{
 that are statically allocated to devices in the system.  These resources can be located on ISA cards, systemboard devices, or any other device present in the system.  Unfortunately, it is very difficult, if not impossible, to accurately determine the res
ources used, unless these devices provide information about the system resources they will use.
\par }\pard \nowidctlpar\widctlpar\adjustright {With this in mind, it is necessary fo
r an external program to help isolate the resources that these devices are using.  How this external program determines the resources consumed by these devices is beyond the scope of this document. However, what is within the scope is the interface that t
he system BIOS provides to indicate resources that are allocated to the ISA devices.
\par Function 09h, }{\b\i Set Statically Allocated Resource Information,}{ of the runtime services is designed to support an external program that can indicate the resources that are al
located to the static ISA devices in the system.  Through this interface, the }{\b\i system resources}{
 utilized by these ISA devices will be saved in nonvolatile storage.  This will allow the system BIOS to ensure the configuration of the boot devices in the system do not conflict with any static ISA devices during the POST configuration process. 
\par }\pard\plain \s3\sb240\sa240\sl240\slmult0\keep\keepn\nowidctlpar\widctlpar\tx1440\outlinelevel2\adjustright \b\f38\cgrid {\f0 2.1.4  System BIOS Resource Allocation
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\lang1024\cgrid {There are three fundamental methods that the system BIOS POST can use to allocate resources to devices. They are:
\par }\pard \nowidctlpar\widctlpar\adjustright {\i Static Resource Allocation}{
 - Allocate resources based on the last working configuration of the system.  This requires that the resources assigned to specific devices in the system be saved in nonvolatile storage on the system.  This configuration information must be accessible to 
the system BIOS during POST.  The interface and format for storing the resource information explicitly assigned to every device in the system may be stored in an OEM specific format or it may follow the }{\i Extended System Configuration Data (ESCD)}{ 
format.  Refer to the }{\i ESCD Specification}{
 for a complete description of the ESCD and its interfaces.  The ESCD interface provides a mechanism for allowing system software the ability to lock the system resources allocated to specific devices in the system.  This will allow the configuration of d
evices to remain consistent between operating sessions.
\par }{\i Dynamic Resource Allocation }{- Dynamically auto-configure the systemboard and Plug and Play devices in the system.  At a minimum, the system BIOS must ensure tha
t only the primary boot devices are properly configured to boot the system software.  When loaded, the system software is responsible for dynamically configuring all remaining devices.  Depending on the system's architecture, the BIOS may have to implemen
t Function 09h, }{\b\i Set Statically Allocated Resource Information, }{to guarantee a conflict free boot device configuration.
\par }{\i Combined Static and Dynamic Resource Allocation - }{Allocating resources based on the configuration information specified for the last work
ing configuration for the system, as well as dynamically configuring the Plug and Play devices in the system, which were not specified in the last working configuration resource information.
\par A system BIOS can use any one of these methods for allocating system resources to the devices in the system.  What is important for each of these methods to work successfully is an accurate accounting of the committed resources used in the system.  It is 
important to note that the primary responsibility for system BIOS
 resource allocation is to ensure that the primary boot devices are configured properly to boot the Plug and Play operating system.  If the Plug and Play system BIOS chooses to only configure the primary boot devices, the appropriate system software or Pl
ug and Play operating system will be responsible for configuring any unconfigured devices.
\par }{\b\fs24 Static Resource Allocation
\par }\pard \nowidctlpar\widctlpar\adjustright {This method assumes that the system software has specified the appropriate resource configuration information to the system BIOS for ALL 
devices in the system.  As mentioned above, it is an option that the system BIOS interface, for allowing system software to provide the last working configuration information to the system BIOS, follows the }{\i Extended System Configuration Data (ESCD)}{
 format.
\par }\pard \nowidctlpar\widctlpar\adjustright {Once this information has been saved by the system BIOS, this information is used by the BIOS during POST to allocate resources to all of the configurable devices that are known to the system BIOS.
\par There are certain benefits that can be realized by supp
orting Static Resource Allocation.  First, the configuration of every device in the system is saved in nonvolatile storage which allows the BIOS to allocate the appropriate resources to the devices in the system during POST.  This allows the last working 
configuration to be maintained from boot to boot.  Another benefit comes from the ability to explicitly assign, or lock, the resources allocated to any Plug and Play card in the system.  Static resource allocation will require nonvolatile storage on the s
ystem for storing the resource allocation for each device in the system.
\par }{\i Example:}{
 The EISA architecture is an example of an architecture which uses static resource allocation.  The EISA configuration utility is responsible for determining device resource allocations, then storing that information for the BIOS.  Upon initialization, th
e system BIOS accesses the stored device configurations and subsequently programs each device accordingly.  The system BIOS does not perform any conflict detection or resolution.
\par }{\b\fs24 Dynamic Resource Allocation
\par }\pard \nowidctlpar\widctlpar\adjustright {
The method for dynamic resource allocation is for the system BIOS POST to dynamically allocate resources to configurable devices using a procedure considered most desirable or effective to the system BIOS. This method usually needs to know what resources 
are being used by static (old ISA) devices in the system to work successfully.  The system resources allocated to the static devices are registered with the system BIOS through function 09h, }{\b\i Set Statically Allocated Resource Information}{
, of the runtime services.
\par }\pard \nowidctlpar\widctlpar\adjustright {
The primary benefits of dynamic resource allocation are the minimal amount of nonvolatile storage required and the flexibility in resource allocation provided to the Plug and Play devices installed in the system.  As mentioned above, the system BIOS needs
 to know the system resources being used by the static devices for effective dynamic resource allocation.  The system software must provide this information through the }{\b\i Set Statically Allocated Resource Information}{ function.
\par }{\i Example:}{
 An example of a system which supports dynamic resource allocation is one where the system BIOS only stores information regarding static ISA devices (assuming that this information is supplied by a configuration utility).  Using this stored information, a
 system BIOS could use semi-intelligent algorithms to configure the Plug and Play devices "around" the static ISA devices.  Such a configuration is dynamic because it is determined each time the system boots.
\par }\pard\plain \s2\sb240\sa240\sl240\slmult0\keep\keepn\nowidctlpar\widctlpar\tx1440\outlinelevel1\adjustright \b\f38\fs28\cgrid {\f0 2.2  Plug and Play ISA Card Support
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\lang1024\cgrid {One responsibility of a Plug and Play BIOS during POST is to isolate and initialize all Plug and Play ISA cards and assign them with a valid Card Select Number (}{\b\i CSN)}{. Once a }{
\b\i CSN}{
 is assigned, the system BIOS can then designate resources to the Plug and Play ISA cards  according to the resource allocation scheme chosen for the system.  While the configuration of the required Plug and Play ISA boot devices by the Plug and Play BIOS
 is mandatory, all of the remaining Plug and Play devices may be configure
d dynamically by the system software at boot.    The system BIOS mayalso provide a mechanism for system software to explicitly allocate system resources to the Plug and Play ISA cards in the system.  For example, the system BIOS could provide support for 
allocating the last working configuration.
\par }\pard\plain \s3\sb240\sa240\sl240\slmult0\keep\keepn\nowidctlpar\widctlpar\tx1440\outlinelevel2\adjustright \b\f38\cgrid {\f0 2.2.1  Assigning CSN to Plug and Play ISA cards
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\lang1024\cgrid {Early in the POST process, a Plug and Play system BIOS should always perform the isolation process for Plug and Play ISA cards as specified in the Plug and Play ISA
 specification V1.00.  This process should be performed regardless if }{\b\i CSNs}{ have already been assigned to the Plug and Play Devices. This will guarantee accurate initialization of each Plug and Play device during the start of the operating system.

\par }\pard \nowidctlpar\widctlpar\adjustright {The Plug and Play ISA specification requires that }{\b\i CSNs}{ must be assigned sequentially starting at one and continuing in the order that each Plug and Play ISA card is isolated.
\par A responsibility of the system BIOS is to maintain the last assigned }{\b\i CSN}{.  This information will be returned through function 40h, }{\b\i Get ISA Configuration Structure,}{
 of the Plug and Play runtime services.  Programs that want to scan through the}{\b\i  CSNs}{ looking for their adapter will need to know the last }{\b\i CSN}{ assigned.
\par {\*\bkmkstart i3}{\*\bkmkend i3}
On systems with a dynamic ISA bus, like portables, function 40h will be more flexible. When an ISA bus is present, the information returned by function 40h will always be valid after a cold boot.  On a cold boot with no ISA bus present, function 40h will 
return zeros.  After an ISA w
arm/hot dock, the function 40h information will also be valid, if the plug and play BIOS isolates and enumerates the plug and play adapter cards before returning control to the plug and play operating system.  If the BIOS does not re-enumerate after an IS
A warm/hot dock event, then the information returned by function 40h will be zeros.  After an ISA undock event, this information will{\*\bkmkstart cpq02}{\*\bkmkend cpq02} also be zeros. 
\par }\pard\plain \s3\sb240\sa240\sl240\slmult0\keep\keepn\nowidctlpar\widctlpar\tx1440\outlinelevel2\adjustright \b\f38\cgrid {\f0 2.2.2  Initializing Plug and Play ISA Cards
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\lang1024\cgrid {After CSNs have been assigned, all Plug and Play ISA devices 
should be inactive.  Later in POST when the system resources have been determined, Plug and Play ISA cards will be enabled as determined by the system's allocation scheme.  This means that at least all of the  Plug and Play ISA bootable cards will be conf
igured and enabled.
\par }\pard \nowidctlpar\widctlpar\adjustright {
During the POST sequence, the system BIOS will need to select an Input, Output, and Initial Program Load (IPL) device. Based on the other devices in the system, any Plug and Play device that is a boot device will get enabled to provide 
the boot services.  Plug and Play devices that are not boot devices may get enabled later in POST if, and only if they can be enabled without creating a resource conflict.
\par The method used to allocate resources to the Plug and Play ISA cards depends on the resource allocation method described in the section above. If }{\b\i Static Resource Allocation}{\b  }{
is being used then the Plug and Play ISA devices will be initialized according to the information specified for the last working configuration.  If }{\b\i Dynamic Resource Allocation}{
 is being used then resource information available from the Plug and Play ISA card will be used to configure the device during the BIOS POST process.
\par }\pard\plain \s2\sb240\sa240\sl240\slmult0\keep\keepn\nowidctlpar\widctlpar\tx1440\outlinelevel1\adjustright \b\f38\fs28\cgrid {\f0 2.3  BIOS POST Option ROM Initialization
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\lang1024\cgrid {
One of the new features of the Plug and Play BIOS architecture is the enhancements to the ISA Option ROM architecture.  This new interface will help couple the system BIOS closely with the Plug and Play option ROM to assist the system BIOS in completing t
he POST configuration process.  For details about the Plug and Play option ROM enhancements, refer to the section on the Plug and Play Option ROM.  This section describes how the system BIOS will initialize both standard ISA and Plug and Play Option ROMs.

\par }\pard \nowidctlpar\widctlpar\adjustright {
All ISA option ROMs that are not Plug and Play compatible will be initialized by the Plug and Play BIOS POST using the exact procedure used in existing PC compatible systems. This procedure is performed by scanning the C0000h to EFFFFh address space on 2K
 boundaries searching for a 55AAh header.  Once located, the module is checksummed to determine if the structure is valid and, if valid, the option ROM is initialized by making a far call to offset 03h within the segment.
\par There are two different environments that Plug and Play compliant option ROMs could be installed in.  The first is a standard PC compatible system that does not have a Plug and Play compatible system BIOS.  The second environment is a system that has a Pl
ug and Play system BIOS.  The option ROM can determine which environment it is installed 
in by examining the register information passed to the option ROM's initialization routine.  It is able to perform this check because the Plug and Play BIOS will provide the following information:
\par Entry:\tab ES:DI\tab Pointer to System BIOS Plug and Play Installation Check Structure (See Section 4.4)
\par \tab The following registers will only be initialized for Plug and Play ISA devices:
\par \tab BX\tab Card Select Number for this card, FFFFh if this device is not ISA Plug and Play.
\par \tab DX\tab Read Data Port address, FFFFh if there are no ISA Plug and Play devices in the system.
\par For other bus architectures, refer to the appropriate specification.  For example, the PCI Local Bus Specification R2.0 published by the PCI SIG specifies AH=Bus number and AL=Device Function number as parameters for Option ROM initialization.
\par On a system that does not have a Plug and Play compatible system BIOS, ES:DI would not point to a valid Plug and Play Installation Check Structure .  Therefore, by validating the contents of the data pointed to in ES:DI, th
e option ROM can determine whether it is being initialized from a Plug and Play or non-Plug and Play system BIOS.  Once the option ROM has determined the environment it is installed in, it can perform the proper steps for initialization.
\par In the first environment, which is a standard PC compatible system that does not have a Plug and Play compatible system BIOS, the ISA option ROM scan will be performed and the Plug and Play option ROM should initialize exactly as if it was a standard ISA 
option ROM.
\par In th
e second environment, where the system has a Plug and Play system BIOS, the option ROM will recognize the Plug and Play installation check structure and perform the initialization as specified in section 3, which describes the option ROM support.  Option 
ROM initialization routines can not depend on any of the Plug and Play runtime functions to be available until after INT19 has been invoked at the end of the POST process.2.4  Interrupt 19H Execution}{
\par }{Interrupt 19h, commonly referred to as the system bootst
rap loader, is responsible for loading and executing the first sector of the operating system.  This bootstrap sequence is the final component of the system BIOS POST before control is passed onto the operating system.  In a PC system, the Initial Program
 Load (IPL) device can easily be any device supported by an option ROM if it intercepts Interrupt 13h and provides these services.  However, some option ROMs have gone even further and captured Interrupt 19h to control the bootstrap process.
\par An Option ROM 
which takes control of Interrupt 19h presents a major problem to a Plug and Play system BIOS.  The system BIOS can no longer control which device will be the Initial Program Load (IPL) device since it no longer controls the bootstrap sequence.   Given thi
s dilemma, the system BIOS POST will recapture Interrupt 19h away from an option ROM if the primary Initial Program Load (IPL) device  is either a Plug and Play ISA device or a device that is known to the system BIOS (e.g., ATA compatible IDE fixed disk).

\par One particularly interesting situation occurs when the system BIOS has recaptured Interrupt 19h and then determines that it cannot load the operating system due to invalid media or other problems.  In this case, the Plug and Play system BIOS will restore 
the last captured Interrupt 19h vector and reinitiate the Interrupt 19h boot sequence.
\par }\pard\plain \s2\sb240\sa240\sl240\slmult0\keep\keepn\nowidctlpar\widctlpar\tx1440\outlinelevel1\adjustright \b\f38\fs28\cgrid {\f0 2.4  Transferring Control to the Operating System}{
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\lang1024\cgrid {The very last function of the system BIOS POST after loading and validating the operating system boot sector is to tra
nsfer control.  In an ISA system, control is transferred without any parameters.  In a Plug and Play system BIOS, parameters will be passed to the operating system. The parameters are:
\par Entry:\tab ES:DI\tab Pointer to System BIOS Plug and Play Installation Check Structure (See section 4.4)
\par \tab DL\tab Physical device number the OS is being loaded from (e.g. 80h, assuming the device \tab \tab \tab supports INT 13H interface.)
\par In a non-Plug and Play operating environment this information will have no meaning.  However, a Plug and Play
 operating system will look for a Plug and Play system BIOS and use any information it may need. The physical device number is passed to allow the operating system to continue to load from the current physical device, instead of assuming a physical device
 of 00h or 80h.
\par }\pard\plain \s2\sb240\sa240\sl240\slmult0\keep\keepn\nowidctlpar\widctlpar\tx1440\outlinelevel1\adjustright \b\f38\fs28\cgrid {\f0 2.5  POST Execution flow
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\lang1024\cgrid {
The following steps outline a typical flow of a Plug and Play system BIOS POST.  All of the standard ISA functionality has been eliminated for clarity in understanding the Plug and Play POST enhancements.
\par }\pard \fi-720\li720\nowidctlpar\widctlpar\adjustright {\b\i Step 1}{\b \tab Disable all configurable devices
\par }\pard \fi-720\li720\nowidctlpar\widctlpar\adjustright {\tab Any configurable devices known to the system BIOS should be disabled early in the POST process.
\par }\pard \fi-720\li720\nowidctlpar\widctlpar\adjustright {\b\i Step 2}{\b \tab Identify all Plug and Play ISA devices
\par }\pard \fi-720\li720\nowidctlpar\widctlpar\adjustright {\tab Assign CSNs to Plug and Play ISA devices but keep devices disabled.  Also determine which devices are boot devices.
\par }\pard \fi-720\li720\nowidctlpar\widctlpar\adjustright {\b\i Step 3}{\b \tab Construct an initial resource map of allocated resources
\par }\pard \fi-720\li720\nowidctlpar\widctlpar\adjustright {\tab Construct a resource map of resources that are statically allocated to devices in the system.  If the system software has explicitly specified the sys
tem resources assigned to ISA devices in the system through the }{\b\i Set Statically Allocated Resource Information}{ function, the system BIOS will create an initial resource map based on this information.
\par }\pard \fi-720\li720\nowidctlpar\widctlpar\adjustright {\tab 
If the BIOS implementation provides support for saving the last working configuration and the system software has explicitly assigned system resources to specific devices in the system, then this information will be used to construct the resource map.  T
his information will also be used to configure the devices in the system.
\par \page }{\b\i Step 4}{\b \tab Enable Input and Output Devices
\par }\pard \fi-720\li720\nowidctlpar\widctlpar\adjustright {\tab 
Select and enable the Input and Output Device. Compatibility devices in the system that are not configurable always have precedence.  For example, a standard VGA adapter would become the primary output device.  If configurable Input and Output Devices ex
ists, then enable these devices at this time.  If Plug and Play Input and Output Devices are being selected, then initialize the option ROM, if it exists, using the Plug and Play option ROM initialization procedure (See section 3).
\par }\pard \fi-720\li720\nowidctlpar\widctlpar\adjustright {\b\i Step 5}{\b \tab Perform ISA ROM scan
\par }\pard \nowidctlpar\widctlpar\adjustright {\tab The ISA ROM scan should be performed from C0000h to EFFFFh on every 2K boundary.  Plug \tab and Play Option ROMs are disabled at this time (except input and output boot devices) and will \tab 
not be included in the ROM scan.
\par }\pard \fi-720\li720\nowidctlpar\widctlpar\adjustright {\b\i Step 6}{\b \tab Configure the IPL device
\par }\pard \fi-720\li720\nowidctlpar\widctlpar\adjustright {\tab 
If a Plug and Play device has been selected as the IPL device, then use the Plug and Play Option ROM procedure to initialize the device.  If the IPL device is known to the system BIOS, then ensur
e that interrupt 19h is still controlled by the system BIOS.  If not, recapture interrupt 19h and save the vector.
\par }\pard \nowidctlpar\widctlpar\adjustright {\b\i Step 7}{\b \tab Enable Plug and Play ISA and other Configurable Devices
\par }\pard \fi-720\li720\nowidctlpar\widctlpar\adjustright {\tab 
If a static resource allocation method is used, then enable the Plug and Play ISA cards with conflict free resource assignments.  Initialize the option ROMs and pass along the defined parameters. All other configurable devices should be enabled, if possi
ble, at this time.
\par }\pard \fi-720\li720\nowidctlpar\widctlpar\adjustright {\tab If a dynamic resource allocation method is used, then enable the bootable Plug and Play ISA cards with conflict free resource assignments and initialize the option ROMs.
\par }{\b\i Step 8}{\b \tab Initiate the Interrupt 19H IPL sequence
\par }\pard \fi-720\li720\nowidctlpar\widctlpar\adjustright {\tab 
Start the bootstrap loader.  If the operating system fails to load and a previous ISA option ROM had control of the interrupt 19h vector, then restore the interrupt 19h vector to the ISA option ROM and re-execute the Interrupt 19h bootstrap loader.
\par }\pard \fi-720\li720\nowidctlpar\widctlpar\adjustright {\b\i Step 9}{\b \tab Operating system takes over resource management
\par }\pard \fi-720\li720\nowidctlpar\widctlpar\adjustright {\tab If the loaded operating system is Plug and Play compliant, then it will take over management of the }{\b\i system resources.}{
  It will use the runtime services of the system BIOS to determine the current allocation of these resources.  It is assumed that any unconfigured Plug and Play devices will be configured by the appropriate system software or the Plug and Play operating s
ystem.
\par }\pard\plain \s1\sb240\sa240\keep\keepn\nowidctlpar\widctlpar\tlul\tx8640\outlinelevel0\adjustright \b\f38\fs36\cgrid {\f0 3.0  Option ROM Support\tab 
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\lang1024\cgrid {This section outlines the Plug and Play Option ROM requirements.  This Option ROM support is directed specifically towards boot devices; however,  the }{\b\i 
Static Resource Information Vector}{
 permits non-Plug and Play devices which have option ROMs to take advantage of the Plug and Play Option ROM expansion header to assist a Plug and Play environment whether or not it is a boot device.  A boot device is defined as any device which must be in
itialized prior to loading the Operating System.  Strictly speaking, the only required boot device is the Initial Program Load (IPL) device upon which the operating system is stored.  However, the definition of boot dev
ices is extended to include a primary Input Device and a primary Output device.  In some situations these I/O devices may be required for communication with the user.
\par }\pard \nowidctlpar\widctlpar\adjustright {
All new Plug and Play devices that support Option ROMs should support the Plug and Play Option ROM Header.  In addition, all non-Plug and Play devices may be "upgraded" to support the Plug and Play Option ROM header as well.  While these static ISA device
s will still not have software configurable resources, the Plug and Play Option ROM Header will greatly assist a Plug and Play System BIOS in identification and selection of the primary boot devices.
\par It is important to note that the Option ROM support outlined here is defined specifically for computing platforms based on the Intel X86 family of microprocessors and may not apply to systems based on other types of microprocessors.
\par }\pard\plain \s2\sb240\sa240\sl240\slmult0\keep\keepn\nowidctlpar\widctlpar\tx1440\outlinelevel1\adjustright \b\f38\fs28\cgrid {\f0 3.1 Option ROM Header
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\lang1024\cgrid {The Plug and Play Option ROM Header follows the format of the Generic Option ROM Header extensions described in Appendix A.  The Generic Option
 ROM header is a mechanism whereby the standard ISA Option ROM header may be expanded with minimal impact upon existing Option ROMs.  The pointer at offset 1Ah may point to ANY type of header.  Each header provides a link to the next header; thus, future 
Option ROM headers may use this same generic pointer and still coexist with the Plug and Play Option ROM header.  Each Option ROM header is identified by a unique string.  The length and checksum bytes allow the System BIOS and/or System Software to verif
y that the header is valid.
\par }\pard \keepn\nowidctlpar\widctlpar\adjustright {Standard Option ROM Header:
\par }\trowd \trgaph108\trleft-108\trkeep \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2500\cltxlrtb \cellx960\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 
\clbrdrr\brdrs\brdrw15 \clshdng2500\cltxlrtb \cellx2100\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2500\cltxlrtb \cellx3132\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb
\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2500\cltxlrtb \cellx6588\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2500\cltxlrtb \cellx8580\pard 
\qc\keepn\nowidctlpar\widctlpar\intbl\adjustright {\b Offset\cell }\pard \qc\keepn\nowidctlpar\widctlpar\intbl\adjustright {\b Length\cell Value\cell }\pard \keepn\nowidctlpar\widctlpar\intbl\adjustright {\b Description\cell }\pard 
\keepn\nowidctlpar\widctlpar\intbl\adjustright {\b \cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\b \row }\trowd \trgaph108\trleft-108\trkeep \clvertalt\clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx960
\clvertalt\clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx2100\clvertalt\clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx3132\clvertalt\clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 
\clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx6588\clvertalt\clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx8580\pard \qc\keepn\nowidctlpar\widctlpar\intbl\adjustright {0h\cell }\pard 
\qc\keepn\nowidctlpar\widctlpar\intbl\adjustright {2h\cell AA55h\cell }\pard \keepn\nowidctlpar\widctlpar\intbl\adjustright {Signature\cell Standard\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\trowd \trgaph108\trleft-108\trkeep \clvertalt
\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx960\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx2100\clvertalt\clbrdrt
\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx3132\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx6588\clvertalt\clbrdrt
\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx8580\pard \qc\keepn\nowidctlpar\widctlpar\intbl\adjustright {2h\cell 1h\cell Varies\cell }\pard \keepn\nowidctlpar\widctlpar\intbl\adjustright {
Option ROM Length\cell Standard\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \qc\keepn\nowidctlpar\widctlpar\intbl\adjustright {3h\cell 4h\cell Varies\cell }\pard \keepn\nowidctlpar\widctlpar\intbl\adjustright {Initialization Vector
\cell Standard\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \qc\keepn\nowidctlpar\widctlpar\intbl\adjustright {7h\cell 13h\cell Varies\cell }\pard \keepn\nowidctlpar\widctlpar\intbl\adjustright {Reserved\cell Standard\cell }\pard 
\nowidctlpar\widctlpar\intbl\adjustright {\row }\trowd \trgaph108\trleft-108\trkeep \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx960\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl
\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx2100\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx3132\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl
\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx6588\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx8580\pard \qc\nowidctlpar\widctlpar\intbl\adjustright {
1Ah\cell 2h\cell Varies\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {Offset to Expansion Header Structure\cell New for Plug and Play\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \nowidctlpar\widctlpar\adjustright {
\par }{\b Signature}{ - All ISA expansion ROMs are currently required to identify themselves with a signature WORD of AA55h at offset 0.  This signature is used by the Sys
tem BIOS as well as other software to identify that an Option ROM is present at a given address.
\par }{\b Length}{ - The length of the option ROM in 512 byte increments.
\par }{\b Initialization vector}{
 - The system BIOS will execute a FAR CALL to this location to initialize the Option ROM.  A Plug and Play System BIOS will identify itself to a Plug and Play Option ROM by passing a pointer to a Plug and Play Identification structure when it calls the Op
tion ROM's initialization vector.  If the Option ROM determines that the Sy
stem BIOS is a Plug and Play BIOS, the Option ROM should not hook the input, display, or IPL device vectors (INT 9h, 10h, or 13h) at this time.  Instead, the device should wait until the System BIOS calls the Boot Connection vector before it hooks any of 
these vectors.
\par }{\i Note: A Plug and Play device should never hook INT 19h or INT 18h until its Boot Connection Vector, offset 16h of the Expansion Header Structure (section 3.2), has been called by the Plug and Play system BIOS.
\par }\pard \nowidctlpar\widctlpar\adjustright {If the Option ROM determines t
hat it is executing under a Plug and Play system BIOS, it should return some device status parameters upon return from the initialization call.  See the section on Option ROM Initialization for further details.
\par }\pard \nowidctlpar\widctlpar\adjustright {The field is four bytes wide even though most implementations may adhere to the custom of defining a simple three byte NEAR JMP.   The definition of the fourth byte may be OEM specific.  
\par }{\b Reserved}{ - This area is used by various vendors and contains OEM specific data and copyright strings.
\par }{\b Offset to Expansion Header}{
 - This location contains a pointer to a linked list of Option ROM expansion headers.  Various Expansion Headers (regardless of their type) may be chained together and accessible via this pointer.  The offset specified in this field is the offset from the
 start of the option ROM header.
\par }\pard\plain \s2\sb240\sa240\sl240\slmult0\keep\keepn\nowidctlpar\widctlpar\tx1440\outlinelevel1\adjustright \b\f38\fs28\cgrid {\f0 3.2 Expansion Header for Plug and Play
\par }\trowd \trgaph108\trleft-108\trkeep \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2500\cltxlrtb \cellx960\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 
\clbrdrr\brdrs\brdrw15 \clshdng2500\cltxlrtb \cellx2196\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2500\cltxlrtb \cellx3300\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb
\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2500\cltxlrtb \cellx7848\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2500\cltxlrtb \cellx9720\pard\plain 
\qc\keepn\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {\b Offset\cell Length\cell }\pard \qc\keepn\nowidctlpar\widctlpar\intbl\adjustright {\b Value\cell }\pard \keepn\nowidctlpar\widctlpar\intbl\adjustright {\b Description\cell \cell 
}\pard \nowidctlpar\widctlpar\intbl\adjustright {\b \row }\trowd \trgaph108\trleft-108\trkeep \clvertalt\clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx960\clvertalt\clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 
\clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx2196\clvertalt\clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx3300\clvertalt\clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx7848\clvertalt
\clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx9720\pard \qc\keepn\nowidctlpar\widctlpar\intbl\adjustright {0h\cell }\pard \qc\keepn\nowidctlpar\widctlpar\intbl\adjustright {4 BYTES\cell $PnP\line (ASCII)\cell }\pard 
\keepn\nowidctlpar\widctlpar\intbl\adjustright {Signature\cell Generic\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\trowd \trgaph108\trleft-108\trkeep \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr
\brdrs\brdrw15 \cltxlrtb \cellx960\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx2196\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr
\brdrs\brdrw15 \cltxlrtb \cellx3300\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx7848\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr
\brdrs\brdrw15 \cltxlrtb \cellx9720\pard \qc\keepn\nowidctlpar\widctlpar\intbl\adjustright {04h\cell BYTE\cell Varies\cell }\pard \keepn\nowidctlpar\widctlpar\intbl\adjustright {Structure Revision\cell 01h\cell }\pard 
\nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \qc\keepn\nowidctlpar\widctlpar\intbl\adjustright {{\*\bkmkstart i4}{\*\bkmkend i4}05h\cell BYTE\cell Varies\cell }\pard \keepn\nowidctlpar\widctlpar\intbl\adjustright { Length (in 16 byte increments)
\cell Generic\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\trowd \trgaph108\trleft-108\trkeep \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx960\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl
\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx2196\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx3300\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb 
\cellx7848\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx9720\pard \qc\keepn\nowidctlpar\widctlpar\intbl\adjustright {06h\cell WORD\cell Varies\cell }\pard \keepn\nowidctlpar\widctlpar\intbl\adjustright {
Offset of next Header (0000h if none)\cell Generic\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\trowd \trgaph108\trleft-108\trkeep \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 
\cltxlrtb \cellx960\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx2196\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb 
\cellx3300\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx7848\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx9720
\pard \qc\keepn\nowidctlpar\widctlpar\intbl\adjustright {08h\cell BYTE\cell 00h\cell }\pard \keepn\nowidctlpar\widctlpar\intbl\adjustright {Reserved\cell Generic\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard 
\qc\keepn\nowidctlpar\widctlpar\intbl\adjustright {09h\cell BYTE\cell Varies\cell }\pard \keepn\nowidctlpar\widctlpar\intbl\adjustright {Checksum\cell Generic\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\trowd \trgaph108\trleft-108\trkeep 
\clvertalt\clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx960\clvertalt\clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx2196\clvertalt\clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 
\clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx3300\clvertalt\clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx7848\clvertalt\clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx9720\pard 
\qc\keepn\nowidctlpar\widctlpar\intbl\adjustright {0Ah\cell DWORD\cell Varies\cell }\pard \keepn\nowidctlpar\widctlpar\intbl\adjustright {Device Identifier\cell PnP Specific\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\trowd 
\trgaph108\trleft-108\trkeep \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx960\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 
\cltxlrtb \cellx2196\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx3300\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb 
\cellx7848\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx9720\pard \qc\keepn\nowidctlpar\widctlpar\intbl\adjustright {0Eh\cell WORD\cell Varies\cell }\pard 
\keepn\nowidctlpar\widctlpar\intbl\adjustright {Pointer to Manufacturer String (Optional)\cell PnP Specific\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \qc\keepn\nowidctlpar\widctlpar\intbl\adjustright {10h\cell WORD\cell Varies
\cell }\pard \keepn\nowidctlpar\widctlpar\intbl\adjustright {Pointer to Product Name String (Optional)\cell PnP Specific\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \qc\keepn\nowidctlpar\widctlpar\intbl\adjustright {12h\cell 3 BYTE
\cell Varies\cell }\pard \keepn\nowidctlpar\widctlpar\intbl\adjustright {Device Type Code\cell PnP Specific\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \qc\keepn\nowidctlpar\widctlpar\intbl\adjustright {15h\cell BYTE\cell Varies
\cell }\pard \keepn\nowidctlpar\widctlpar\intbl\adjustright {Device Indicators\cell PnP Specific\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \qc\keepn\nowidctlpar\widctlpar\intbl\adjustright {16h\cell WORD\cell Varies\cell }\pard 
\keepn\nowidctlpar\widctlpar\intbl\adjustright {Boot Connection Vector - Real/Protected mode (0000h if none)\cell PnP Specific\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \qc\keepn\nowidctlpar\widctlpar\intbl\adjustright {18h\cell 
WORD\cell Varies\cell }\pard \keepn\nowidctlpar\widctlpar\intbl\adjustright {Disconnect Vector - Real/Protected mode (0000h if none)\cell PnP Specific\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\trowd \trgaph108\trleft-108\trkeep 
\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx960\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx2196\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 
\clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx3300\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx7848\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx9720\pard 
\qc\keepn\nowidctlpar\widctlpar\intbl\adjustright {1Ah\cell WORD\cell Varies\cell }\pard \keepn\nowidctlpar\widctlpar\intbl\adjustright {Bootstrap Entry Point - Real/Protected mode  (0000h if none)\cell PnP Specific\cell }\pard 
\nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \qc\keepn\nowidctlpar\widctlpar\intbl\adjustright {1Ch\cell WORD\cell 0000h\cell }\pard \keepn\nowidctlpar\widctlpar\intbl\adjustright {Reserved\cell PnP Specific\cell }\pard 
\nowidctlpar\widctlpar\intbl\adjustright {\row }\trowd \trgaph108\trleft-108\trkeep \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx960\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl
\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx2196\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx3300\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl
\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx7848\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx9720\pard 
\qc\keepn\nowidctlpar\widctlpar\intbl\adjustright {1Eh\cell WORD\cell Varies\cell }\pard \keepn\nowidctlpar\widctlpar\intbl\adjustright {Static Resource Information Vector- Real/Protected mode (0000h if none)\cell PnP Specific\cell }\pard 
\nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \nowidctlpar\widctlpar\adjustright {
\par }{\b Signature}{ - All Expansion Headers will contain a unique expansion header identifier.  The Plug and Play expansion header's identifier is the ASCII string "$PnP" or hex 24 50 6E 50h (Byte 0 = 24h ... Byte 3 = 50h).
\par }{\b Structure Revision}{ - This is an ordinal value that indicates the revision number of this structure only and does not imply a level of compliance with the Plug and Play BIOS version.
\par }{\b Length}{ - Length of the entire Expansion Header expressed in sixteen byte blocks.  The length count starts at the Signature field.
\par }{\b Offset of Next Header}{ - This location contains a link to the next 
expansion ROM header in this Option ROM.  If there are no other expansion ROM headers, then this field will have a value of 0h.  The offset specified in this field is the offset from the start of the option ROM header.
\par }{\b Reserved }{- Reserved for Expansion
\par }{\b Checksum}{
 - Each Expansion Header is checksummed individually.  This allows the software which wishes to make use of an expansion header (in this case, the system BIOS) the ability to determine if the expansion header is valid.  The method for validating the
 checksum is to add up all byte values in the Expansion Header, including the }{\i Checksum}{ field, into an 8-bit value.  A resulting sum of zero indicates a valid checksum operation.
\par }{\b Device Identifier}{ - This field contains the Plug and Play Device ID.
\par }{\b Pointer to Manufacturer String (Optional) - }{
This location contains an offset relative to the base of the Option ROM which points to an ASCIIZ representation of the board manufacturer's name.  This field is optional and if the pointer is 0 (Null) then the Manufacturer String is not supported.
\par }{\b Pointer to Product Name String (Optional) - }{
This location contains an offset relative to the base of the Option ROM which points to an ASCIIZ representation of the product name.  This field is optional and if the pointer is 0 (Null) then the Product Name String is not supported.
\par }{\b Device Type Code}{ - This field contains general device type information that will assist the System BIOS in prioritizing the boot devices.
\par The Device Type code is broken down into three byte fields.  
The byte fields consist of a Base-Type code that indicates the general device type.  The second byte is the device Sub-Type and its definition is dependent upon the Base-Type code.  The third byte defines the specific device programming interface, IF.-Typ
e, based on the Base-Type and Sub-Type.
\par Refer to Appendix B for a description of Device Type Codes.
\par }{\b Device Indicators}{ - This field contains indicator bits that identify the device as being capable of being one of the three identified boot devices: Input, Output, or Initial Program Load (IPL).
\par }\trowd \trgaph108\trleft-108\trkeep \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw30 \clbrdrr\brdrs\brdrw15 \clshdng2500\cltxlrtb \cellx888\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw30 
\clbrdrr\brdrs\brdrw15 \clshdng2500\cltxlrtb \cellx8352\pard \keepn\nowidctlpar\widctlpar\intbl\adjustright {\b Bit\cell }\pard \keepn\nowidctlpar\widctlpar\intbl\adjustright {\b Description\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\b \row 
}\trowd \trgaph108\trleft-108\trkeep \clvertalt\clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx888\clvertalt\clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx8352\pard 
\nowidctlpar\widctlpar\intbl\adjustright {7\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {A 1 indicates that this ROM supports the Device Driver Initialization Model\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\trowd 
\trgaph108\trleft-108\trkeep \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx888\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 
\cltxlrtb \cellx8352\pard \keepn\nowidctlpar\widctlpar\intbl\adjustright {6\cell A 1 indicates that this ROM may be Shadowed in RAM\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \keepn\nowidctlpar\widctlpar\intbl\adjustright {5\cell 
A 1 indicates that this ROM is Read Cacheable\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \keepn\nowidctlpar\widctlpar\intbl\adjustright {4\cell 
A 1 indicates that this option ROM is only required if this device is selected as a boot device.\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \keepn\nowidctlpar\widctlpar\intbl\adjustright {3\cell Reserved (0)\cell }\pard 
\nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \keepn\nowidctlpar\widctlpar\intbl\adjustright {2\cell A 1 in this position indicates that this device is an Initial Program Load (IPL) device.\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {
\row }\pard \keepn\nowidctlpar\widctlpar\intbl\adjustright {1\cell A 1 in this position indicates that this device is an Input device.\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\trowd \trgaph108\trleft-108\trkeep \clvertalt\clbrdrt
\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx888\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx8352\pard 
\keepn\nowidctlpar\widctlpar\intbl\adjustright {0\cell A 1 in this position indicates that this device is a Display device.\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \nowidctlpar\widctlpar\adjustright {
\par }{\v Change Boot connection vector to Interrupt connection vector (all SCSI guys called)
\par }\pard \nowidctlpar\widctlpar\adjustright {\b Boot Connection Vector}{
 (Real/Protected mode) - This location contains an offset from the start of the option ROM header to a routine that will cause the Option ROM to hook one or more of the primary input, primary display, or Initial Program Load (IPL) device vectors (INT 9h, 
INT 10h, or INT 13h), depending upon the parameters passed during the call.
\par }\pard \keepn\nowidctlpar\widctlpar\adjustright {
When the system BIOS has determined that the device controlled by this Option ROM will be one of the boot devices (the Primary Input, Primary Display, or IPL device), the System ROM will execute a FAR CALL to the location pointed to by the Boot Connection
 Vector.   The system ROM will pass the following parameters to the options ROM's  Boot Connection Vector:
\par \page 
\par }\trowd \trgaph108\trleft-108\trkeep \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2500\cltxlrtb \cellx1800\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 
\clbrdrr\brdrs\brdrw15 \clshdng2500\cltxlrtb \cellx8340\pard \nowidctlpar\widctlpar\intbl\adjustright {\b Reg On Entry\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\b Description\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\trowd 
\trgaph108\trleft-108\trkeep \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx1800\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 
\cltxlrtb \cellx8340\pard \nowidctlpar\widctlpar\intbl\adjustright {AX\cell Provides an indication as to which vectors should be hooked by specifying the type of boot device this device has been selected as.
\par Bit 7..3    Reserved(0)
\par Bit 2         1=Connect as IPL (INT 13h)
\par Bit 1         1=Connect as primary Video (INT 10h)
\par Bit 0         1=Connect as primary Input (INT 09h)\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \nowidctlpar\widctlpar\intbl\adjustright {ES:DI\cell Pointer to System BIOS PnP Installation Check Structure (See section 4.4)\cell 
}\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \nowidctlpar\widctlpar\intbl\adjustright {BX\cell CSN for this card, ISA PnP devices only.  If not an ISA PnP device then this parameter will be set to FFFFh.\cell }\pard 
\nowidctlpar\widctlpar\intbl\adjustright {\row }\trowd \trgaph108\trleft-108\trkeep \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx1800\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl
\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx8340\pard \nowidctlpar\widctlpar\intbl\adjustright {DX\cell Read Data Port, (ISA PnP devices only.  If no ISA PnP devices then this parameter will be set to FFFFh.\cell }\pard 
\nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \nowidctlpar\widctlpar\adjustright {
\par }{\b Disconnect Vector}{ (Real/Protected mode) - This vector is used to perform a cleanup from an unsuccessful boot attempt on an IPL device.  The system ROM will execute a FAR CALL to this location on IPL failure.
\par }{\b Bootstrap Entry Vector}{
 (Real/Protected mode) - This vector is used primarily for RPL (Remote Program Load) support.  To RPL (bootstrap), the System ROM will execute a FAR CALL to this location.  The System ROM will call the Real/Protected Mode Bootstrap Entry Vector instead 
of INT 19h if:
\par \tab a)  The device indicates that it may function as an IPL device,
\par \tab b)  The device indicates that it does not support the  INT 13h Block Mode interface,
\par \tab c)  The device has a non-null Bootstrap Entry Vector,
\par \tab d)  The Real/Protected Mode Boot Connection Vector is null.
\par 
\par The method for supporting RPL is beyond the scope of this specification.  A separate specification should define the explicit requirements for supporting RPL devices.}{\b 
\par }\pard \nowidctlpar\widctlpar\adjustright {\b Reserved }{- Reserved for Expansion
\par }\pard \nowidctlpar\widctlpar\adjustright {
\par }{\b Static Resource Information Vector}{
 - This vector may be used by non-Plug and Play devices to report static resource configuration information.  Plug and Play devices should not support the Static Resource Information Vector for reporting their configuration information.  This vector shoul
d be callable both before and/or after the option ROM has been initialized.  The call interface for the Static Resource Information Vector is as follows:
\par }\pard \fi-1440\li1440\nowidctlpar\widctlpar\adjustright {Entry:  ES:DI\tab Pointer to memory buffer to hold the device's static resource configuration information.  The buffer should be a minimum of 1024 bytes.  This information should 
follow the System Device Node data structure, except that the }{\i Device node number }{field should always be set to 0, and the information returned should only specify the currently allocated resources }{\i (Allocated resource c
onfiguration descriptor block)}{ and not the block of possible resources }{\i (Possible resource configuration descriptor block)}{.  The }{\i Possible resource configuration descriptor block }{should only contain the }{\i END_TAG }{
resource descriptor to indicate that there are no alternative resource configuration settings for this device because the resource configuration for this device is static.  Refer to the }{\i Plug and Play ISA Specification}{ under the section labeled }{
\i Plug and Play Resources }{for more information about the resource descriptors.  This data structure has the following format:
\par }\pard \nowidctlpar\widctlpar\adjustright {\page 
\par }\trowd \trgaph108\trleft1548\trkeep \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx5868\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 
\clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx7548\pard\plain \s87\qc\fi-360\li360\nowidctlpar\widctlpar\intbl\adjustright \b\fs20\lang1024\cgrid {Field\cell Size\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {\b 
\row }\trowd \trgaph108\trleft1548\trkeep \clvertalt\clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx5868\clvertalt\clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx7548\pard\plain 
\s86\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {Size of the device node\cell }\pard \s86\nowidctlpar\widctlpar\intbl\adjustright {WORD\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {\row }\trowd 
\trgaph108\trleft1548\trkeep \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx5868\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 
\cltxlrtb \cellx7548\pard\plain \s86\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {Device node number/handle\cell BYTE\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {\row }\pard\plain 
\s86\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {Device product identifier\cell DWORD\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {\row }\pard\plain \s86\nowidctlpar\widctlpar\intbl\adjustright 
\fs20\lang1024\cgrid {Device type code\cell 3 BYTES\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {\row }\pard\plain \s86\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {Device node attribute bit-field\cell 
WORD\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {\row }\pard\plain \s86\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {Allocated resource configuration descriptor block\cell VARIABLE\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {\row }\pard\plain \s86\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {Possible resource configuration descriptor block - should only specify the }{\i END_TAG }{
resource descriptor\cell 2 BYTES \cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {\row }\trowd \trgaph108\trleft1548\trkeep \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr
\brdrs\brdrw15 \cltxlrtb \cellx5868\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx7548\pard\plain \s86\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {
Compatible device identifiers\cell VARIABLE\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {\row }\pard \nowidctlpar\widctlpar\adjustright {
\par Refer to section 4.2 for a complete description of the elements that make up the System Device Node data structure.
\par For example, an existing, non-Plug and Play SCSI card vendor could choose to rev the SCSI boa
rd's Option ROM to support the Plug and Play Expansion Header.  While this card wouldn't gain any of the configuration benefits provided to full hardware Plug and Play cards, it would allow Plug and Play software to determine the devices configuration and
 thus ensure that Plug and Play cards will map around the static SCSI board's allocated resources.
\par }\pard\plain \s2\sb240\sa240\sl240\slmult0\keep\keepn\nowidctlpar\widctlpar\tx1440\outlinelevel1\adjustright \b\f38\fs28\cgrid {\f0 3.3 Option ROM Initialization
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\lang1024\cgrid {The System BIOS will determine if the Option ROM it is about to initialize supports the Plug and Play interface by verifying t
he Structure Revision number in the device's Plug and Play Header Structure.  For all Option ROMs compliant with the 1.0 Plug and Play BIOS Specification, the System BIOS will call the device's initialization vector with the following parameters:
\par }\trowd \trgaph108\trleft-108\trkeep \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2500\cltxlrtb \cellx1800\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 
\clbrdrr\brdrs\brdrw15 \clshdng2500\cltxlrtb \cellx8340\pard \nowidctlpar\widctlpar\intbl\adjustright {\b Reg On Entry\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\b Description\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\trowd 
\trgaph108\trleft-108\trkeep \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx1800\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 
\cltxlrtb \cellx8340\pard \nowidctlpar\widctlpar\intbl\adjustright {ES:DI\cell Pointer to System BIOS PnP Installation Check Structure (See section 4.4)\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard 
\nowidctlpar\widctlpar\intbl\adjustright {BX\cell CSN for this card, ISA PnP devices only.  If not an ISA PnP device then this parameter will be set to FFFFh.\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\trowd \trgaph108\trleft-108\trkeep 
\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx1800\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx8340\pard 
\nowidctlpar\widctlpar\intbl\adjustright {DX\cell Read Data Port, (ISA PnP devices only.  If no ISA PnP devices then this parameter will be set to FFFFh.\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard 
\keepn\nowidctlpar\widctlpar\adjustright {
\par For other bus architectures refer to the appropriate specification for register parameters on entry.
\par During initialization, a Plug and Play Option ROM may hook any vectors and update any data structures required for it to access any attached devices and perform the necessary identifications and initializations.  However, upon exit from the initialization
 call, the Option ROM must restore the state of any vectors or data structures related to boot devices (INT 9h, INT 10h, INT 13h, and associated BIOS Data Area [BDA] and Extended BIOS Data Area [EBDA] variables).
\par \page Upon exit from the initialization call, Plug and Play Option ROMs should return some boot device status information in the following format:
\par Return Status from Initialization Call:
\par }\trowd \trgaph108\trleft-108\trkeep \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2500\cltxlrtb \cellx960\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 
\clbrdrr\brdrs\brdrw15 \clshdng2500\cltxlrtb \cellx8352\pard \keepn\nowidctlpar\widctlpar\intbl\adjustright {\b AX Bit\cell }\pard \keepn\nowidctlpar\widctlpar\intbl\adjustright {\b Description\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\b 
\row }\trowd \trgaph108\trleft-108\trkeep \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx960\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr
\brdrs\brdrw15 \cltxlrtb \cellx8352\pard \nowidctlpar\widctlpar\intbl\adjustright {8\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {1 = IPL Device supports INT 13h Block Device format\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row 
}\pard \nowidctlpar\widctlpar\intbl\adjustright {7\cell 1 = Output Device supports INT 10h Character Output\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \nowidctlpar\widctlpar\intbl\adjustright {6\cell 
1 = Input Device supports INT 9h Character Input\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \keepn\nowidctlpar\widctlpar\intbl\adjustright {5:4\cell 00 = No IPL device attached\line 
01 = Unknown whether or not an IPL device is attached\line 10 = IPL device attached\line         (RPL devices have a connection).\line 11 = Reserved\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard 
\keepn\nowidctlpar\widctlpar\intbl\adjustright {3:2\cell 00 = No Display device attached\line 01 = Unknown whether or not a Display device is attached\line 10 = Display device attached\line 11 = Reserved\cell }\pard 
\nowidctlpar\widctlpar\intbl\adjustright {\row }\trowd \trgaph108\trleft-108\trkeep \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx960\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl
\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx8352\pard \keepn\nowidctlpar\widctlpar\intbl\adjustright {1:0\cell 00 = No Input device attached\line 01 = Unknown whether or not an Input device is attached\line 
10 = Input device attached\line 11 = Reserved\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard\plain \s2\sb240\sa240\sl240\slmult0\keep\keepn\nowidctlpar\widctlpar\tx1440\outlinelevel1\adjustright \b\f38\fs28\cgrid {\f0 
3.4  Option ROM Initialization flow}{
\par }\pard\plain \fi-720\li720\nowidctlpar\widctlpar\adjustright \fs20\lang1024\cgrid {The following outlines the typical steps used to initialize Option ROMs during a Plug and Play system BIOS POST: 
\par }{\b\i Step 1}{\b \tab Initialize the boot device option ROMs.
\par }\pard \fi-720\li720\nowidctlpar\widctlpar\adjustright {\tab This includes the Primary Input, Primary Output, and Initial Program Load (IPL) device option ROMs.
\par }\pard \fi-720\li720\nowidctlpar\widctlpar\adjustright {\b\i Step 2}{\b \tab Initialize  ISA option ROMs by performing ISA ROM scan
\par }\pard \fi-720\li720\nowidctlpar\widctlpar\adjustright {\tab The ISA ROM scan should be performed from C0000h to EFFFFh on every 2k boundary.  Plug and Play option ROMs will not be included in the ROM scan.
\par }\pard \fi-720\li720\nowidctlpar\widctlpar\adjustright {\b\i Step 3}{\b \tab Initialize option ROMs for ISA devices which have a Plug and Play option ROM.
\par }\pard \fi-720\li720\nowidctlpar\widctlpar\adjustright {\b \tab }{Typically, these devices will not provide support for dynamic configurability.  However, the resources utilized by these devices can be obtained through the }{\i 
Static Resource Information Vector }{as described in section 3.2.
\par }\pard \fi-720\li720\nowidctlpar\widctlpar\adjustright {\b\i Step 4}{\b \tab Initialize option ROMs for Plug and Play cards which have a Plug and Play option ROM.
\par }\pard \fi-720\li720\nowidctlpar\widctlpar\adjustright {\b\i Step 5}{\b \tab Initialize option ROMs which support the Device Driver Initialization Model (DDIM).
\par \tab }{Option ROMs which follow this model make the most efficient use of space consumed by option ROMs.  Refer to Appendix B for more information on the DDIM.}{\b 
\par }\pard\plain \s2\sb240\sa240\sl240\slmult0\keep\keepn\nowidctlpar\widctlpar\tx1440\outlinelevel1\adjustright \b\f38\fs28\cgrid {\f0 3.5 ISA Option ROMs and Resource Mapping
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\lang1024\cgrid {
Given the fact that add-in cards are encouraged to make all of their resource assignments flexible, there arises an interesting issue for Option ROMs, in how does the Option ROM code "know" which resource values to use to communicate with the card?  There
 are several possible solutions to this problem, but the one selected for Plug and Play Option ROMs is as follows.
\par When the Plug and Play O
ption ROM is initialized, it will be passed the CSN and Read Data Port.  The Option ROM can use this information to determine which resources were assigned to it.  When the Option ROM has determined this, it should then setup its entry vectors based upon 
the resource assignment.  For example, if an add-in SCSI controller has two possible I/O Port assignments, 300h and 310h, then it should have two different entry vectors for INT 13h.  Depending upon which base I/O address is assigned, the Option ROM will 
setup the INT 13h vector to point to the proper entry vector.  Thereafter, whenever INT 13h is called, the Option ROM may make the assumption that the base I/O address is the one that goes with that entry point.
\par }\pard\plain \s2\sb240\sa240\sl240\slmult0\keep\keepn\nowidctlpar\widctlpar\tx1440\outlinelevel1\adjustright \b\f38\fs28\cgrid {\f0 3.6 Error Recovery: Returning to the Boot flow
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\lang1024\cgrid {
In the current boot model for standard PC compatible systems, once the system BIOS turns control over to the Initial Program Load (IPL) device's boot sector, there is no way for the boot sector to return control to the system BIOS in the event that an O
S loader is not present on the disk, or the IPL fails for some other reason.
\par }\pard \nowidctlpar\widctlpar\adjustright {
In the Plug and Play Boot model, an attempt is made to correct this.  If at any time after control has been turned over to the IPL device's boot sector either the boot sector or some other portion of the OS loader determines that the IPL device is incapab
le of supporting the boot process, control may be returned to the system BIOS (so that the system BIOS can attempt to boot off of a different IPL device) by issuing either an INT 
19h or an INT 18h.  The BIOS will intercept this INT vector and attempt to continue the bootstrap process.
\par }\pard\plain \s1\sb240\sa240\keep\keepn\nowidctlpar\widctlpar\tlul\tx8640\outlinelevel0\adjustright \b\f38\fs36\cgrid {\f0 \page 4.0  Configuration Support\tab 
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\lang1024\cgrid {
A Plug and Play system BIOS, in addition to providing a conflict free bootstrap process, also provides services to the operating system to assist with resource management during runtime.  These services focus on extending Plug and Play support to non-Plug
 and Play systemboard devices and dynamic event notification.
\par }\pard\plain \s2\sb240\sa240\sl240\slmult0\keep\keepn\nowidctlpar\widctlpar\tx1440\outlinelevel1\adjustright \b\f38\fs28\cgrid {\f0 4.1  System Device Configuration List}{\f0\ul 
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\lang1024\cgrid {The system device
 configuration list consists of nodes or data structures that identify the embedded devices that are on the system.  The embedded devices consist of systemboard components that provide the base functionality for the system.  This includes devices such as 
the Programmable Interrupt Controller (PIC), the DMA Controller, System Timer, Keyboard Controller, Integrated Video Controller, Floppy Controller, etc.  The system device configuration list only provides information about the systemboard devices and does
 n
ot include nodes for devices plugged into an expansion bus.  The system device configuration list does not identify the peripherals that are attached to the embedded systemboard devices.  For instance, the system configuration list will identify an integr
ated fixed disk controller but will not provide nodes for any fixed disk drives that might be attached to the controller.  It is assumed that peripherals will be identified by other software.  The system BIOS provides an interface for system software to a
cc
ess the information in the system configuration list through the BIOS functions that are defined later in this document.  The System Device Node data structure provides configuration information about a single systemboard device.  The information returned
 for each systemboard component reported through the Plug and Play BIOS interface will follow the data structure format specified for the System Device Node.  The next subsection describes the System Device Node data structure.
\par }\pard\plain \s2\sb240\sa240\sl240\slmult0\keep\keepn\nowidctlpar\widctlpar\tx1440\outlinelevel1\adjustright \b\f38\fs28\cgrid {\f0 4.2  System Device Node Definition}{\f0\ul 
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\lang1024\cgrid {
The System Device Node is the structure that represents a single embedded systemboard device.  The elements that make up this structure provide information that describe the device and the system resources that have been allocated to the device.  This inc
ludes reporting the system resources that have typically been reserved for standard PC compatible systemboard devices, such as I/O port addresses from 00h to FFh.  The information for alternative or possible resource configuration settings can be pr
ovided in the System Device Node; however, it is not required.  The various possible resource settings can also be provided in a configuration file or an image of the configuration file, in ROM, supplied by the system vendor.  This configuration file woul
d contain the necessary configuration information not contained in the System Device Node, and can provide more information to the user about the specific devices.  If the configuration information is contained in both the System Device Node and in a conf
ig
uration file, then the system resources possibilities for the device that are specified in the configuration file should take precedence over the information contained in the system device node.  The following data structure defines the required elements 
for the base System Device Node.  Please refer to the }{\i Plug and Play ISA Specification version 1.0A}{ (Section 4.6) for the maximum resources that a device node can use.
\par }\pard \nowidctlpar\widctlpar\adjustright {\page 
\par }\trowd \trgaph108\trleft1548\trkeep \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrdb\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx5868\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrdb\brdrw15 
\clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx7548\pard\plain \s87\qc\fi-360\li360\nowidctlpar\widctlpar\intbl\adjustright \b\fs20\lang1024\cgrid {Field\cell Size\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {\b 
\row }\trowd \trgaph108\trleft1548\trkeep \clvertalt\clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx5868\clvertalt\clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx7548\pard\plain 
\s86\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {Size of the device node\cell }\pard \s86\nowidctlpar\widctlpar\intbl\adjustright {WORD\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {\row }\trowd 
\trgaph108\trleft1548\trkeep \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx5868\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 
\cltxlrtb \cellx7548\pard\plain \s86\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {Device node number/handle\cell BYTE\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {\row }\pard\plain 
\s86\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {Device product identifier\cell DWORD\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {\row }\pard\plain \s86\nowidctlpar\widctlpar\intbl\adjustright 
\fs20\lang1024\cgrid {Device type code\cell 3 BYTES\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {\row }\pard\plain \s86\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {Device node attribute bit-field\cell 
WORD\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {\row }\pard\plain \s86\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {Allocated resource configuration descriptor block\cell VARIABLE\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {\row }\pard\plain \s86\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {Possible resource configuration descriptor block \cell VARIABLE\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {\row }\trowd \trgaph108\trleft1548\trkeep \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx5868\clvertalt\clbrdrt
\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx7548\pard\plain \s86\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {Compatible device identifiers\cell VARIABLE\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {\row }\pard \fi-360\li360\nowidctlpar\widctlpar\adjustright {\b\i 
\par }\pard \fi-360\li360\nowidctlpar\widctlpar\adjustright {\b\i Size of Device Node:
\par }{This field contains the size, in bytes, of the device node.
\par }\pard \fi-360\li360\nowidctlpar\widctlpar\adjustright {\b\i Device node number:}{
\par }\pard \nowidctlpar\widctlpar\adjustright {The node number, or handle, is a unique identifier value assigned to the node by the system BIOS and is used to access the node information through the BIOS interface.
\par }\pard \fi-360\li360\nowidctlpar\widctlpar\adjustright {\b\i Device product identifier:
\par }\pard \nowidctlpar\widctlpar\adjustright {
This field is an EISA ID, which is a seven character ASCII representation of the product identifier compressed into a 32-bit identifier.  The seven character ID consists of a three character manufacturer code, a three character hexadecimal product identif
ier, and a one character hexadecimal revision number.  For example, the third revision of the ABC device might have an uncompressed ID such as ABC1003.
\par }\pard \nowidctlpar\widctlpar\adjustright {The manufacturer code is a 3 uppercase character code that is compressed into 3 5-bit values as follows:
\par 1.  Find hex ASCII value for each letter
\par 2.  Subtract 40h from each ASCII value
\par 3.  Retain 5 least-significant bits for each letter by discarding upper 3-bits because they are always 0.
\par 4.  Compressed code = Concatenate 0 and the 3 5-bit values for the character.
\par The format of the compressed product identifier is as follows:
\par }\trowd \trgaph108\trleft516\trkeep \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2500\cltxlrtb \cellx1260\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 
\clbrdrr\brdrs\brdrw15 \clshdng2500\cltxlrtb \cellx8436\pard\plain \s87\qc\fi-360\li360\nowidctlpar\widctlpar\intbl\adjustright \b\fs20\lang1024\cgrid {Byte\cell Description\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {
\row }\trowd \trgaph108\trleft516\trkeep \clvertalt\clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx1260\clvertalt\clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx8436\pard\plain 
\s86\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {0\cell Bit 7:        Reserved (0)
\par Bits 6-2:  1st character of the compressed manufacturer code
\par Bits 1-0:  Upper 2 bits of the 2nd character of the compressed manufacturer code\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {\row }\trowd \trgaph108\trleft516\trkeep \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl
\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx1260\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx8436\pard\plain 
\s86\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {1\cell Bits 7-5:  Lower 3 bits of the 2nd character of the compressed manufacturer code.  
\par Bits 4-0:  3rd character of the compressed manufacturer code.
\par                   (bit 4 is most significant)\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {\row }\pard\plain \s86\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {2\cell 
Bits 7-4:  1st hexadecimal digit of the product number.  (bit 7 is most significant)
\par Bits 3-0:  2nd hexadecimal digit of the product number. (bit 3 is most significant)\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {\row }\trowd \trgaph108\trleft516\trkeep \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl
\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx1260\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx8436\pard\plain 
\s86\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {3\cell Bits 7-4:  3rd hexadecimal digit of the product number (bit 7 is most significant)
\par Bits 3-0:  Hexadecimal digit for the revision number.  (bit 3 is most significant)\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {\row }\pard \fi-360\li360\nowidctlpar\widctlpar\adjustright {
\par }\pard \nowidctlpar\widctlpar\adjustright {Refer to the }{\i Device Identifier Reference Table & Device Type Code Table }{
for a list of product identifiers.  This list includes generic Plug and Play device identifiers for the standard systemboard components.  See the References section of this document.
\par }{\b\i Device type code:}{\i 
\par }\pard \nowidctlpar\widctlpar\adjustright {This field is used to specify the type or characteristics of the node in the configuration list.  There are many di
fferent kinds of controllers and devices and through the type field you can identify which kind of component this node represents.
\par }\pard \nowidctlpar\widctlpar\adjustright {
The Device Type code is broken down into three byte fields.  The first byte in the Device Type Code consists of a Base Type code which indicates the general device type.  The second byte is the device Sub-Type and its definition is dependent upon the Base
 Type code.  The third byte defines the specific device programming interface, IF. Type, based on the Base Class and Sub-Class.
\par Refer to the }{\i Device Identifier Reference Table & Device Type Code Table}{\b\i  }{for a description of Device Type Codes.
\par }\pard \fi-360\li360\nowidctlpar\widctlpar\adjustright {\b\i Device node attribute bit-field:
\par }\pard \nowidctlpar\widctlpar\adjustright {The device node attributes provide additional information about the state of the device and the capabilities of the device.  This bit-field is defined as follows:
\par }\pard \fi-360\li360\nowidctlpar\widctlpar\adjustright {{\*\bkmkstart i5}{\*\bkmkend i5}\tab \tab bit 15-9:\tab reserved (0)\line \tab bits 8:7\tab 0:0=device can only be configured for next boot (static)\line \tab \tab 
0:1=device can be configured at runtime (dynamically)
\par \tab \tab \tab 1:0=Reserved\line \tab \tab 1:1=device can only be configured at runtime (dynamically)\line \tab bit 6:\tab 0=device is not a removable system device\line \tab \tab 1=device is a removable system device\line \tab bit 5:\tab 
0=device is not a docking station device\line \tab \tab 1=device is a docking station device\line \tab bit 4:\tab 0=device is not capable of being primary Initial Program Load (IPL) device\line \tab \tab 1=device is capable of being primary IPL device
\line \tab bit 3:\tab 0=device is not capable of being primary input device\line \tab \tab 1=device is capable of being primary input device\line \tab bit 2:\tab 0=device is not capable of being primary output device\line \tab \tab 
1=device is capable of being primary output device\line \tab bit 1:\tab 0=device is configurable\line \tab \tab 1=device is not configurable\line \tab bit 0:\tab 0=device can be disabled\line \tab \tab 1=device cannot be disabled\line 
\par }\pard \nowidctlpar\widctlpar\adjustright {Bit 0 specifies whether the device can be disabled or not.  If the device is disabled, it is assumed that the system resources that the device was using are available for use by other devices.
\par Bit 1 indicates that the device is configurable.  This implies that the system device node provides the resource requirements for the device in the }{\i Possible resource configuration descriptor block}{
.  If the device node does not specify the resource requirements or the device does not have any alternate system resource requirements, bit 1 must be set to indicate that the device is not configurable.
\par }\pard \fi-360\li360\nowidctlpar\widctlpar\adjustright { Bits 2-4 identify the capability of the device being designated as a boot device.
\par Bit 5 indicates that the device resides on a docking station or convenience base.
\par }\pard \nowidctlpar\widctlpar\adjustright {Bit 6 indicates that the device node represents a device that is removable on the base system unit, such as a removable floppy drive.
\par {\*\bkmkstart i6}{\*\bkmkend i6}
\par Bits 8:7 use three of the four possible states to indicate if the device node can be configured dynamically, configured statically only for next boot or configured dynamically only.  The fourth state is reserved.
\par }\pard \fi-360\li360\nowidctlpar\widctlpar\adjustright {\b\i Allocated resource configuration descriptor block:
\par }\pard \nowidctlpar\widctlpar\adjustright {The allocated resource descriptor block describes the system resources allocated to this device.  The format of the data contained in this block follows the format defined in the }{\i Plug 
and Play ISA Specification}{ under the section labeled }{\i Plug and Play Resources}{
.  The resource data is provided as a series of  data structures with each of the resource data structures having a unique tag or identifier.  These are the resource descriptors which specifically describe the standard PC system resources, such as Memory,
 I/O addresses, IRQs, and DMA channels.}{\i 
\par }\pard \fi-360\li360\nowidctlpar\widctlpar\adjustright {\b\i Possible resource configuration descriptor block:
\par }\pard \nowidctlpar\widctlpar\adjustright {The alternative resource selections that a particular device can support can be obtained 
from the data contained in this block.  The format of the data in this block follows the same format as the allocated resource descriptor block.  Refer to the }{\i Plug and Play ISA Specification }{under the section labeled }{\i Plug and Play Resources}{
 for a description of the data structures that make up the resource descriptor blocks.  These are the resource descriptors which specifically describe the standard PC system resources, such as Memory, I/O addresses, IRQs, and DMA channels.}{\i 
\par }{The information in this block c
an be used by the system BIOS and/or system software for selecting a conflict free resource allocation for this device without user intervention.  The data in this block is optional.  If this information is not provided in this structure, it can optionall
y be provided in a configuration file for the systemboard that defines the configuration information for the embedded devices.  If the possible resource configurations are not specified in either place the device is assumed to be a static device, which me
an
s it is not configurable.  If the information is provided in this descriptor block and in a configuration file, the possible resource selections must be specified in the same order that they are described in the configuration file.  If the node does not c
ontain the alternative resource selections then the first byte in this block will contain the }{\i End Tag descriptor}{, which is described in }{\i Plug and Play ISA Specification}{,  to indicate that there are no resources in this block.
\par }\pard \fi-360\li360\nowidctlpar\widctlpar\adjustright {\b\i Compatible device identifiers:}{
\par }\pard \nowidctlpar\widctlpar\adjustright {
The compatible device identifiers block specifies the IDs of other devices that this device is compatible with.  System software can use this information to load compatible device drivers if necessary.  The format of the data contained in this block follo
ws the format defined in the }{\i Plug and Play ISA Specification}{ under the section labeled }{\i Plug and Play Resources - Compatible Device ID}{.
\par }\pard\plain \s2\sb240\sa240\sl240\slmult0\keep\keepn\nowidctlpar\widctlpar\tx1440\outlinelevel1\adjustright \b\f38\fs28\cgrid {\f0 4.3  Plug and Play BIOS Functions}{\f0\ul 
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\lang1024\cgrid {The following subsections describe the Plug and Play BIOS interface.  The function return values are listed in Appendix C.  }{\b 
The Plug and Play BIOS functions will preserve all FLAGS and registers except for the AX register, which will contain the return code.}{
    The BIOS functions will use the caller's stack and a minimum of 1024 bytes of stack space must be available to these functions.  }{\b 
It is important to note that system BIOS function(s) used to set the configuration of a systemboard device will not validate the configuration information passed by the caller and may not return an error code.}{
\par }\pard \nowidctlpar\widctlpar\adjustright {Option ROM initialization routines can not depend on any of the Plug and Play runtime functions to be available until after INT19 has been invoked at the end of the POST process.
\par 
\par }\pard\plain \s2\sb240\sa240\sl240\slmult0\keep\keepn\nowidctlpar\widctlpar\tx1440\outlinelevel1\adjustright \b\f38\fs28\cgrid {\f0 4.4  Plug and Play Installation Check}{\f0\ul 
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\lang1024\cgrid {
This section describes the method for system software to determine if the system has a Plug and Play BIOS.  This Plug and Play installation check indicates whether the system BIOS support for accessing the configuration information about the devices on th
e systemboard is present and th
e entry point to these BIOS functions.  This method involves searching for a signature of the ASCII string $PnP in system memory starting from F0000h to FFFFFh at every 16 byte boundary.  This signature indicates the system may have aPlug and Play BIOS an
d identifies the start of a structure that specifies the entry point of the BIOS code which implements the support described in this document.  The system software can determine if the structure is valid by performing a }{\b Checksum}{ operation.  
\par }\pard \nowidctlpar\widctlpar\adjustright {The method for calculating the checksum is to add up }{\i Length }{bytes from the top of the structure, including the }{\i Checksum}{
 field, into an 8-bit value.  A resulting sum of zero indicates a valid checksum operation.
\par The entry points specified in this structure are the software interface to the BIOS functions.  The structure element that specifies the 16-bit protected mode entry point will allow the caller to construct a protected mode selector for calling this suppor
t.  The structure of the Plug and Play BIOS Support Installation Check is as follows: 
\par }\trowd \trgaph108\trleft300\trkeep \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrdb\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2500\cltxlrtb \cellx4542\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrdb\brdrw15 
\clbrdrr\brdrs\brdrw15 \clshdng2500\cltxlrtb \cellx5586\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrdb\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2500\cltxlrtb \cellx6870\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb
\brdrdb\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2500\cltxlrtb \cellx8424\pard\plain \s87\qc\fi-360\li360\nowidctlpar\widctlpar\intbl\adjustright \b\fs20\lang1024\cgrid {Field\cell Offset\cell Length\cell Value\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {\row }\trowd \trgaph108\trleft300\trkeep \clvertalt\clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx4542\clvertalt\clbrdrl\brdrs\brdrw15 \clbrdrb
\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx5586\clvertalt\clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx6870\clvertalt\clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb 
\cellx8424\pard\plain \s86\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {Signature\cell 00h\cell 4 BYTES\cell $PnP (ASCII)\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {\row }\trowd 
\trgaph108\trleft300\trkeep \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx4542\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 
\cltxlrtb \cellx5586\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx6870\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb 
\cellx8424\pard\plain \s86\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {Version\cell 04h\cell BYTE\cell 10h\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {\row }\pard\plain 
\s86\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {Length\cell 05h\cell BYTE\cell 21h\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {\row }\pard\plain \s86\nowidctlpar\widctlpar\intbl\adjustright 
\fs20\lang1024\cgrid {Control field\cell 06h\cell WORD\cell Varies\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {\row }\pard\plain \s86\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {Checksum\cell 08h
\cell BYTE\cell Varies\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {\row }\pard\plain \s86\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {Event notification flag address\cell 09h\cell DWORD\cell Varies
\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {\row }\pard\plain \s86\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {Real Mode 16-bit offset to entry point\cell 0Dh\cell WORD\cell Varies\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {\row }\pard\plain \s86\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {Real Mode 16-bit code segment address\cell 0Fh\cell WORD\cell Varies\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {\row }\pard\plain \s86\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {16-Bit Protected Mode offset to entry point\cell 11h\cell WORD\cell Varies\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {\row }\pard\plain \s86\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {16-Bit Protected Mode code segment base address\cell 13h\cell DWORD\cell Varies\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {\row }\pard\plain \s86\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {OEM Device Identifier\cell 17h\cell DWORD\cell Varies\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {\row }\pard\plain \s86\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {Real Mode 16-bit data segment address\cell 1Bh\cell WORD\cell Varies\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {\row }\trowd \trgaph108\trleft300\trkeep \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx4542\clvertalt\clbrdrt
\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx5586\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx6870\clvertalt\clbrdrt
\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx8424\pard\plain \s86\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {16-Bit Protected Mode data segment base address\cell 1Dh\cell DWORD
\cell Varies\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {\row }\pard \nowidctlpar\widctlpar\adjustright {
\par }{\b Signature }{is represented as the ASCII string "$PnP", where byte 0='$' (24h), byte 1='P' (50h),byte 2='n' (6Eh), and byte 3='P' (50h).
\par }{\b Version}{ - This is a BCD value that implies a level of compliance with major (high nibble) and minor (low nibble) version changes of the Plug and Play BIOS specification.  For example, the BCD value 10h would be interpreted as version 1.0.
\par }{\b Length}{ - Length of the entire Installation Structure expressed in bytes.  The length count starts at the Signature field.
\par The }{\b Control field}{ is a bit-field that provides system capabilities information.
\par }\pard\plain \s86\nowidctlpar\widctlpar\adjustright \fs20\lang1024\cgrid {\tab \tab bits 15:2: Reserved (0)\line \tab \tab bits 1:0:\tab Event notification mechanism\line \tab \tab \tab 00=Event notification is not supported\line \tab \tab \tab 
01=Event notification is handled through polling\line \tab \tab \tab 10=Event notification is asynchronous (at interrupt time)
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\lang1024\cgrid {\b 
\par }\pard \nowidctlpar\widctlpar\adjustright {\b Checksum}{ - The method for calculating the checksum is to add up the number of bytes in the Installation Structure, including the }{\i Checksum}{
 field, into an 8-bit value.  A resulting sum of zero indicates a valid checksum.
\par The }{\b Event notification flag address}{ specifies the physical address of the }{\i Event Flag }{if event notification is handled through polling.  When event notification is handled through polling, bit 0 of the }{\i Event Flag }{
will be set when a system event occurs.  System software will monitor or poll the }{\i Event Flag}{ for notification of an event.
\par If events are handled through asynchronous notification, the system BIOS will specify a system device node which can be obtained from the }{\i Get Node}{
 runtime function.  The system device node for asynchronous event management will be identified through the device identifier field in the device node data structure and will specify the IRQ number and an I/O port address.  This event system device node c
an be defined in one of two ways.  First, the device node can follow the generic impl
ementation in which the device identifier is PNP0C03, and the interrupt number and I/O address assigned are system specific.  The only requirement with the generic implementation is that the I/O address bit used for detecting the source of the interrupt a
nd clearing the interrupt line is bit 0.  If bit 0 of this I/O address is set to 1, then the interrupt was generated due to a system event.  The interrupt service routine should reset the interrupt line by clearing bit 0 at the specified I/O address.  All
 o
ther bits read from the I/O address should not be modified.  The second way the event system device node can be defined is implementation specific where the system vendor must supply their own device identifier and whatever resources are required for serv
icing the event interrupt.  This method will require a specific device driver associated with the device node identifier to support the event notification interface.
\par System software should check the }{\b\i Control field}{ to determine the event notification method implemented on the system.
\par Refer to the }{\b Event Notification Interface}{ section for more information on events.
\par The }{\b Real Mode 16-Bit interface}{ is basically the segment:offset of the entry point.
\par The }{\b 16-Bit Protected Mode interface}{
 specifies the code segment base address so that the caller can construct the descriptor from this segment base address before calling this support from protected mode.  The offset value is the offset of the entry point.  It is assumed that the 16-Bit Pro
tected Mode interface is sufficient for 32-Bit Protected Mode callers.
\par The caller must also construct data descriptors for the functions that return information in the function arguments that are pointers.  The only limitation is that the pointer offset can only point to the first 64K bytes of a segment.
\par If a call is made to these BIOS functions from 32-bit Protected Mode, the 32-bit stack will be used for passing any stack arguments to the Plug and Play BIOS functions.  However, it is important to note that the Plug and Play BIOS 
functions are not implemented as a full 32-bit protected mode interface and will access arguments on the stack as a 16-bit stack frame.  Therefore, the caller must ensure that the function arguments are pushed onto the stack as 16-bit values and not 32-bi
t values.  The stack parameter passing is illustrated in }{\i Figure 4.4.1}{ below.
\par }\pard \qc\nowidctlpar\widctlpar\adjustright {\*\bkmkstart i7}{\*\bkmkend i7}{\pard\plain \qc\nowidctlpar\widctlpar\adjustright \fs20\lang1024\cgrid {\object\objemb\rsltmerge\objsetsize\objw2760\objh2910{\*\objclass PBrush}{\*\objdata 0105000002000000
07000000504272757368000000000000000000e08f0000
424da68f0000000000003604000028000000b8000000c20000000100080000000000708b0000c40e0000c40e000000000000000000000000000000008000008000000080800080000000800080008080000080808000c0c0c0000000ff0000ff000000ffff00ff000000ff00ff00ffff0000ffffff000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0000000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0000000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0000000f0f000f0f0f000000000f0f0f000000000f0f000000000f0000000f0000000f0f000000000f0f000000000f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f00000f0f0f00000f0f0f00000f0f0f000f0f00000f0f00000f0f00000f0f00
000f0f00000f0f00000f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0000000f0f0f00000f0f0f00000f0f0f0f0f0f00000f0f00000f0f00000f0f00000f0f00000f0f00000f0f0f0f0f0000000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f00000f000f0f00000f0f0f0000000000000f0f00000f0f00000f0f00000f0f00000f0f00000f0f00000f
0f0f0f0f0000000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f00000f000f0f00000f0f0f00000f0f00000f0f00000f0f00000f0f00000f0f00000f0f00000f0f00000f0f0f0f00000f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f00000f0f000f0f00000f0f0f00000f0f00000f0f0000000f00000f0f00000f0f00000f0f00000f0f0000000f000f00000f0f000f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f000f00000f0f0f000f00000f0f0f0f000000000f0f0000000f00000f0000000f0f0f0f000000000f0f0000000f00000000000f0000000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f00000f0f0f000f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0000000f0f0f0f
0f0000000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000000000f0f0f0f0f000000000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
000000000000000f0f0f0f000000000f0f0f0f00000f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f00000f0f00000f0f00000f0f0f00000f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f000f0f
00000f0f00000f0f0f00000f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f000f0f00000f0f00000f0f00000f0000000f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f00000f0f00000f0f0000
0f0000000f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f00000f0f00000f0f00000f0f000f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f000000000f0f0000000f0000000f00000f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000000000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0000
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0000
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f000000000f0f0f000f0000000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f000f0f00000f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f000f0f00000f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f
0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0000000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0000000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f00000f
0f0f0f0f0f0f0000000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f000f0f00000f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f00000f0f00000f0f
00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0000000f000f0f0f0000000f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000000000000000f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f00000000000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f00000f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f00000f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f00000f0f00000f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000000000000000000000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0000
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0000
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000000000f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000000000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f000f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000000000000000f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000000000000000f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f000000000f0f0000000000000000000f0f0f0000000000000f0000000000000f0f0f0f0f0f0f000f0f0f0f0f0f0f0f000000000f0f0000000000000000000f0f0f0000000000
000f0f0000000000000f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f000f0f0f0f0f0f00000f0f
00000f0f0f0f000f0f0f0f0f0f0f00000000000f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f000f0f0f0f0f0f00000f0f00000f0f0f0f000f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f000f0f0f0f00000f0f0f00000f0f0f0f0f000000000f0f0f0f000f0f0f000f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f000f0f0f0f00000f0f0f00000f0f0f0f0f000000000f0f0f0f0f00000f0f0f
0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f000000000000000f0f0f00000f0f0f0f00000f0f
00000f0f0f0f000f0f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f000000000000000f0f0f00000f0f0f0f00000f0f00000f0f0f0f00000f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f000f0f00000f0f0f0f00000f0f0f0f00000f0f00000f0f0f0f0f000f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f000f0f00000f0f0f0f00000f0f0f0f00000f0f00000f0f0f0f00000f0f0f0f0f0f0f0f0f00000f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f000f0f00000f0f0f0f0000000f000f00000f0f00000f0f0f0f0f000f0f
0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f000f0f00000f0f0f0f0000000f000f00000f0f00000f0f0f0f00000f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f000f00000f0f0f0f0000000f00000f0f0000000000000f0f0f0f00000f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f000f00000f0f0f0f0000000f00000f0f0000000000000f0f0f00000f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0000000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f00000f0f0f0f0f0f0f000f0f0f
0f0f0f0f0f0f0f0f0f0000000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000000000f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0000000f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f
000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000000000f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000000000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f00000000000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000000000000000f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000000000000000f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f000000000f0f0000000000000000000f0f
0f0000000000000f0f0f0f0f00000f0f0f0f0f0f0f0f000f0f0f0f0f0f0f000000000f0f0000000000000000000f0f0f0000000000000f00000000000f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f000f0f0f0f0f0f00000f0f00000f0f0f0f000f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f000f0f0f0f0f0f00000f0f00000f0f0f0f000f0f0f0f0f0f00000f0f0f000f0f0f0f0f0f0f
0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f000f0f0f0f00000f0f0f00000f0f0f0f0f000000000f0f0000
00000000000f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f000f0f0f0f00000f0f0f00000f0f0f0f0f000000000f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f000000000000000f0f0f00000f0f0f0f00000f0f00000f000000000000000f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f000000000000000f0f0f00000f0f0f0f00000f0f00000f0f0f0f0f0f00000f0f0f0f0f0f0f0f00000f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f000f0f00000f0f0f0f00000f0f0f0f00000f0f00000f000f0f0f00000f0f0f0f0f0f
0f0f000f0f0f0f0f0f0f0f0f0f000f0f00000f0f0f0f00000f0f0f0f00000f0f00000f0f0f0f0f0000000f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f000f0f00000f0f0f0f0000000f000f00000f0f00000f0f000f0f00000f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f000f0f00000f0f0f0f0000000f000f00000f0f00000f0f0f0000000f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f000f00000f0f0f0f0000000f00000f0f0000000000000f0f000f00000f0f0f0f0f0f0f0f000f0f0f0f0f0f0f
0f0f0f000f00000f0f0f0f0000000f00000f0f0000000000000f0f0f0f000f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f00000f0f0f0f0f0f0f0f0f0f0f0000000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0000000f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0000000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f00000f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000000000f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f
0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0000000f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0000000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0000000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0000000f0f000f0f0f000000000f0f0f000000000f0f000000000f0000000f0000000f0f000000000f0f000000000f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f00000f0f0f00000f0f0f00000f0f0f000f0f00000f0f00000f0f00000f0f00000f0f00
000f0f00000f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0000000f0f0f00000f0f0f00000f0f0f0f0f0f00000f0f00000f0f00000f0f00000f0f00000f0f00000f0f0f0f0f0000000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f00000f000f0f00000f0f0f0000000000000f0f00000f0f00000f0f00000f0f00000f0f00000f0f00000f0f0f0f0f
0000000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f000f0f00000f000f0f00000f0f0f00000f0f00000f0f00000f0f00000f0f00000f0f00000f0f00000f0f00000f0f0f0f00000f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f00000f0f000f0f00000f0f0f00000f0f00000f0f0000000f00000f0f00000f0f00000f0f00000f0f0000000f000f00000f0f000f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00
0f00000f0f0f000f00000f0f0f0f000000000f0f0000000f00000f0000000f0f0f0f000000000f0f0000000f00000000000f0000000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f00000f0f0f000f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0000000f0f0f0f0f000000
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000000000f0f0f0f0f000000000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000000000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000000000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000000000000000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f00000000000f0f0f0f0000000000000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000000
0f0f000000000f000000000f0000000000000f000000000f0000000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f000f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f00000f0f0f00000f0f000f0f0f0f0f0f0f00000f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f00000f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f00000f0f0f0000
0f0f0f000000000f0f0f00000f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f00000f0f0f00000f0f00000f0f00000f0f00000f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0000000f0f0f0f00000f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f00000f0f0f00000f0f00000f0f00000f0f
00000f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0000000f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000000000000000f0f0f00000f0f00000f0f00000f0f0000000f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f00000f0f0000000f0f0f0000000000000f00000f00000f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000f0f0f00000f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f00000f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000000000f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000000000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f00000f0f0f0f00000f0f0f00000f0f0f0f0f0f0f0f0f0f00000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0000000f0f0f0f000000000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f000000000f0f000000000f0f00000f0f0f0f0f0f0f0f0f0000000f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000ffffffff01050000050000000d0000004d45544146494c45504943540004130000f3ebfffff00d0000080004130d140000
010009000003f30600000a002200000000001400000026060f001e00ffffffff040014000000576f72640e004d6963726f736f667420576f7264050000000b0200000000050000000c02d90479050d000000fb02000000000000000000000000000000000001000c040000002d010000040000000201010015000000fb02
adff0000000000009001000000000400001254696d6573204e657720526f6d616e00aa00040000002d01010005000000090200000000040000000201010004000000020101000e00000026060f001200ffffffff000008000000cc0d0000fa0d000007000000fc02000036793a020000040000002d01020009000000fa02
000003000000ffffff022200040000002d010300070000001b04d8041f028503020009000000fa02000000000000000000002200040000002d01040004000000f001030007000000fc020000ffffff000000040000002d01030004000000f00102000400000002010100030000001e000700000016048204f00136046500
040000000201010015000000fb02c6ff000000000000bc02000000000400001254696d6573204e657720526f6d616e00aa00040000002d010200050000000902ffffff001f000000320a380465000d000400000000007905d90447656e65726963204576656e74002d001a001f001a001a0010001a000f0027001d001a00
1f001300040000000201010005000000090200000000040000002701ffff04000000020101000400000002010100030000001e00070000001604c5048a017904ce000400000002010100040000002d010200050000000902ffffff0013000000320a7b04ce0005000400000000007905d9044c6f6769630027001c001d00
10001a00040000000201010005000000090200000000040000002701ffff040000000201010007000000fc0200005686f4020000040000002d01050009000000fa02000003000000ffffff022200040000002d01060012000000240307009302c802d6021902b5021902b5026a0172026a01720219025002190204000000
2d01040004000000f0010600040000002d01030004000000f00105000400000002010100030000001e000700000016047302e2031402a902040000000201010015000000fb02b5ff000000000000bc02000000000400001254696d6573204e657720526f6d616e003000040000002d01050016000000320a1702a9020700
0400000000007905d904436f6e74726f6c003600250029001900210025001500050000000902ffffff00040000000201010005000000090200000000040000002701ffff040000000201010007000000fc0200005686f4020000040000002d01060009000000fa02000003000000ffffff022200040000002d0107001200
000024030700c3002202e8002202e800d2023101d20231012202560122020d017001040000002d01040004000000f0010700040000002d01030004000000f00106000400000002010100030000001e00070000001604c7023002680222010400000002010100040000002d01050014000000320a6b022201060004000000
00007905d9044576656e7473320025002100290019001d000400000002010100040000002701ffff040000000201010007000000fc020000d75079020000040000002d01060009000000fa02000003000000ffffff022200040000002d010700070000001b0468012c0305001500040000002d01040004000000f0010700
040000002d01030004000000f00106000400000002010100030000001e000700000016047800f10200009200040000000201010015000000fb029cff000000000000bc02000000000400001254696d6573204e657720526f6d616e001900040000002d010600050000000902ffffff001c000000320a040092000b000400
000000007905d904414350492044726976657200480048003c002700190048002c001c0032002c002c00040000000201010005000000090200000000040000002701ffff04000000020101000400000002010100030000001e00070000001604ed00d8027500ab000400000002010100040000002d010600050000000902
ffffff0017000000320a7900ab0008000400000000007905d904616e6420414d4c2d320038003800190048005e00430021000400000002010100050000000902000000000400000002010100040000002d010600050000000902ffffff0011000000320aef00ab0004000400000000007905d904436f6465480032003800
2c00040000000201010005000000090200000000040000002701ffff04000000020101000400000002010100030000001e000700000016046201cf02eb00b4000400000002010100040000002d010600050000000902ffffff001c000000320aef00b4000b000400000000007905d904496e746572707265746572002700
380021002c002c0038002c002c0021002c002c00040000000201010005000000090200000000040000002701ffff040000000201010007000000fc02000036793a020000040000002d01070009000000fa02000003000000ffffff022200040000002d010800070000001b04d8043603d4022102040000002d0104000400
0000f0010800040000002d01030004000000f00107000400000002010100030000001e00070000001604b103410365034d020400000002010100040000002d010200050000000902ffffff0016000000320a67034d0207000400000000007905d90447656e65726963002d001a001f001a001a0010001a00040000000201
010005000000090200000000040000002701ffff04000000020101000400000002010100030000001e00070000001604f4034303a8034e020400000002010100040000002d010200050000000902ffffff0016000000320aaa034e0207000400000000007905d904436f6e74726f6c002a001c001f0013001a001c001000
040000000201010005000000090200000000040000002701ffff04000000020101000400000002010100030000001e0007000000160437042503eb0368020400000002010100040000002d010200050000000902ffffff0013000000320aed03680205000400000000007905d9044c6f6769630027001c001d0010001a00
040000000201010005000000090200000000040000002701ffff040000000201010007000000fc020000b052e1020000040000002d01070009000000fa02000003000000ffffff022200040000002d010800090000001c067b007b004e013d0505004504040000002d01040004000000f0010800040000002d0103000400
0000f00107000400000002010100030000001e00070000001604d1007805730052040400000002010100040000002d010500050000000902ffffff0010000000320a7600520403000400000000007905d904414d4c003600480032000400000002010100050000000902000000000400000002010100040000002d010500
050000000902ffffff0011000000320ace00520404000400000000007905d904436f64653600250029002100040000000201010005000000090200000000040000002701ffff040000000201010007000000fc0200005686f4020000040000002d01070009000000fa02000003000000ffffff022200040000002d010800
12000000240307003803a100bd03e400bd03c2004204c20042047f00bd037f00bd035e00040000002d01040004000000f0010800040000002d01030004000000f00107000400000002010100030000001e00070000001604c1005b046f00ab03040000000201010015000000fb02bdff000000000000bc02000000000400
001254696d6573204e657720526f6d616e004000040000002d010700050000000902ffffff0010000000320a7200ab0303000400000000007905d90452647300300025001a00040000000201010005000000090200000000040000002701ffff040000000201010007000000fc0200002439ea020000040000002d010800
09000000fa02000003000000ffffff022200040000002d010900070000001b0483031f02d4020200040000002d01040004000000f0010900040000002d01030004000000f00108000400000002010100030000001e0007000000160454036702f5021a000400000002010100040000002d010500050000000902ffffff00
22000000320af8021a000f000400000000007905d9044750204576656e7420537461747573003a002e0013003200250021002900190013002a0019002500190029001d00040000000201010005000000090200000000040000002701ffff040000000201010007000000fc02000036793a020000040000002d0108000900
0000fa02000003000000ffffff022200040000002d010900070000001b04340420028703a100040000002d01040004000000f0010900040000002d01030004000000f00108000400000002010100030000001e00070000001604da034f028e03b1000400000002010100040000002d010200050000000902ffffff001f00
0000320a9003b1000d000400000000007905d90447656e65726963204368696c64002d001a001f001a001a0010001a000f002a001f00100010002000040000000201010005000000090200000000040000002701ffff04000000020101000400000002010100030000001e000700000016041d042802d103c90004000000
02010100040000002d010200050000000902ffffff001d000000320ad303c9000c000400000000007905d9044576656e742053746174757327001d001a001f0013000f00200013001d0013001f001700040000000201010005000000090200000000040000002701ffff04000000020101000a00000026060f000a00ffff
ffff0100000000000400000002010100040000002d0100000300000000004c45}{\result {{\pict\wmetafile8\picw4868\pich5133\picwgoal2760\pichgoal2910 
010009000003a825000002001d2300000000050000000b0200000000050000000c02c200b8003d020000f70000031c010000000080000000008000008080000000008000800080000080800080808000c0c0c000ff00000000ff0000ffff00000000ff00ff00ff0000ffff00ffffff00000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffff0000000000c0c0c000808080000000ff000000800000ffff000080800000ff000000800000ffff000080800000ff00000080000000ff00ff008000800080ffff00408080
0080ff000040400000ffff8000ff800000ff808000804000008000ff00800040004080ff000040800004000000340200000300000035001d230000410b2000cc00c200b80000000000c200b8000000000028000000b8000000c20000000100040000000000b845000000000000000000000000000000000000000000000000
8000008000000080800080000000800080008080000080808000c0c0c0000000ff0000ff000000ffff00ff000000ff00ff00ffff0000ffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000ff0fff0000fff0000ff0000f000f000ff0000ff0000fffff0fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0ff
f00fff00fff00fff0ff00ff00ff00ff00ff00ff00ffffff0fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0ff000fff00fff00ffffff00ff00ff00ff00ff00ff00fffff000fffffffffffffffffffff
fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0ff00f0ff00fff000000ff00ff00ff00ff00ff00ff00fffff000fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffff00fffffffffffffffff0ff00f0ff00fff00ff00ff00ff00ff00ff00ff00ff00ffff00ff0ffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00fffffffffffffffff0f00ff0ff00fff00ff00ff000f00f
f00ff00ff00ff000f0f00ff0ffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00fffffffffffffffff0f00fff0f00ffff0000ff000f00f000ffff0000ff000f00000f000fffffffffffffff00ffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00fffffffffffffffff0f00fff0f00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff
fffffffffffffff000fffff000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffff0000fffff0000fffffffffffffffffffffffffffffffffffffffffff
ffffffffffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffff0fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffff0fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffff
ffffffffffffffffffffffffffffffffffff0fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffff0fffffffffffffffffffffffffffffffff
ffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffff0fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffff0fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffff
ffffff0000000ffff0000ffff00ff00fffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00fffffffffffffffff00fff00ff00ff00fff00ff00fffffffffffffffffffffffffffffffffffffff
ffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00fffffffffffffffff00ffff0ff00ff00fff00ff00fffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffff00fffffffffffffffff00ffff0ff00ff00ff00f000f0ffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00fffffffffffffffff00fffffff00ff00ff00
f000f0ffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00fffffffffffffffff00fffffff00ff00ff00ff0ff0ffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00fffffffffffffffff00ffffffff0000ff000f000f00fffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffff0fffffffffffffffffffffffffffffffffffffffff
ffffff00fffffffffffffffff00fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffff0fffffffffffffffffffffffffffffffffffffffffffffff00fffffffffffffffff00fffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffff0fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffff
ff0fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffff0fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffff0fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00
ffffffffffffffffffffffffffffffffffffffffffffff0fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffff0fffffffffffffffffffffff
ffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffff0fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffff
ffffffffffffffffffff0fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffff0fffffffffffffffffffffffffffffffffffffffffffffff00
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffff0fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffff0fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffff0fffff
ffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffff0fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffff00ffffffffffffffffffffffffffffffffffffffffffffff0fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff
ffff0fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffff0fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffff0fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
00ffffffffffffffffffffffffffffffffffffffffffffff0fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffff0fffffffffffffffffffff
ffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffff0fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffff0fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffff
ffffffffffffffffffffff0fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffff0fffffffffffffffffffffffffffffffffffffffffffffff
00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffff0ffffffffffffff0000fff0f000fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffff0fffffffffffff00fff0ff00ff00ffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffff0fff
fffffffff00ffff0ff00ff00ffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffff0ffffffffffff00ffffffffff000ffffffffffffffffffff00ffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffff0ffffffffffff00fffffffff000fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffff
ffffffffffffffffffffffffffffffffffffffff0ffffffffffff00fffffff000fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffff0ffffffffffff00ffff0ff00fff0ff
ffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffff0fffffffffffff00ff00ff00ff00ffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffff0ffffffffffffff000f0fff000f0ffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffff
ffffffffffffff0fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffff0fffffffffffffffffffffffffffffffffffffffffffffff00ffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffff0fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffff00ffffffffffffffffffffffffffffffffffffffffffffff0fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffff0fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffff0fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffff
ffffffffffffffffffffffffffffffff0fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffff0fffffffffffffffffffffffffffffffffffff
ffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffff0fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffff0fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff
ffffff0fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffff0fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffff0ffffffffffffffff00000000fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ff00ffffffffffffffffffffffffffffffffffffffffffffff0fffffffffffffffff00ff00ffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffff0fffffffffffffffff00
ff00ffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffff0fffffffffffffffff00ff00ffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffff0fffffffffffffffff00ff00000fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffff
ffffffffffffffffffffffff0fffffffffffffffff00ff00ff00ffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffff0fffffffffffffffff00ff00ff00ffffffffffffffffff
ff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffff0fffffffffffffffff00ff00ff00ffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffff0ffffffffffffffff0000000000fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffff0f
ffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffff0fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffff0fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffff
ffffffffffffffffffffffffffffffffffffffffff0fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffff0fffffffffffffffffffffffffff
ffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffff0fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffff0fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffff0fffffffffffffffffffffffffffffffffffffffffffffff00ffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffff0fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffff0fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffff0fffffffff
ffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00fffffffffffffffffffffffffff00000ffffffffffffff0fffffffffffffffffffffffffff00000fffffffffffffff00ffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffff0fffff0fffffffffffff0ffffffffffffffffffffffffff0fffff0ffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffff
ffffffffffffff0000000fffffffffffff0ffffffffffffffffffffffffff0000000ffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffff0000ff000000000fff000000f000000fffffff0ffffffff0000ff000000000fff000000ff0
00000fffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00fffffffff0ffffff00ff00ffff0fffffff00000fffffff0fffffffff0ffffff00ff00ffff0fffffffff00fffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffff00ffffffffff0ffff00fff00fffff0000ffff0fff0ffffff0ffffffffff0ffff00fff00fffff0000fffff00fffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffff0000000fff00ffff00ff00ffff0f
ffffffff0ffffffffff0000000fff00ffff00ff00ffff00fffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00fffffffffff0ff00ffff00ffff00ff00fffff0ffffffff0fffffffffff0ff00ffff00ffff00ff00ffff00fffffffff00ffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00fffffffffff0ff00ffff000f0f00ff00fffff0ffffffff0fffffffffff0ff00ffff000f0f00ff00ffff00fffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffff00fffffffffff0f00ffff000f00ff000000ffff00fffffff0fffffffffff0f00ffff000f00ff000000fff00fffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffff000ffffffffffffffffff00ff00fffffff0ffffffffffff000ff
fffffffffffffffffff00fffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffff00ffffffffffffffffffff00000fffffff0ffffffffffff00ffffffffffffffffffffff00fffffffff00ffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffff00fffffffffffff0fffffffffffffffffffff000ffffffff0fffffffffffff0ffffffffffffffffffff0000fffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffff
ffffffffffffffffffffffffff0fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffff0fffffffffffffffffffffffffffffffffffffffffff
ffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffff0fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffff0fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffff
0fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffff0fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff
ffffffffffffffffffffffffffffffffffffffffffff0fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffff0fffffffffffffffffffffffff
ffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffff0fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffff0fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffff
ffffffffffffffffff0fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffff0fffffffffffffffffffffffffffffffffffffffffffffff00ff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffff0fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffff00ffffffffffffffffffffffffff00000fffffffffffffff0ffffffffffffffffffffffffff00000ffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00fffffffffffffffffffffffff0fffff0ffffffffffffff0fffffff
ffffffffffffffffff0fffff0fffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00fffffffffffffffffffffffff0000000ffffffffffffff0fffffffffffffffffffffffff0000000fffffffffffffff00ffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00fffffff0000ff000000000fff000000fffff00ffffffff0fffffff0000ff000000000fff000000f00000ffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffff0f
fffff00ff00ffff0ffffffffff00ffffffff0ffffffff0ffffff00ff00ffff0ffffff00fff0fffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00fffffffff0ffff00fff00fffff0000ff0000000fffffff0fffffffff0ffff00fff00fffff0000fff
ffff00ffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00fffffffff0000000fff00ffff00ff00f0000000fffffff0fffffffff0000000fff00ffff00ff00ffffff00ffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffff00ffffffffff0ff00ffff00ffff00ff00f0fff00ffffffff0ffffffffff0ff00ffff00ffff00ff00fffff000ffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffff0ff00ffff000f0f00ff00ff0ff
00ffffffff0ffffffffff0ff00ffff000f0f00ff00fff000ffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffff0f00ffff000f00ff000000ff0f00ffffffff0ffffffffff0f00ffff000f00ff000000ffff0ffffffffff00ffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00fffffffffff000fffffffffffffffffffff000ffffffff0fffffffffff000ffffffffffffffffff0fff00fffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffff00fffffffffff00fffffffffffffffffffffff00ffffffff0fffffffffff00ffffffffffffffffffff00000fffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffff0ffffffffffffffffffffffff0ffffffff0ffffffffffff0ff
fffffffffffffffffff000ffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000fffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffff0fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffff000fffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffff0fffffffffffffffffffffffffffffffffffffffffffffff00fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0ffffffffffffffffff00ffffffffffffffffff
ffffffffffffffffffffffffffff0fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffff000ff0fff0000fff0000ff0000f000f000ff0000ff0000fffff0ffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffff0fffffffffffffffffffffffffffffffffffffffff
ffffff00fffffffffffffffff0fff00fff00fff00fff0ff00ff00ff00ff00ff00ff00ffffff0ffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffff0fffffffffffffffffffffffffffffffffffffffffffffff00fffffffffffffffff0ff000fff00fff00ffffff00ff00ff00ff00ff00ff00f
ffff000fffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffff0fffffffffffffffffffffffffffffffffffffffffffffff00fffffffffffffffff0ff00f0ff00fff000000ff00ff00ff00ff00ff00ff00fffff000fffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffff
ff0fffffffffffffffffffffffffffffffffffffffffffffff00fffffffffffffffff0ff00f0ff00fff00ff00ff00ff00ff00ff00ff00ff00ffff00ff0ffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffff0fffffffffffffffffffffffffffffffffffffffffffffff00fffffffffffffffff0
f00ff0ff00fff00ff00ff000f00ff00ff00ff00ff000f0f00ff0ffffffffffffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fffffffffffffffff0f00fff0f00ffff0000ff000f00f000ffff0000ff000f00000f000fffffffffffffff00
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fffffffffffffffff0f00fff0f00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffff00fffffffffffffffff000fffff000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffff0000fffff0000fffffffffffffff
ffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffff00000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0fffff0fffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000ffffffffffffffffffffffffffffffff0000000fffffffffffffffffffffffffffffffffffffffffffff00000ffff000000fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffff00fff00fffffffffffffff0000ff0000f0000f000000f0000f000fffffffffffffffffffffffffffffffffffff00fff0fffff00fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00fff00ffffffffffffffff00ffff00fff00ff0fffffff00ff00ffffff
fffffffffffffffffffffffffffffffffffff00ffff00fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00fff00ffffffffffffffff00ffff00fff00fff0000fff00ff00fffffffffffffffffffffffffffffffffffffffffff00ffff00fffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffff00fff00ffffffffffffffff00ffff00fff00ff00ff00ff00ff00ffffffffffffffffffffffffffffffffffffffffff000ffff00fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00fff00fffffff
fffffffff00ffff00fff00ff00ff00ff00ff00ffffffffffffffffffffffffffffffffffffffff000ffffff00fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00fff00ffffffffffffffff00000000fff00ff00ff00ff000f00ffffffffffffffffffffffffffffffff
ffffffffff0ffffff00fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00fff00ffffffffffffffff00ffff00ff000fff000000f00f00fffffffffffffffffffffffffffffffffffffff0fff00fffff00fffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffff00fff00ffffffffffffffff00ffff00fffffffffffffff00fffffffffffffffffffffffffffffffffffffffffff00000fffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000fffffffffffffffff00ffff00fff00ffff
ffffff00ffffffffffffffffffffffffffffffffffffffffffff000ffff0000fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000ff0000ff00fffffffff000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff2d
000000f7000003140000000000800000000080000080800000000080008000800000808000c0c0c000c0dcc000a6caf000fffbf000a0a0a40080808000ff00000000ff0000ffff00000000ff00ff00ff0000ffff00ffffff00040000003402010003000000000002c228ff0002d425ff00164409ff00164009ff00026228ff
0016441aff0002c22aff0002022224010000761c1978433a}}}}}{
\par }{\b\i Figure 4.4.1 - 16-bit Stack Frame on 32-bit Stack
\par }\pard \nowidctlpar\widctlpar\adjustright {The Plug and Play system BIOS can determine whether the stack is a 32-bit stack or a 16-bit
 stack in 16-bit and 32-bit environments through the use of the LAR - Load Access Rights Byte Instruction.  The LAR instruction will load the high order doubleword for the specified descriptor.  By loading the access rights for the current stack segment s
elector, the system BIOS can check the B-bit (Big bit) of the stack segment descriptor which identifies the stack segment descriptor as either a 16-bit segment (B-bit clear) or a 32-bit segment (B-bit set).
\par }\pard \nowidctlpar\widctlpar\adjustright {{\*\bkmkstart i8}{\*\bkmkend i8}In addition to executing the LAR command to get t
he entry point stack size, the BIOS code should avoid  ADD BP,X type stack operands in runtime service code paths. These operands carry the risk of faulting if the 32-bit stack base happens to be close to the 64K boundary.  For the 16-Bit Protected Mode i
nterface, it is assumed that the segment limit fields will be set to 64K.  The code segment must be readable.  The current I/O permission bit map must allow accesses to the I/O ports that the system BIOS may need access to in order to perform the function
.  The current privilege level (CPL) must be less than or equal to I/O privilege level.  This will allow the Plug and Play BIOS to use sensitive instructions such as CLI and STI.
\par The }{\b OEM Device Identifier}{
 field provides a  means for specifying a device identifier for the system.  The format of the OEM Device Identifier follows the format specified for EISA product identifiers.  A system identifier is not required and if not specified, this field should be
 0.
\par The entry point is assumed to have a function prototype of the form,
\par }{\b \tab \tab }{\b\i int FAR (*entryPoint)(int Function, ...);
\par }\pard \nowidctlpar\widctlpar\adjustright {and follow the standard 'C' calling conventions.
\par }\pard \nowidctlpar\widctlpar\adjustright {
System software will interface with all of the functions described in this specification by making a far call to this entry point.  As noted above, the caller will pass a function number and a set of arguments based on the function being called.  Each fun
ction will also include an argument which specifies a data selector which will allow the Plug and Play BIOS to access and update variables wi
thin the system BIOS memory space.  This data selector parameter is required for protected mode callers.  The caller must create a data segment descriptor using the }{\b\i 16-bit Protected Mode data segment base address}{
 specified in the Plug and Play Installation Structure, a limit of 64KB, and the descriptor must be read/write capable.  Real mode callers are required to set this parameter to the }{\b\i Real Mode 16-bit data segment address}{
 specified in the Plug and Play Installation Structure.
\par Any functions described by this specification which are not supported should return the FUNCTION_NOT_SUPPORTED return code.  The function return codes are described in Appendix C of this specification.
\par }\pard\plain \s3\sb240\sa240\sl240\slmult0\keep\keepn\nowidctlpar\widctlpar\tx1440\outlinelevel2\adjustright \b\f38\cgrid {\f0 4.4.1 System BIOS Plug and Play Compliance - "$PnP"
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\lang1024\cgrid {
This section describes the support that is guaranteed by the "$PnP" string in the Plug and Play Installation Check structure and specifies the BIOS support required to be Plug and Play compliant for systems with different characteristics.  A Plug and Play
 compliant system will guarantee:
\par }\pard\plain \s45\fi-576\li576\sa240\keep\nowidctlpar\widctlpar\adjustright \f39\fs20\cgrid {\f0 \tab 1. The Plug and Play Structure is valid.
\par }\pard \s45\fi-576\li576\sa240\keep\nowidctlpar\widctlpar\adjustright {\f0 \tab 
2. Any calls made to the Plug and Play BIOS functions will either perform the function as described by Version 1.0 of this specification or return the FUNCTION_NOT_SUPPORTED error code.  Plug and Play compliant systems are required to provide the support
 as outlined in the table below.
\par \tab 3. All of the runtime Plug and Play services will be contained in a contiguous 64K code segment.
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\lang1024\cgrid {Presence of the $PnP structure in the system BIOS does not mean that the
 system is fully Plug and Play compliant.  For instance, a system BIOS could have a valid $PnP structure; yet, return FUNCTION_NOT_SUPPORTED for each of the functions described in this specification.  The following table specifies the required Plug and Pl
ay BIOS support necessary for systems with different characteristics to meet full Plug and Play compliance.
\par }\trowd \trgaph108\trleft-12\trkeep \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clcbpat8\clshdng2500\cltxlrtb \cellx4908\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb
\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clcbpat8\clshdng2500\cltxlrtb \cellx7320\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clcbpat8\clshdng2500\cltxlrtb \cellx9732\pard 
\nowidctlpar\widctlpar\intbl\adjustright {\b System Characteristics\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\b Required Functions\cell Optional Functions\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\b \row }\trowd 
\trgaph108\trleft-12\trkeep \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx4908\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 
\cltxlrtb \cellx7320\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx9732\pard \nowidctlpar\widctlpar\intbl\adjustright {Systems with embedded devices on the systemboard.\line     Proprietary bus devices or l
ocal ISA devices on the\line     systemboard.\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {00h, 01h, 02h\cell \cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \nowidctlpar\widctlpar\intbl\adjustright {
Systems that support docking to expansion bases\cell 03h, 04h, 05h\cell \cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \nowidctlpar\widctlpar\intbl\adjustright {Reserved\cell \cell 06h, 07h, 08h\cell }\pard 
\nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \nowidctlpar\widctlpar\intbl\adjustright {Systems with an ISA expansion bus\cell 40h\cell 09h, 0Ah\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard 
\nowidctlpar\widctlpar\intbl\adjustright {ESCD Interface Functions\cell \cell 41h, 42h, 43h\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\trowd \trgaph108\trleft-12\trkeep \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb
\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx4908\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx7320\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr
\brdrs\brdrw15 \cltxlrtb \cellx9732\pard \nowidctlpar\widctlpar\intbl\adjustright {Systems supporting APM 1.1 (and greater)\cell 0Bh\cell \cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \nowidctlpar\widctlpar\adjustright {
\par }{\b\i *Note:}{  
\par Functions 09h, 0Ah, and 40h are designed to support systems with an ISA Expansion bus.  The information which must be stored in nonvolatile media is the information concerning the resources allo
cated to static legacy ISA devices.  If functions 09h and 0Ah designate that the system implementation utilizes the ESCD for storing static resource allocation, then the caller should utilize the interface defined by the }{\i ESCD Specification }{
to report statically allocated resources.  Functions 41h, 42h, and 43h defined in section 4.7 specify the ESCD interface.  Refer to the }{\i ESCD Specification }{
for a complete description of the interfaces to support the ESCD as well as the format of the ESCD.  BIOS support of 
these functions is optional.Systems with an ISA Expansion bus may provide these BIOS functions to enhance the Plug and Play BIOS POST process for assigning a conflict free configuration to the required boot devices.
\par The following table provides some examples of systems with certain characteristics and categorically lists the functions that would be required to be Plug and Play compliant.
\par }\trowd \trgaph108\trleft-108\trkeep \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clcbpat8\clshdng2500\cltxlrtb \cellx3084\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb
\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clcbpat8\clshdng2500\cltxlrtb \cellx4248\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clcbpat8\clshdng2500\cltxlrtb \cellx5412\clvertalt\clbrdrt\brdrs\brdrw15 
\clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clcbpat8\clshdng2500\cltxlrtb \cellx6816\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clcbpat8\clshdng2500\cltxlrtb \cellx8280
\pard \pagebb\nowidctlpar\widctlpar\intbl\adjustright {\b Example Systems\cell }\pard \pagebb\nowidctlpar\widctlpar\intbl\adjustright {\b Runtime Services\cell Event\cell }\pard \pagebb\nowidctlpar\widctlpar\intbl\adjustright {\b ISA Allocated Resource
\line Support\cell }\pard \pagebb\nowidctlpar\widctlpar\intbl\adjustright {\b ISA PnP\line Isolation\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\b \row }\trowd \trgaph108\trleft-108\trkeep \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl
\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx3084\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx4248\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl
\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx5412\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx6816\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl
\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx8280\pard \nowidctlpar\widctlpar\intbl\adjustright {Systems without an ISA bus;\line limited or a variety of boot devices;\line No Dynamic Events\cell }\pard 
\nowidctlpar\widctlpar\intbl\adjustright {Required\cell Not \line Required\cell Not \line Required\cell Not \line Required\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \nowidctlpar\widctlpar\intbl\adjustright {
Systems without an ISA bus;\line limited or a variety of boot devices;\line Dynamic Events supported\cell Required\cell Required\cell Not \line Required\cell Not \line Required\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\trowd 
\trgaph108\trleft-108\trkeep \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx3084\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx4248\clvertalt\clbrdrt
\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx5412\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx6816\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr
\brdrs\brdrw15 \cltxlrtb \cellx8280\pard \nowidctlpar\widctlpar\intbl\adjustright {Systems with an ISA bus;\line No Dynamic Events\cell Required\cell Not \line Required\cell Not\line Required \cell Required\cell }\pard 
\nowidctlpar\widctlpar\intbl\adjustright {\row }\trowd \trgaph108\trleft-108\trkeep \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx3084\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl
\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx4248\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx5412\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl
\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx6816\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx8280\pard \nowidctlpar\widctlpar\intbl\adjustright {
Systems with an ISA bus;\line Dynamic Events supported\cell Required\cell Required\cell Not\line Required \cell Required\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \nowidctlpar\widctlpar\adjustright {
\par }\pard\plain \s2\sb240\sa240\sl240\slmult0\keep\keepn\nowidctlpar\widctlpar\tx1440\outlinelevel1\adjustright \b\f38\fs28\cgrid {\f0 4.5  System Configuration Interface}{\f0\ul 
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\lang1024\cgrid {The functions des
cribed in the following subsections define the System Configuration Interface for obtaining information about the systemboard devices and for setting the system resources utilized by the configurable devices.
\par }\pard\plain \s3\sb240\sa240\sl240\slmult0\keep\keepn\nowidctlpar\widctlpar\tx1440\outlinelevel2\adjustright \b\f38\cgrid {\f0 \page 4.5.1  Function 0 - Get Number of System Device Nodes}{\f0\ul 
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\lang1024\cgrid {\b\fs24 Synopsis:
\par }{\i int FAR (*entryPoint)(Function, NumNodes, NodeSize, BiosSelector);\line int Function;\tab \tab \tab \tab \tab /* PnP BIOS Function 0 */\line unsigned char FAR *NumNodes;\tab \tab \tab /* Number of nodes the BIOS will return */\line 
unsigned int FAR *NodeSize;\tab \tab \tab /* Size of the largest device node */\tab \line unsigned int BiosSelector;\tab \tab \tab \tab /* PnP BIOS readable/writable selector */ 
\par }{\b\fs24 Description:
\par }{\i Required}{.  This function will return the number of nodes that the system BIOS will return information for in }{\i NumNodes}{
.  These nodes represent only the systemboard devices.  In addition to the number of nodes, the system BIOS will return the size, in bytes, of the largest System Device Node in }{\i NodeSize}{
.  This information can be utilized by the system software to determine the amount of memory required to get all of the System Device Nodes.
\par }\pard \nowidctlpar\widctlpar\adjustright {The }{\i BiosSelector}{
 parameter enables the system BIOS, if necessary, to update system variables that are contained in the system BIOS memory space.  If this function is called from protected mode, the caller must create a data segment descriptor using the 16-bit Protected M
ode data segment base address specified in the Plug and Play Installation Check data structure, a limit of 64KB, and the descriptor must be read/write capable.  If this function is called from real mode, }{\i BiosSelector }{
should be set to the Real Mode 16-bit data segment address as specified in the Plug and Play Installation Check structure.  Refer to section 4.4 above for more information on the Plug and Play Installation Check Structure and the elements that make up the
 structure.
\par The function is available in real mode and 16-bit protected mode.
\par }{\b\fs24 Returns:}{\fs24 
\par }\pard \nowidctlpar\widctlpar\adjustright {0 if successful - SUCCESS\line !0 if an error (Bit 7 set) or a warning occurred - error code (The function return codes are described in Appendix C)
\par }\pard \nowidctlpar\widctlpar\adjustright {The FLAGS and registers will be preserved, except for AX which contains the return code.
\par }{\b\fs24 Example:
\par }\pard \nowidctlpar\widctlpar\adjustright {The following example illustrates how the 'C' style call interface could be made from an assembly language module:
\par }\pard \nowidctlpar\widctlpar\adjustright {\fs18 \tab \tab .\line \tab \tab .\line \tab \tab .\line \tab push\tab Bios Selector\line \tab push\tab segment/selector of NodeSize\tab \tab ; pointer to NodeSize\line \tab push\tab offset of NodeSize\line \tab 
push\tab segment/selector of NumNodes\tab \tab ; pointer to NumNodes\line \tab push\tab offset of NumNodes\line \tab push\tab GET_NUM_NODES\tab \tab \tab ; Function 0\line \tab call\tab FAR PTR entryPoint\line \tab add\tab sp,12\tab \tab \tab \tab \tab 
; Clean up stack\line \tab cmp\tab ax,SUCCESS\tab \tab \tab \tab ; Function completed successfully?\line \tab jne\tab error\tab \tab \tab \tab \tab ; No-handle error condition\line \tab \tab .\line \tab \tab .
\par }\pard\plain \s3\sb240\sa240\sl240\slmult0\keep\keepn\nowidctlpar\widctlpar\tx1440\outlinelevel2\adjustright \b\f38\cgrid {\f0 4.5.2  Function 1 - Get System Device Node}{\f0\ul 
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\lang1024\cgrid {\b\fs24 Synopsis:
\par }{\i int FAR (*entryPoint)(Function, Node, devNodeBuffer, Control, BiosSelector);\line int Function;\tab \tab \tab \tab \tab /* PnP BIOS Function 1 */\line unsigned char FAR *Node;\tab \tab \tab /* Node number/handle to retrieve */\line 
struct DEV_NODE FAR *devNodeBuffer;\tab \tab /* Buffer to copy device node data to */\line unsigned int Control;\tab \tab \tab \tab /* Control Flag */\line unsigned int BiosSelector;\tab \tab \tab \tab /* PnP BIOS readable/writable selector */ 
\par }{\b\fs24 Description:
\par }{\i Required.}{  This function will copy the information for the specified System Device Node into the buffer specified by the caller.  The }{\i Node }{argument is a pointer to the unique node number (handle).  If  }{\i Node }{
contains 0, the system BIOS will return the first System Device Node.  The }{\i devNodeBuffer }{argument contains the pointer to the caller's memory buffer.  On return, }{\i Node }{
will be updated with the next node number, or if there are no more nodes, it will contain FFh.  The System Device Node data will be placed in the specified memory buffer.
\par }\pard \nowidctlpar\widctlpar\adjustright {The }{\i Control flag }{
provides a mechanism for allowing the system software to request a node that indicates either how the specified systemboard device  is currently configured or how it is configured for the next boot.  }{\i Control}{ is defined as:
\par \tab Bits 15:2: Reserved (0)\line \tab Bit 1:\tab 0=Do not get the information for how the device will be configured for the next boot.\line \tab \tab 1=Get the device configuration for the next boot (static configuration).\line \tab Bit 0:\tab 0=Do
 not get the information for how the device is configured right now.\line \tab \tab 1=Get the information for how the device is configured right now.\line 
\par If }{\i Control flag}{ is 0, neither bit 0 nor bit 1 is set, or if both bits are set, this function should return BAD_PARAMETER.
\par The }{\i BiosSelector}{
 parameter enables the system BIOS, if necessary, to update system variables that are contained in the system BIOS memory space.  If this function is called from protected mode, the caller must create a data segment descriptor using t
he 16-bit Protected Mode data segment base address specified in the Plug and Play Installation Check data structure, a limit of 64KB, and the descriptor must be read/write capable.  If this function is called from real mode, }{\i BiosSelector }{
should be set to the Real Mode 16-bit data segment address as specified in the Plug and Play Installation Check structure.  Refer to section 4.4 above for more information on the Plug and Play Installation Check Structure and the elements that make up the
 structure.
\par The function is available in real mode and 16-bit protected mode.
\par }{\b\fs24 Returns:}{\fs24 
\par }\pard \nowidctlpar\widctlpar\adjustright {0 if successful - SUCCESS\line !0 if an error (Bit 7 set) or a warning occurred - error code (The function return codes are described in Appendix C)
\par }\pard \nowidctlpar\widctlpar\adjustright {The FLAGS and registers will be preserved, except for AX which contains the return code.
\par }{\b\fs24 Example:
\par }\pard \nowidctlpar\widctlpar\adjustright {The following example illustrates how the 'C' style call interface could be made from an assembly language module:
\par }\pard \nowidctlpar\widctlpar\adjustright {\fs18 \tab \tab .\line \tab \tab .\line \tab \tab .\line \tab push\tab Bios Selector\line \tab push\tab Control Flag\line \tab push\tab segment/selector of devNodeBuffer\tab \tab ; pointer to devNodeBuffer\line 
\tab push\tab offset of devNodeBuffer\line \tab push\tab segment/selector of Node\tab \tab \tab ; pointer to Node number\line \tab push\tab offset of Node\line \tab push\tab GET_DEVICE_NODE\tab \tab \tab ; Function 1\line \tab call\tab FAR PTR entryPoint
\line \tab add\tab sp,14\tab \tab \tab \tab \tab ; Clean up stack\line \tab cmp\tab ax,SUCCESS\tab \tab \tab \tab ; Function completed successfully?\line \tab jne\tab error\tab \tab \tab \tab \tab ; No-handle error condition\line \tab \tab .\line \tab 
\tab .\line \tab \tab .
\par }\pard\plain \s3\sb240\sa240\sl240\slmult0\keep\keepn\nowidctlpar\widctlpar\tx1440\outlinelevel2\adjustright \b\f38\cgrid {\f0\fs18 \page }{\f0 4.5.3  Function 2 - Set System Device Node}{\f0\ul 
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\lang1024\cgrid {\b\fs24 Synopsis:
\par }{\i int FAR (*entryPoint)(Function, Node, devNodeBuffer, Control, BiosSelector);\line int Function;\tab \tab \tab \tab \tab /* PnP BIOS Function 2 */\line unsigned char  Node;\tab \tab \tab \tab /* Node number/handle to set */\line 
struct DEV_NODE FAR *devNodeBuffer;\tab \tab /* Buffer containing device node data */\line unsigned int Control;\tab \tab \tab \tab /* Control Flag */\line  unsigned int BiosSelector;\tab \tab \tab /* PnP BIOS readable/writable selector */ 
\par }{\b\fs24 Description:
\par }{\i Required.  }{This function will allow system software to set the system resource configuration for the specified System Device Node.  The }{\i Node}{ argument will contain the unique node number (handle) for the device that is to be set, and }{\i 
devNodeBuffer }{
contains the pointer to the node data structure that specifies the new resource allocation request.  The node data structure must completely describe the resource settings for the device.  A node data structure that contains partial settings will result i
n the improper set up of the device.   It cannot be assumed that any previous resource allocations will remain when this call is made.  It is important to note that the resource descriptors that define the resource allocation must be speci
fied in the same order as listed in the allocated resource configuration block for the system device node to be set.  The allocated resource configuration block should be used as a template for setting the new resources for the device to ensure that the d
escriptors are specified in the correct format.  In fact, the }{\i devNodeBuffer }{
can be a copy of the fetched System Device Node with its allocated resource configuration block modified to reflect the desired new device configuration.  Therefore, this function m
ust be implemented to extract and use only the relevant new resource configuration information while ignoring all other extraneous node information.   This function will not validate the resource settings or the checksum passed by the caller, and may not 
return an error code.
\par }\pard \nowidctlpar\widctlpar\adjustright {To disable a device, all resource descriptors in the allocated resource configuration block of the System {\*\bkmkstart i9}{\*\bkmkend i9}
Device Node must be set to zero.  The resource attribute information field and the tag field are "Don't Care" and may be zeroed.
\par The }{\i Control flag }{provides a mechanism for allowing the system software to indicate whether the systemboard device configuration specified by this call is to take affect immediately or at the next boot.  }{\i Control}{ is defined as:
\par \tab Bits 15:2: Reserved (0)\line \tab Bit 1:\tab 0=Do not set the device configuration for the next boot.\line \tab \tab 1=Set the device configuration for the next boot (static configuration).\line \tab Bit 0:\tab 
0=Do not set the device configuration dynamically.\line \tab \tab 1=Set the device configuration right now (dynamic configuration).
\par If }{\i Control flag}{
 is 0, neither bit 0 nor bit 1 is set and this function should return BAD_PARAMETER.  If both bits are set, then the system BIOS will attempt to set the configuration of the device right now (dynamic configuration), as well as set the device configuration
 for the next boot (static configuration).  }{\ul When both bits are set, it is possible that the NOT_SET_STATICALLY warning could be generated.  This indicates that the device was configured dynamically, but could not be configured stati
cally (See Appendix C, Error Codes).}{
\par The }{\i BiosSelector}{
 parameter enables the system BIOS, if necessary, to update system variables that are contained in the system BIOS memory space.  If this function is called from protected mode the caller must create a data segment descriptor using the 16-bit Protected Mo
de data segment base address specified in the Plug and Play Installation Check data structure, a limit of 64k, and the descriptor must be read/write capable.  If this function is called from real mode, }{\i BiosSelector }{
should be set to the Real Mode 16-bit data segment address as specified in the Plug and Play Installation Check structure.  Refer to section 4.4 above for more information on the Plug and Play Installation Check Structure and the elements that make up the
 structure.
\par The function is available in real mode and 16-bit protected mode.
\par }{\b\fs24 Returns:}{\fs24 
\par }\pard \nowidctlpar\widctlpar\adjustright {0 if successful - SUCCESS\line !0 if an error (Bit 7 set) or a warning occurred - error code (The function return codes are described in Appendix C)
\par }\pard \nowidctlpar\widctlpar\adjustright {The FLAGS and registers will be preserved, except for AX which contains the return code.
\par }{\b\fs24 Example:
\par }\pard \nowidctlpar\widctlpar\adjustright {The following example illustrates how the 'C' style call interface could be made from an assembly language module:
\par }\pard \nowidctlpar\widctlpar\adjustright {\fs18 \tab \tab .\line \tab \tab .\line \tab \tab .\line \tab push\tab Bios Selector\line \tab push\tab Control\tab \tab \tab \tab \tab ; Control flag\line \tab push\tab segment/selector of devNodeBuffer\tab 
\tab ; pointer to devNodeBuffer\line \tab push\tab offset of devNodeBuffer\line \tab push\tab Node\tab \tab \tab \tab \tab ; node number - only low 8-bits used\line \tab push\tab SET_DEVICE_NODE\tab \tab \tab ; Function 2\line \tab call\tab 
FAR PTR entryPoint\line \tab add\tab sp,12\tab \tab \tab \tab \tab ; Clean up stack\line \tab cmp\tab ax,SUCCESS\tab \tab \tab \tab ; Function completed successfully?\line \tab jne\tab error\tab \tab \tab \tab \tab ; No-handle error condition\line \tab 
\tab .\line \tab \tab .\line \tab \tab .
\par }\pard\plain \s2\sb240\sa240\sl240\slmult0\keep\keepn\nowidctlpar\widctlpar\tx1440\outlinelevel1\adjustright \b\f38\fs28\cgrid {\f0 4.6  Event Notification Interface
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\lang1024\cgrid {
Certain classes of systems may provide the capability for the addition or removal of system devices while the system unit is powered on, such as inserting a Notebook unit into a Docking Station.  System BIOS support is necessary for providing Event Notifi
cation accessible to system software so that when devices are added or removed the system software will compr
ehend the use or release of system resources by those devices.  Event Notification can be implemented as either a polled method or as asynchronous events.  System software can check the }{\i Control Word, }{which is located in the }{\i 
BIOS Plug and Play Header}{ structure, to determine the Event Notification method supported on the system.  }{\i Refer to the Plug and Play Installation Check section for more information on the BIOS Plug and Play Header and the Control Word.}{  The }{\i 
Control Word }{has bits defined that indicate the type of Event Notification.  The BIOS Plug and Play Header structure also contains the }{\i Event notification flag address, }{which specifies the physical location of the }{\i Event Flag }{
for polling.  The }{\i Event Flag }{is the event polling location.  When a system event occurs bit 0 of the }{\i Event Flag}{
 will be set to indicate a pending event.  Therefore, if the method for Event Notification is through polling, system software should monitor the }{\i Event Flag }{to determine when a configuration event has occurred.
\par }\pard \nowidctlpar\widctlpar\adjustright {The asynchro
nous method of Event Notification allows system software to install an interrupt handler as a means for notification.  The system BIOS will specify a system device node, which can be obtained from the }{\i Get Node}{
 runtime function, that will specify the requirements for handling asynchronous events.  The system device node for asynchronous event management will be identified through the device identifier field in the device node data structure, and will specify th
e interrupt number and an I/O port address.  Thi
s event system device node can be defined in one of two ways.  First, the device node can follow the generic implementation in which the device identifier is PNP0C03 and the interrupt number and I/O address assigned are system specific.  The only requirem
ent with the generic implementation is that the I/O address bit used for detecting the source of the interrupt and clearing the interrupt line is bit 0.  If bit 0 of this I/O address is set to 1, then the interrupt was generated due to a system event.  Th
e 
interrupt service routine should reset the interrupt line by clearing bit 0 at the specified I/O address.  All other bits read from the I/O address should not be modified.  The second way the event system device node can be defined is implementation speci
fic where the system vendor must supply their own device identifier and whatever resources are required for servicing the event interrupt.  This method will require a specific device driver associated with the device node identifier to support the event n
otification interface.
\par When the system software is notified of an event by either mechanism, it can then call the BIOS runtime function to get the event which will return a message specifying the type of event.  These events are specific to the system and do not represent event
s that can occur on the various expansion busses, such as PCMCIA insertion and removal events.  The following table describes the types of events that are reported through this BIOS interface:
\par \page 
\par }\trowd \trgaph108\trleft18\trkeep \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrdb\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx3390\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrdb\brdrw15 
\clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx4257\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrdb\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx9249\pard\plain 
\s87\qc\fi-360\li360\nowidctlpar\widctlpar\intbl\adjustright \b\fs20\lang1024\cgrid {\fs18 Event Identifier\cell }\pard \s87\qc\fi-360\li360\nowidctlpar\widctlpar\intbl\adjustright {\fs18 Value\cell Description\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {\fs18 \row }\trowd \trgaph108\trleft18\trkeep \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx3390\clvertalt\clbrdrt
\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx4257\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx9249\pard\plain 
\s86\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {\fs18 ABOUT_TO_CHANGE_CONFIG
\par \cell }\pard \s86\qc\nowidctlpar\widctlpar\intbl\adjustright {\fs18 0001h\cell }\pard \s86\nowidctlpar\widctlpar\intbl\adjustright {\fs18 
This message provides the system with a mechanism whereby system software can obtain notification from the system BIOS when a change is about to be made to the system.  This notification encompasses initiating a docking, or undocking, sequence.  For syste
ms that support this message, the docking sequence will be suspended until the system software issues a }{\b\fs18 Send_Message()}{\fs18  to the system BIOS with either an }{\b\fs18 OK}{\fs18 
 message indicating that it's OK to dock/undock the system, or an }{\b\fs18 ABORT}{\fs18  message that signals the BIOS to halt the event. }{\i\fs18 (Refer to Send Message function description below for more information.)}{\fs18   \cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {\fs18 \row }\pard\plain \s86\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {\fs18 DOCK_CHANGED
\par \cell }\pard \s86\qc\nowidctlpar\widctlpar\intbl\adjustright {\fs18 0002h\cell }\pard \s86\nowidctlpar\widctlpar\intbl\adjustright {\fs18 
This message indicates that new devices have either been successfully added or removed from the system, such as docking to, or undocking from, a docking station.  This message will be used to indicate that a convenience base has been added/removed from th
e system. \cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {\fs18 \row }\pard\plain \s86\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {\fs18 SYSTEM_DEVICE_CHANGED
\par \cell }\pard \s86\qc\nowidctlpar\widctlpar\intbl\adjustright {\fs18 0003h\cell }\pard \s86\nowidctlpar\widctlpar\intbl\adjustright {\fs18 This message indicates that removable ("pluggable") system devices have been removed or inserted into the base unit. 
\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {\fs18 \row }\pard\plain \s86\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {\fs18 CONFIG_CHANGE_FAILED
\par \cell }\pard \s86\qc\nowidctlpar\widctlpar\intbl\adjustright {\fs18 0004h\cell }\pard \s86\nowidctlpar\widctlpar\intbl\adjustright {\fs18 
This message indicates that the system detected an error when attempting to add or remove devices to/from the system, such as attempting to dock to the docking station, or failing to successfully undock from the docking station.  An error code will be ret
urned in the return status for the }{\i\fs18 Get_Event}{\fs18  Plug and Play BIOS function if the system is able to determine the cause of the CONFIG_CHANGE_FAILED.  Appendix C contains a complete list of return codes.
\par \cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {\fs18 \row }\pard\plain \s86\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {\fs18 UNKNOWN_SYSTEM_EVENT\cell }\pard 
\s86\qc\nowidctlpar\widctlpar\intbl\adjustright {\fs18 FFFFh\cell }\pard \s86\nowidctlpar\widctlpar\intbl\adjustright {\fs18 An unknown system event has occurred.  The system BIOS is not able to determine the type of event.\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {\fs18 \row }\trowd \trgaph108\trleft18\trkeep \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx3390\clvertalt\clbrdrt
\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx4257\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx9249\pard\plain 
\s86\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {\fs18 OEM_DEFINED_EVENTS\cell }\pard \s86\qc\nowidctlpar\widctlpar\intbl\adjustright {\fs18 8000h \line thru\line  FFFEh\cell }\pard \s86\nowidctlpar\widctlpar\intbl\adjustright {\fs18 
OEM defined events allow OEM to define events specific to their system implementation.  These events are only comprehended by the OEM.  These events are identified by the upper bit of the event message being set (bit 7=1). \cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {\fs18 \row }\pard \nowidctlpar\widctlpar\adjustright {
\par }\pard \nowidctlpar\widctlpar\adjustright {To properly support event management, a PnP BIOS should implement t
he PNP_OS_ACTIVE and PNP_OS_INACTIVE messages, as well as their associated event timing requirements and PnP-OS-Active states as described in section 4.6.2.
\par }\pard\plain \s3\sb240\sa240\sl240\slmult0\keep\keepn\nowidctlpar\widctlpar\tx1440\outlinelevel2\adjustright \b\f38\cgrid {\f0 \page 4.6.1  Function 3 - Get Event}{\f0\ul 
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\lang1024\cgrid {\b\fs24 Synopsis:
\par }\pard\plain \s86\nowidctlpar\widctlpar\adjustright \fs20\lang1024\cgrid {\i int FAR (*entryPoint)(Function, Message, BiosSelector);
\par int Function;\tab \tab \tab \tab \tab /* PnP BIOS Function 3 */
\par }\pard \s86\nowidctlpar\widctlpar\adjustright {\i unsigned int FAR *Message;\tab \tab \tab /* Storage for the event message */
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\lang1024\cgrid {\i  unsigned int BiosSelector;\tab \tab \tab /* PnP BIOS readable/writable selector */ 
\par }{\b\fs24 Description:
\par }{\i Required for Dynamic Event Management.  }{This function w
ill allow system software to retrieve a message specifying the type of event that has occurred on the system. This function is supported for either event notification by polling or for asynchronous event notification, if the system BIOS provides event not
ification.  It is the responsibility of this function to clear the event flag when called if the event notification method implemented is through polling.
\par }\pard \nowidctlpar\widctlpar\adjustright {If a system event has occurred this call will return the appropriate event notification message in the memory location specified by the }{\i Message }{argument.  }{\i Message }{
will be set to one of the following event notification messages:
\par \tab ABOUT_TO_CHANGE_CONFIG}{\fs18 \line }{\tab DOCK_CHANGED}{\fs18 \line \tab }{SYSTEM_DEVICE_CHANGED}{\fs18 \line }{\tab CONFIG_CHANGE_FAILED}{\fs18 \line }{\tab UNKNOWN_SYSTEM_EVENT}{\fs18 \line }{\tab OEM_DEFINED_EVENT
\par The event notification messages are defined in the table at the start of Event Notification Interface section.  If }{\i Message }{
is CONFIG_CHANGE_FAILED and the system is able to determine the cause of the error, then the appropriate error should be returned in AX.
  This will allow system software the ability notify the user of the cause of the failure.  Refer to Appendix C for a description of the error codes associated with the CONFIG_CHANGE_FAILED event message.
\par The }{\i BiosSelector}{
 parameter enables the system BIOS, if necessary, to update system variables that are contained in the system BIOS memory space.  If this function is called from protected mode the caller must create a data segment descriptor using the 16-bit Protected Mo
de data segment base address specified in the Plug and Play Installation Check data structure, a limit of 64k, and the descriptor must be read/write capable.  If this function is called from real mode, }{\i BiosSelector }{
should be set to the Real Mode 16-bit data segment address as specified in the Plug and Play Installation Check structure.  Refer to section 4.4 above for more information on the Plug and Play Installation Check Structure and the elements that make up the
 structure.
\par This function is available in real mode and 16-bit protected mode.
\par }{\b\fs24 Returns:}{\fs24 
\par }\pard \nowidctlpar\widctlpar\adjustright {0 if successful - SUCCESS\line !0 if an error (Bit 7 set) or a warning occurred or no pending events - error code (The function return codes are described in Appendix C)
\par }\pard \nowidctlpar\widctlpar\adjustright {The FLAGS and registers will be preserved, except for AX which contains the return code.\page }{\b\fs24 Example:
\par }\pard \nowidctlpar\widctlpar\adjustright {The following example illustrates how the 'C' style call interface could be made from an assembly language module:
\par }\pard\plain \s86\nowidctlpar\widctlpar\adjustright \fs20\lang1024\cgrid {\tab \tab .
\par }{\fs18 \tab \tab .
\par }\pard \s86\nowidctlpar\widctlpar\adjustright {\fs18 \tab \tab .
\par \tab push\tab Bios Selector\line \tab push\tab segment/selector of Message\tab \tab \tab ; pointer to Message
\par }\pard \s86\nowidctlpar\widctlpar\adjustright {\fs18 \tab push\tab offset of Message
\par }\pard \s86\nowidctlpar\widctlpar\adjustright {\fs18 \tab push\tab GET_EVENT\tab \tab \tab \tab ; Function 3
\par \tab call\tab FAR PTR entryPoint
\par }\pard \s86\nowidctlpar\widctlpar\adjustright {\fs18 \tab add\tab sp,8\tab \tab \tab \tab \tab ; Clean up stack
\par }\pard \s86\nowidctlpar\widctlpar\adjustright {\fs18 \tab cmp\tab ax,SUCCESS\tab \tab \tab \tab ; Function completed successfully?
\par }\pard \s86\nowidctlpar\widctlpar\adjustright {\fs18 \tab jne\tab error\tab \tab \tab \tab \tab ; No-handle error condition
\par }\pard \s86\nowidctlpar\widctlpar\adjustright {\fs18 \tab \tab .
\par \tab \tab .
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\lang1024\cgrid {\fs18 \tab \tab .
\par }\pard\plain \s3\sb240\sa240\sl240\slmult0\keep\keepn\nowidctlpar\widctlpar\tx1440\outlinelevel2\adjustright \b\f38\cgrid {\f0 4.6.2  Function 4 - Send Message}{\f0\ul 
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\lang1024\cgrid {\b\fs24 Synopsis:
\par }\pard\plain \s86\nowidctlpar\widctlpar\adjustright \fs20\lang1024\cgrid {\i int FAR (*entryPoint)(Function, Message, BiosSelector);
\par int Function;\tab \tab \tab \tab \tab /* PnP BIOS Function 4 */
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\lang1024\cgrid {\i unsigned int Message;\tab \tab \tab \tab /* Docking Message */\line unsigned int BiosSelector;\tab \tab \tab \tab /* PnP BIOS readable/writable selector */ 
\par }\pard \nowidctlpar\widctlpar\adjustright {\b\fs24 Description:
\par }{\i Required for Dynamic Event Management.  }{
This function will provide system software with a mechanism for interacting with the system while handling system events.  There are three classes of messages that are supported by this interface:  Response Messages, Control Messages, and OEM Defined Mess
ages.  The Response Messages are used as a means whereby the system BIOS will not proceed with a particular event until the system software provides a response instructing the system BIOS to continue or abort the processing of that event.  M
essage values 0 through 3Fh are reserved for Response Messages.  Control Messages provide system software with the ability to cause a particular event to happen.  Message values 40h through 7Fh are reserved for Control Messages.  OEM Defined Messages are 
specific to the OEM's system implementations and are only understood by the OEM.  Message values 8000h through FFFFh identify OEM Defined Messages.  The following table describes the event messages that system software can send to the system BIOS, where }
{\i Message}{ has one of the following meanings:
\par }\pard \nowidctlpar\widctlpar\adjustright {\b \page Response Messages 00h through 3Fh:}{
\par }\trowd \trgaph108\trleft348\trkeep \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrdb\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx3885\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrdb\brdrw15 
\clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx4686\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrdb\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx9678\pard\plain 
\s87\qc\fi-360\li360\nowidctlpar\widctlpar\intbl\adjustright \b\fs20\lang1024\cgrid {\fs18 Message Identifier\cell }\pard \s87\qc\fi-360\li360\nowidctlpar\widctlpar\intbl\adjustright {\fs18 Value\cell Description\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {\fs18 \row }\trowd \trgaph108\trleft348\trkeep \clvertalt\clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx3885\clvertalt\clbrdrl\brdrs\brdrw15 \clbrdrb
\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx4686\clvertalt\clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx9678\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs18 OK\cell }\pard 
\qc\nowidctlpar\widctlpar\intbl\adjustright {\fs18 00h\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs18 
Instructs the system to continue with the sequence which initiated the event.  This message is only valid when the Get Event function has returned one of the ABOUT_TO_XXXXX events.  When the system software is notified with an ABOUT_TO_XXXXX message,  the
 appropriate actions will not take place  until the Send Message BIOS Function is called with OK.\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs18 \row }\trowd \trgaph108\trleft348\trkeep \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 
\clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx3885\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx4686\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb
\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx9678\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs18 ABORT\cell }\pard \qc\nowidctlpar\widctlpar\intbl\adjustright {\fs18 01h\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs18 
Abort the actio
n which initiated the ABOUT_TO_XXXXX event.  This message instructs the system BIOS to prevent the event from occurring.  For instance, if the event is an undocking sequence, then the system will not be allowed to undock.  It is assumed that it is the res
ponsibility of the system software to communicate to the user the reason for not allowing the system to carry out the action for the event.  This message is only valid when Get Event has returned one of the ABOUT_TO_XXXXX messages.\cell }\pard 
\nowidctlpar\widctlpar\intbl\adjustright {\fs18 \row }\pard \nowidctlpar\widctlpar\adjustright {\b\fs18 
\par Control Messages 40h through 7Fh:
\par }\trowd \trgaph108\trleft348\trkeep \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrdb\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx3885\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrdb\brdrw15 
\clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx4686\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrdb\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx9678\pard\plain 
\s87\qc\fi-360\li360\nowidctlpar\widctlpar\intbl\adjustright \b\fs20\lang1024\cgrid {\fs18 Message Identifier\cell }\pard \s87\qc\fi-360\li360\nowidctlpar\widctlpar\intbl\adjustright {\fs18 Value\cell Description\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {\fs18 \row }\trowd \trgaph108\trleft348\trkeep \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx3885\clvertalt\clbrdrt
\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx4686\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx9678\pard 
\nowidctlpar\widctlpar\intbl\adjustright {\fs18 UNDOCK_DEFAULT_ACTION\cell }\pard \qc\nowidctlpar\widctlpar\intbl\adjustright {\fs18 40h\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs18 
This message provides a mechanism for system software to soft eject the system and instructs the system BIOS to take the default action when ejecting the system.\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs18 \row }\pard 
\nowidctlpar\widctlpar\intbl\adjustright {\fs18 POWER_OFF\cell }\pard \qc\nowidctlpar\widctlpar\intbl\adjustright {\fs18 41h\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs18 
This message instructs the system BIOS to power off the system.  It is assumed that the system software will perform the necessary actions to shut the system down before sending this message.\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs18 
\row }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs18 PNP_OS_ACTIVE\cell }\pard \qc\nowidctlpar\widctlpar\intbl\adjustright {\fs18 42h\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs18 This message allows the PnP BIO
S to track whether a PnP OS is active and defines event timing.  The PnP BIOS may default to either a PnP-OS-Inactive or PnP-OS-Active state as needed.  However, upon initial OS load, a PnP OS will register with the PnP BIOS by sending the PNP_OS_ACTIVE m
essage to the PnP BIOS.  When the PNP_OS_ACTIVE message is received, the PnP BIOS will operate in the PnP-OS-Active state.  In this state, the PnP BIOS will wait forever after signaling a system event.  This will allow the PnP OS to execute a }{\i\fs18 
Plug and Play BIOS Function Get Event}{\fs18 
 call and handle the event (See Section 4.6).  Although a PnP BIOS is not required to support the PNP_OS_ACTIVE message, support is recommended in systems that generate events.  If this message is unsupported, then  MESSAGE_NOT _SUPPORTED should be return
ed.\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs18 \row }\trowd \trgaph108\trleft348\trkeep \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx3885\clvertalt\clbrdrt
\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx4686\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx9678\pard 
\nowidctlpar\widctlpar\intbl\adjustright {\fs18 PNP_OS_INACTIVE\cell }\pard \qc\nowidctlpar\widctlpar\intbl\adjustright {\fs18 43h\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs18 
This message complements the PNP_OS_ACTIVE message.   A PnP OS will send the PNP_OS_INACTIVE message to the PnP BIOS upon OS termination.  When the PNP_OS_INACTIVE message is received, the PnP BIOS will op
erate in the PnP-OS-Inactive state.  In this state,  no PnP event  timing constraints exist.  The PnP BIOS does not have to wait for the PnP OS to execute a }{\i\fs18 Plug and Play BIOS Function Get Event}{\fs18 
 call (See Section 4.6) and can handle event timing in the manner it best determines.  Although a PnP BIOS is not required to support the PNP_OS_INACTIVE message, support is recommended in systems that generate events.  If this message is unsupported, the
n MESSAGE_NOT _SUPPORTED should be returned.\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs18 \row }\pard \nowidctlpar\widctlpar\adjustright {\b\fs18 
\par OEM Defined Messages 8000h through FFFFh:}{
\par }\trowd \trgaph108\trleft348\trkeep \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrdb\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx3885\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrdb\brdrw15 
\clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx4686\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrdb\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2000\cltxlrtb \cellx9678\pard\plain 
\s87\qc\fi-360\li360\nowidctlpar\widctlpar\intbl\adjustright \b\fs20\lang1024\cgrid {\fs18 Message Identifier\cell }\pard \s87\qc\fi-360\li360\nowidctlpar\widctlpar\intbl\adjustright {\fs18 Value\cell Description\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {\fs18 \row }\trowd \trgaph108\trleft348\trkeep \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx3885\clvertalt\clbrdrt
\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx4686\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx9678\pard 
\nowidctlpar\widctlpar\intbl\adjustright {\fs18 OEM_DEFINED_MESSAGES\cell }\pard \qc\nowidctlpar\widctlpar\intbl\adjustright {\fs18 8000h \line thru\line  FFFFh\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\fs18 
This message allows OEMs to define messages specific to their system implementation.  These messages are only comprehended by the OEM.  These messages are identified by the upper bit of the message.\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {
\fs18 \row }\pard \nowidctlpar\widctlpar\adjustright {
\par }\pard \nowidctlpar\widctlpar\adjustright {If the system BIOS does not support one of the specified messages, this function will return MESSAGE_NOT_SUPPORTED.
\par The }{\i BiosSelector}{ parameter enables the system BIOS, if necessary, to update s
ystem variables that are contained in the system BIOS memory space.  If this function is called from protected mode, the caller must create a data segment descriptor using the 16-bit Protected Mode data segment base address specified in the Plug and Play 
Installation Check data structure, a limit of 64KB, and the descriptor must be read/write capable.  If this function is called from real mode, }{\i BiosSelector }{
should be set to the Real Mode 16-bit data segment address as specified in the Plug and Play Installa
tion Check structure.  Refer to section 4.4 above for more information on the Plug and Play Installation Check Structure and the elements that make up the structure.
\par This function is available in real mode and 16-bit protected mode.
\par }{\b\fs24 Returns:}{\fs24 
\par }\pard\plain \s86\nowidctlpar\widctlpar\adjustright \fs20\lang1024\cgrid {0 if successful - SUCCESS
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\lang1024\cgrid {!0 if an error (Bit 7 set) or a warning occurred - error code (The function return codes are described in Appendix C)
\par The FLAGS and registers will be preserved, except for AX which contains the return code.
\par }{\b\fs24 Example:
\par }\pard \nowidctlpar\widctlpar\adjustright {The following example illustrates how the 'C' style call interface could be made from an assembly language module:
\par }\pard\plain \s86\nowidctlpar\widctlpar\adjustright \fs20\lang1024\cgrid {\tab \tab .
\par }{\fs18 \tab \tab .
\par }\pard \s86\nowidctlpar\widctlpar\adjustright {\fs18 \tab \tab .
\par \tab push\tab Bios Selector\line \tab push\tab Message\tab \tab \tab \tab \tab ; Message
\par }\pard \s86\nowidctlpar\widctlpar\adjustright {\fs18 \tab push\tab SEND_MSG\tab \tab \tab \tab ; Function 4
\par }\pard \s86\nowidctlpar\widctlpar\adjustright {\fs18 \tab call\tab FAR PTR entryPoint
\par \tab add\tab sp,6\tab \tab \tab \tab \tab ; Clean up stack
\par }\pard \s86\nowidctlpar\widctlpar\adjustright {\fs18 \tab cmp\tab ax,SUCCESS\tab \tab \tab \tab ; Function completed successfully?
\par }\pard \s86\nowidctlpar\widctlpar\adjustright {\fs18 \tab jne\tab error\tab \tab \tab \tab \tab ; No-handle error condition
\par \tab \tab .
\par }\pard \s86\nowidctlpar\widctlpar\adjustright {\fs18 \tab \tab .
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\lang1024\cgrid {\fs18 \tab \tab .
\par }\pard\plain \s3\sb240\sa240\sl240\slmult0\keep\keepn\nowidctlpar\widctlpar\tx1440\outlinelevel2\adjustright \b\f38\cgrid {\f0 \page 4.6.3  Function 5 - Get Docking Station Information}{\f0\ul 
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\lang1024\cgrid {\b\fs24 Synopsis:
\par }{\i int FAR (*entryPoint)(Function, DockingStationInfo, BiosSelector);\line int Function;\tab \tab \tab \tab \tab /* PnP BIOS Function 5 */\line unsigned char FAR *DockingStationInfo;\tab \tab /* Pointer to docking station info structure */\line 
 unsigned int BiosSelector;\tab \tab \tab /* PnP BIOS readable/writable selector */
\par }{\b\fs24 Description:
\par }{\i Required for Dynamic Event Management.  }{
This function will allow system software to get information which specifies the type of docking device, either expansion or convenience base, the system is connected to, as well as the capabilities of the docking device.  The docking station information w
ill be returned in the memory buffer pointed to by }{\i DockingStationInfo}{ in the following format:
\par }\trowd \trgaph108\trleft300\trkeep \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrdb\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2500\cltxlrtb \cellx4272\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrdb\brdrw15 
\clbrdrr\brdrs\brdrw15 \clshdng2500\cltxlrtb \cellx5676\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrdb\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2500\cltxlrtb \cellx7080\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb
\brdrdb\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2500\cltxlrtb \cellx8484\pard\plain \s87\qc\fi-360\li360\nowidctlpar\widctlpar\intbl\adjustright \b\fs20\lang1024\cgrid {Field\cell Offset\cell Length\cell Value\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {\row }\trowd \trgaph108\trleft300\trkeep \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx4272\clvertalt\clbrdrt
\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx5676\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx7080\clvertalt\clbrdrt
\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx8484\pard\plain \s86\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {Docking station location identifier\cell }\pard 
\s86\qc\nowidctlpar\widctlpar\intbl\adjustright {00h\cell }\pard \s86\nowidctlpar\widctlpar\intbl\adjustright {DWORD\cell Varies\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {\row }\pard\plain 
\s86\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {Serial number\cell }\pard \s86\qc\nowidctlpar\widctlpar\intbl\adjustright {04h\cell }\pard \s86\nowidctlpar\widctlpar\intbl\adjustright {DWORD\cell Varies\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {\row }\trowd \trgaph108\trleft300\trkeep \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx4272\clvertalt\clbrdrt
\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx5676\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx7080\clvertalt\clbrdrt
\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx8484\pard\plain \s86\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {Capabilities\cell }\pard 
\s86\qc\nowidctlpar\widctlpar\intbl\adjustright {08h\cell }\pard \s86\nowidctlpar\widctlpar\intbl\adjustright {WORD\cell Varies\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {\row }\pard 
\nowidctlpar\widctlpar\adjustright {
\par }{\b\i \tab Docking station location identifier:
\par }\pard \nowidctlpar\widctlpar\adjustright {\tab This field is the docking device location identifier.  The identifier should follow the EISA device \tab identifier format.  The docking device location identifier will allow system software to \tab 
differentiate between the types of docking stations and convenience bases that the base system \tab unit can be connected to.  This enables the system software to better determine the various \tab docked and undocked configuration states.  }{\i LocationId
}{ will be set to \tab UNKNOWN_DOCKING_IDENTIFIER (0xFFFFFFFF) for docking stations and/or convenience \tab bases that do not have a product identifier.
\par }\pard \nowidctlpar\widctlpar\adjustright {\b\i \tab Serial number:
\par }\pard \nowidctlpar\widctlpar\adjustright {\tab }{\i SerialNum }{is not required; however, if the docking station does not have a serial number, then 0 \tab should be returned in this parameter.}{\b\i 
\par \tab Capabilities:
\par }\pard \nowidctlpar\widctlpar\adjustright {\tab The Docking Capabilities bit field is defined as follows:
\par \tab \tab Bits 15:3 Reserved (0)\line \tab \tab Bit 2:1 -\tab 00=System should be powered off to dock or undock (Cold Docking)\line \tab \tab \tab 01=System supports Warm Docking/Undocking, system must be in suspend\line \tab \tab \tab 
10=System supports Hot Docking/Undocking, not required to be in suspend\line \tab \tab \tab 11=Reserved\line \tab \tab Bit 0 -\tab 0=Docking station does not provide support for controlling the \tab \tab \tab \tab \tab 
docking/undocking sequence (Surprise Style).\line \tab \tab \tab 1=Docking station provides support for controlling the docking/undocking \line \tab \tab \tab sequence (VCR Style).\line 
\par If the system supports docking and is unable to determine the docking station capabilities, this function will return UNABLE_TO_DETERMINE_DOCK_CAPABILITIES.  All other relevant information, such as the docking station identifier, will be returned in the d
ata structure.
\par If the system does not support docking, this function will return FUNCTION_NOT_SUPPORTED.  If the system supports docking, but is not currently docked, this function will return SYSTEM_NOT_DOC
KED and will not return any information about a docking station.
\par The }{\i BiosSelector}{
 parameter enables the system BIOS, if necessary, to update system variables that are contained in the system BIOS memory space.  If this function is called from protected mode, the caller must create a data segment descriptor using the 16-bit Protected M
ode data segment base address specified in the Plug and Play Installation Check data structure, a limit of 64KB, and the descriptor must be read/write capable  If this function is called from real mode, }{\i BiosSelector }{
should be set to the Real Mode 16-bit data segment address as specified in the Plug and Play Installation Check structure.  Refer to section 4.4 above for more information on the Plug and Play Installation Check Structure and the elements that make up the
 structure.
\par The function is available in real mode and 16-bit protected mode.
\par }{\b\fs24 Returns:}{\fs24 
\par }\pard\plain \s86\nowidctlpar\widctlpar\adjustright \fs20\lang1024\cgrid {0 if successful - SUCCESS
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\lang1024\cgrid {!0 if an error (Bit 7 set) or a warning occurred or the system is not currently docked (The function return codes are described in Appendix C)
\par The FLAGS and registers will be preserved, except for AX which contains the return code.
\par }{\b\fs24 Example:
\par }\pard \nowidctlpar\widctlpar\adjustright {The following example illustrates how the 'C' style call interface could be made from an assembly language module:
\par }\pard\plain \s86\nowidctlpar\widctlpar\adjustright \fs20\lang1024\cgrid {\fs18 \tab \tab .
\par }\pard \s86\nowidctlpar\widctlpar\adjustright {\fs18 \tab \tab .
\par \tab \tab .
\par }\pard \s86\nowidctlpar\widctlpar\adjustright {\fs18 \tab push\tab Bios Selector\line \tab push\tab segment/selector of DockingStationInfo\tab ; pointer to docking station info data structure\line \tab push\tab offset of DockingStationInfo\line \tab push
\tab GET_DOCK_INFO\tab \tab \tab ; Function 5
\par }\pard \s86\nowidctlpar\widctlpar\adjustright {\fs18 \tab call\tab FAR PTR entryPoint
\par \tab add\tab sp,8\tab \tab \tab \tab \tab ; Clean up stack
\par }\pard \s86\nowidctlpar\widctlpar\adjustright {\fs18 \tab cmp\tab ax,SUCCESS\tab \tab \tab \tab ; Function completed successfully?
\par }\pard \s86\nowidctlpar\widctlpar\adjustright {\fs18 \tab jne\tab error\tab \tab \tab \tab \tab ; No-handle error condition
\par \tab \tab .
\par }\pard \s86\nowidctlpar\widctlpar\adjustright {\fs18 \tab \tab .
\par }\pard\plain \s3\sb240\sa240\sl240\slmult0\keep\keepn\nowidctlpar\widctlpar\tx1440\outlinelevel2\adjustright \b\f38\cgrid {\f0\fs18 \page }{\f0 4.6.4  Function 6 - Reserved
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\lang1024\cgrid {This function has been reserved for future implementations and should return FUNCTION_NOT_SUPPORTED.
\par }\pard\plain \s3\sb240\sa240\sl240\slmult0\keep\keepn\nowidctlpar\widctlpar\tx1440\outlinelevel2\adjustright \b\f38\cgrid {\f0 4.6.5  Function 7 - Reserved
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\lang1024\cgrid {This function has been reserved for future implementations and should return FUNCTION_NOT_SUPPORTED.
\par }\pard\plain \s3\sb240\sa240\sl240\slmult0\keep\keepn\nowidctlpar\widctlpar\tx1440\outlinelevel2\adjustright \b\f38\cgrid {\f0 4.6.6  Function 8 - Reserved
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\lang1024\cgrid {This function has been reserved for future implementations and should return FUNCTION_NOT_SUPPORTED.
\par }\pard \nowidctlpar\widctlpar\adjustright {\fs18 
\par }\pard \nowidctlpar\widctlpar\adjustright {\fs18 \page 
\par }\pard\plain \s2\sb240\sa240\sl240\slmult0\keep\keepn\nowidctlpar\widctlpar\tx1440\outlinelevel1\adjustright \b\f38\fs28\cgrid {\f0 4.7  Extended Configuration Services}{\f0\ul 
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\lang1024\cgrid {This section describes the optional extended services provided by the System BIOS on Plug and Play platforms.
\par }\pard \nowidctlpar\widctlpar\adjustright {
The extended configuration services are a mechanism whereby the system software may specify the system resources assigned to devices that have been installed in the system.  This information will be maintained by the BIOS in some form of nonvolatile stora
ge.  Depending upon the amount of nonvolatile storage available to store system configuration informat
ion, one can either store detailed configuration information for all devices or limit the information to a description of the summary resource usage by the static ISA devices in the system.  In both cases, this information is to help the BIOS configure bo
ot devices during the Power On Self Test (POST) phase.  See }{\b\i Section 2.1.4}{ in the system POST area for a more complete description of the POST process.
\par }{\b\fs24 Get & Set Statically Allocated Resources}{
\par Functions 9 and Ah allow the OS to effectively reserve resource
s allocated by legacy cards in a system. This provides a resource usage map for the BIOS to use to avoid resource conflicts when allocating resources to other  devices.  Only summary resource usage information by the legacy ISA cards must be stored in non
volatile storage.  This information describes the cumulative usage of system resources by all legacy ISA cards but does not identify the specific resources used by each card.  The POST configuration software will use this information to avoid resource con
fl
icts when configuring boot devices.  This solution can be implemented with minimum NVRAM; however, it does afford  less control over the configuration.  The example in section 4.7.1 describes how Plug and Play ISA resource descriptor information can be st
ored compactly.  The storage structure definition is left completely up to the OEM.
\par The operating system should call function 9 to determine if the platform Plug and Play interface supports the ISA resource descriptors or not.  If this call returns without
 an error, it can be assumed that the platform is storing the ISA resource descriptor information in a proprietary bit map format.  If function calls 9 or 0Ah  return the USE_ESCD_SUPPORT error message, then the caller can assume that this platform suppor
ts the ESCD method of data storage.
\par }{\b\fs24 Read & Write Extended System Configuration Data (ESCD)}{
\par The ESCD data storage method allows OEMs to differentiate a platform with additional Plug and Play features.  Since the data format stores information about which d
evices are using what resources, it is possible to maintain an image of the Last Working Configuration of all know devices.   Additionally, system software can modify the ESCD at runtime and affect the configuration of devices for the next boot.  This all
ows bootable devices to be enabled/disabled and other devices to be locked into specific configurations.  The ESCD also provides detailed configuration information about static devices allowing the POST configuration software to avoid conflicts with these
 cards.  In general, the ESCD allows the Plug and Play system BIOS to more fully configure the system at power up;  this is important for platforms that must support non-Plug and Play operating systems.
\par The ESCD format describes every device in the system so storage requirements are much larger.  A typical platform requires 2-4KB of NVRAM.   The Plug and Play interface can support a function call  that allows the caller to Get NVRAM size attributes, and 
it supports two other functions that provide Read/Write access to the Extended System Configuration Data where it is stored in the NVRAM.  
\par The operating system should call function 9 to determine which data storage format this platform's Plug and Play interface supports.  If the function 9 call returns without an error, it can be assumed that the platform is storing the ISA resource descript
or information in a proprietary bit map format.  If function calls 9 or 0Ah  return the USE_ESCD_SUPPORT error message, then the caller can assume that this platform supports the ESCD method of data storage.
\par {\*\bkmkstart iA}{\*\bkmkend iA}More detailed and current information about the ESCD definition and format specification can be found in the}{\i  ESCD Specification.}{
\par }\pard\plain \s3\sb240\sa240\sl240\slmult0\keep\keepn\nowidctlpar\widctlpar\tx1440\outlinelevel2\adjustright \b\f38\cgrid {\f0 4.7.1  Function 9 - Set Statically Allocated Resource Information}{\f0\ul 
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\lang1024\cgrid {\b\fs24 Synopsis:
\par }{\i int FAR (*entryPoint)(Function, ResourceBlock, BiosSelector);\line int Function;\tab \tab \tab \tab /* PnP BIOS Function 9 */\line unsigned char FAR *ResourceBlock;\tab /* Block of statically allocated resources */\line unsigned int BiosSelector;
\tab \tab \tab /* PnP BIOS readable/writable selector */
\par }{\b\fs24 Description:
\par }{\i Optional.  }{
This function will allow system software to report the system resources that are being utilized by the static ISA devices installed in the system.  The system software must pass a complete list of system resources used by ALL of the legacy ISA devices tha
t are not located on the system board.  Therefore, any time a legacy ISA device is added or removed from the system, the system software must construct a new resource map and pass the information to the system BIOS by making this function ca
ll.  This information is important to the Plug and Play BIOS POST functionality for achieving the ability to bootstrap the operating system from a Plug and Play boot device by allowing the Plug and Play BIOS to configure the boot device around the legacy 
ISA devices.  The resources allocated to the legacy ISA devices in the system are reported in the }{\i ResourceBlock}{ parameter.  The format of the data contained in the block follows the format defined in the }{\i Plug and Play ISA Specification }{
under the section labeled }{\i Plug and Play Resources.}{
  This data is provided as a series of data structures with each structure having a unique tag or identifier.  The resource descriptors supported by this function are the descriptors that describe IRQ, DMA, I/O addresses, and memory resources.  The resour
ce information specified in this block must be terminated with an }{\i END_TAG }{resource descriptor.
\par }\pard \nowidctlpar\widctlpar\adjustright {The }{\i BiosSelector}{ parameter enables the system BIOS, if necessary, to update system variables that are contained in the system BIOS m
emory space.  If this function is called from protected mode, the caller must create a data segment descriptor using the 16-bit Protected Mode data segment base address specified in the Plug and Play Installation Check data structure, a limit of 64KB, and
 the descriptor must be read/write capable.  If this function is called from real mode, }{\i BiosSelector }{
should be set to the Real Mode 16-bit data segment address as specified in the Plug and Play Installation Check structure.  Refer to section 4.4 above for m
ore information on the Plug and Play Installation Check Structure and the elements that make up the structure.
\par If this function returns USE_ESCD_SUPPORT, then reporting resources allocated to devices to the system BIOS must be handled through the interface defined by the }{\i ESCD Specification }{(see sections 4.7.4 - 4.7.6, functions 41h, 42h and 43h.).
\par This function is available in real mode and 16-bit protected mode.
\par }{\b\fs24 Returns:}{\fs24 
\par }\pard \nowidctlpar\widctlpar\adjustright {0 if successful - SUCCESS\line !0 if an error (Bit 7 set) or a warning occurred or no pending events - error code (The function return codes are described in Appendix C)
\par }\pard \nowidctlpar\widctlpar\adjustright {The FLAGS and registers will be preserved, except for AX which contains the return code.
\par }{\b\fs24 Example:
\par }\pard \nowidctlpar\widctlpar\adjustright {The following example illustrates how the 'C' style call interface could be made from an assembly language module:
\par }\pard\plain \s86\nowidctlpar\widctlpar\adjustright \fs20\lang1024\cgrid {\tab \tab .
\par }{\fs18 \tab \tab .
\par }\pard \s86\nowidctlpar\widctlpar\adjustright {\fs18 \tab \tab .
\par }\pard \s86\nowidctlpar\widctlpar\adjustright {\fs18 \tab push\tab Bios Selector\line \tab push\tab segment/selector of the Resource Block\tab ; Pointer to the data structure of isa \tab resources
\par }\pard \s86\nowidctlpar\widctlpar\adjustright {\fs18 \tab push\tab offset of Resource Block
\par \tab push\tab SET_STATICALLY_ALLOCATED_RESOURCES\tab \tab ; Function 9
\par }\pard \s86\nowidctlpar\widctlpar\adjustright {\fs18 \tab call\tab FAR PTR entryPoint
\par }\pard \s86\nowidctlpar\widctlpar\adjustright {\fs18 \tab add\tab sp,8\tab \tab \tab \tab \tab ; Clean up stack
\par \tab cmp\tab ax,SUCCESS\tab \tab \tab \tab ; Function completed successfully?
\par }\pard \s86\nowidctlpar\widctlpar\adjustright {\fs18 \tab jne\tab error\tab \tab \tab \tab \tab ; No-handle error condition
\par }\pard \s86\nowidctlpar\widctlpar\adjustright {\fs18 \tab \tab .
\par \tab \tab .
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\lang1024\cgrid {\fs18 \tab \tab .
\par }\pard \nowidctlpar\widctlpar\adjustright {
A BIOS implementor is only required to follow the interface described by this function.  The format of the data passed by the system software must follow the Plug and Play ISA resource descriptor definition.  How the statically allocated resource informat
ion is actually stored is left up to the BIOS implementor.  An example of how the information could be stored more compactly than the Plug and Play ISA resource descriptors is as follows:
\par }\pard \nowidctlpar\widctlpar\adjustright {\tab IRQ\tab 2 Bytes - Bits set indicate IRQ used by unconfigurable ISA device\line \tab DMA\tab 1 Byte - Bits set indicate DMA used by unconfigurable ISA device\line \tab I/O \tab 
24 Bytes - Bits set indicate I/O addresses used (100h-3ffh).  Assumes 4 ports used per \tab \tab \tab I/O address bit set\line \tab Memory 640k to 1Mg \tab 3 Bytes - Represented in 16k blocks\line \tab Memory 1Mg to 16Mg\tab 
2 Bytes - Represented in 1Mg increments.
\par Storing the information this way would allow the system resources used by unconfigurable ISA devices to be contained in 32 bytes.
\par }{\b\i Note: this is only an example.  It is completely up to the BIOS vendor to choose an appropriate format  for storing the data, which means it could possibly be stored in less than 32 bytes or require more than 32 bytes.}{
\par }\pard\plain \s3\sb240\sa240\sl240\slmult0\keep\keepn\nowidctlpar\widctlpar\tx1440\outlinelevel2\adjustright \b\f38\cgrid {\f0 \page 4.7.2  Function 0Ah - Get Statically Allocated Resource Information}{\f0\ul 
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\lang1024\cgrid {\b\fs24 Synopsis:
\par }{\i int FAR (*entryPoint)(Function, ResourceBlock, BiosSelector);\line int Function;\tab \tab \tab \tab /* PnP BIOS Function 0Ah */\line unsigned char FAR *ResourceBlock;\tab /* Block of resources statically allocated to devices */\line 
unsigned int BiosSelector;\tab \tab \tab /* PnP BIOS readable/writable selector */
\par }{\b\fs24 Description:
\par }{\i Optional.  }{This function will return the system resources that are being utilized by the legacy ISA devices that are installed in the system.  These system resources are the resources that have been reported to the system BIOS through the }{\i 
Set Allocated ISA Resource Info}{ function.  The resources allocated to the legacy ISA devices in the system are reported in the }{\i ResourceBlock }{
parameter.  It is important to note that the information returned represents the resource usage rounded up to the nearest granularity range supported by the system BIOS and not the actual resources used by the legacy ISA devices in the system.  It is reco
mmended that the system software keep track of the system resources used by legacy ISA cards in order to account for the exact system resources usage of the legacy ISA cards installed in the system.  The format
 of the data contained in the block follows the format defined in the }{\i Plug and Play ISA Specification }{under the section labeled }{\i Plug and Play Resources}{
.  This data is provided as a series of data structures with each structure having a unique tag or identifier.  The }{\i ResourceBlock}{
 must be a minimum of 2 Kbytes to ensure that there is adequate space for the system BIOS to return the legacy ISA resource information.
\par }\pard \nowidctlpar\widctlpar\adjustright {The }{\i BiosSelector}{ parameter enables the system BIOS, if necessary, to update system variables t
hat are contained in the system BIOS memory space.  If this function is called from protected mode the caller must create a data segment descriptor using the 16-bit Protected Mode data segment base address specified in the Plug and Play Installation Check
 data structure, a limit of 64k, and the descriptor must be read/write capable.  If this function is called from real mode, }{\i BiosSelector }{
should be set to the Real Mode 16-bit data segment address as specified in the Plug and Play Installation Check structur
e.  Refer to section 4.4 above for more information on the Plug and Play Installation Check Structure and the elements that make up the structure.
\par If this function returns USE_ESCD_SUPPORT, then accessing the information describing the resources allocated to devices to the system BIOS must be handled through the interface defined by the }{\i ESCD Specification.}{  Refer to the }{\i 
ESCD Specification }{for a complete description of the interfaces to support the ESCD as well as the format of the ESCD.
\par This function is available in real mode and 16-bit protected mode.
\par }{\b\fs24 Returns:}{\fs24 
\par }\pard \nowidctlpar\widctlpar\adjustright {0 if successful - SUCCESS\line !0 if an error (Bit 7 set) or a warning occurred or no pending events - error code (The function return codes are described in Appendix C)
\par }\pard \nowidctlpar\widctlpar\adjustright {The FLAGS and registers will be preserved, except for AX which contains the return code.
\par }{\b\fs24 \page Example:
\par }\pard \nowidctlpar\widctlpar\adjustright {The following example illustrates how the 'C' style call interface could be made from an assembly language module:
\par }\pard\plain \s86\nowidctlpar\widctlpar\adjustright \fs20\lang1024\cgrid {\tab \tab .
\par \tab push\tab Bios Selector\line \tab push\tab segment/selector of the Resource Block\tab ; Pointer to the data struct of isa resources\line \tab push\tab offset of Resource Block
\par \tab push\tab GET_STATICALLY_ALLOCATED_RESOURCES\tab \tab ; Function 0Ah
\par \tab call\tab FAR PTR entryPoint
\par \tab add\tab sp,8\tab \tab \tab \tab \tab ; Clean up stack
\par \tab cmp\tab ax,SUCCESS\tab \tab \tab \tab ; Function completed successfully?
\par \tab jne\tab error\tab \tab \tab \tab \tab ; No-handle error condition
\par \tab \tab .
\par }\pard\plain \s3\sb240\sa240\sl240\slmult0\keep\keepn\nowidctlpar\widctlpar\tx1440\outlinelevel2\adjustright \b\f38\cgrid {\f0 4.7.3  Function 40h - Get Plug & Play ISA Configuration Structure}{\f0\ul 
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\lang1024\cgrid {\b\fs24 Synopsis:
\par }{\i int FAR (*entryPoint)(Function, Configuration, BiosSelector);\line int Function;\tab \tab \tab \tab /* PnP BIOS Function 40h */\line unsigned char FAR *Configuration;\tab /* Address of caller's config. structure buffer*/\line 
unsigned int BiosSelector;\tab \tab \tab /* PnP BIOS readable/writable selector */ 
\par }{\b\fs24 Description:
\par }{\i Required.  }{
This function is used to get the Plug and Play ISA Configuration structure.  The Plug and Play ISA Configuration data structure contains configuration information specific to ISA Plug and Play support.  This function will copy the data structure to the ca
ller's memory buffer specified by }{\i Configuration}{.  A system without any ISA bus capabilities will return
 the FUNCTION_NOT_SUPPORTED error code.  When the ISA bus is present, the fields in this data structure will be set with the appropriate values.  If the system BIOS did not identify any Plug and Play ISA cards in the system during POST, then the }{\i 
Total number of Card Select Numbers}{ field will be zero and the value in the }{\i ISA Read Data Port}{ field {\*\bkmkstart iB}{\*\bkmkend iB}is invalid and must not be used by system software.  
\par }\pard \nowidctlpar\widctlpar\adjustright {On systems with a dynamic ISA bus, like portables, function 40h will be more flexible. When an ISA bus is pres
ent, the information returned by function 40h will always be valid after a cold boot.  On a cold boot with no ISA bus present, function 40h will return zeros.  After an ISA warm/hot dock, the function 40h information will also be valid, if the plug and pl
ay BIOS isolates and enumerates the plug and play adapter cards before returning control to the plug and play operating system.  If the BIOS does not re-enumerate after an ISA warm/hot dock event, then the information returned by function 40h will be zero
s.  After an ISA undock event, this information will also be zeros.
\par }{The format of the Plug and Play ISA Configuration structure is defined as follows:
\par }\trowd \trgaph108\trleft300\trkeep \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrdb\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2500\cltxlrtb \cellx4272\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrdb\brdrw15 
\clbrdrr\brdrs\brdrw15 \clshdng2500\cltxlrtb \cellx5316\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrdb\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2500\cltxlrtb \cellx6720\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb
\brdrdb\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2500\cltxlrtb \cellx8124\pard\plain \s87\qc\fi-360\li360\nowidctlpar\widctlpar\intbl\adjustright \b\fs20\lang1024\cgrid {Field\cell Offset\cell Length\cell Value\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {\row }\trowd \trgaph108\trleft300\trkeep \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx4272\clvertalt\clbrdrt
\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx5316\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx6720\clvertalt\clbrdrt
\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx8124\pard\plain \s86\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {Structure Revision\cell 00h\cell BYTE\cell 01\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {\row }\pard\plain \s86\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {Total number of Card Select Numbers (CSNs) assigned\cell 01h\cell BYTE\cell Varies\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {\row }\pard\plain \s86\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {ISA Read Data Port\cell 02h\cell WORD\cell Varies\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {\row }\trowd \trgaph108\trleft300\trkeep \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx4272\clvertalt\clbrdrt
\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx5316\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx6720\clvertalt\clbrdrt
\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx8124\pard\plain \s86\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {Reserved\cell 04h\cell WORD\cell 0\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {\row }\pard \nowidctlpar\widctlpar\adjustright {
\par }{\b\i 
\par }\pard \nowidctlpar\widctlpar\adjustright {\b\i Structure Revision:
\par }{This is an ordinal value that indicates the revision number of this structure only and does not imply a level of compliance with the Plug and Play BIOS version.
\par }\pard \nowidctlpar\widctlpar\adjustright {\b\i Total number of Card Select Numbers:}{
\par This field specifies the total number of CSNs assigned to ISA Plug and Play cards by the system BIOS during the Power-On Self Test (POST).
\par }{\b\i ISA Read Data Port:
\par }\pard \nowidctlpar\widctlpar\adjustright {The ISA Read Data Port is used to read information from the Plug and Play registers.  The value represented here is the I/O port that was determined by the system BIOS to not conflict with another ISA I/O port.  
}{\i Refer to the ISA Plug and Play Specification for more information on the ISA Read Data Port.
\par }{The }{\i BiosSelector}{
 parameter enables the system BIOS, if necessary, to update system variables that are contained in the system BIOS memory space.  If this function is called from protected mode, the caller must create a data segment descriptor using the 16-bit Protected M
ode data segment base address specified in the Plug and Play Installation Check data structure, a limit of 64KB, and the descriptor must be read/write capable.  If this function is called from real mode, }{\i BiosSelector }{
should be set to the Real Mode 16-bit data segment address as specified in the Plug and Play Installation Check structure.  Refer to section 4.4 above for more information on the Plug and Play Installation Check Structure and the elements that make up the
 structure.
\par }\pard \nowidctlpar\widctlpar\adjustright {This function is available in real mode and 16-bit protected mode.
\par }{\b\fs24 Returns:}{\fs24 
\par }\pard \nowidctlpar\widctlpar\adjustright {0 if successful - SUCCESS\line !0 if an error (Bit 7 set) or a warning occurred - error code (The function return codes are described in Appendix C)
\par }\pard \nowidctlpar\widctlpar\adjustright {The FLAGS and registers will be preserved, except for AX which contains the return code.
\par }{\b\fs24 Example:
\par }\pard \nowidctlpar\widctlpar\adjustright {The following example illustrates how the 'C' style call interface could be made from an assembly language module:
\par }\pard \nowidctlpar\widctlpar\adjustright {\tab push\tab Bios Selector\line \tab push\tab segment/selector of Config. structure buffer ; pointer to configuration data buffer\line \tab push\tab offset of Configuration structure buffer\line \tab push\tab 
GET_ISA_CONFIG_STRUC\tab \tab ; Function 40h\line \tab call\tab FAR PTR entryPoint \line \tab add\tab sp,8\tab \tab \tab \tab \tab ; Clean up stack\line \tab cmp\tab ax,SUCCESS\tab \tab \tab \tab ; Function completed successfully?\line \tab jne\tab error
\tab \tab \tab \tab \tab ; No-handle error condition\line \tab \tab .\line }{\fs18 \tab \tab .\line 
\par }\pard\plain \s3\sb240\sa240\sl240\slmult0\keep\keepn\nowidctlpar\widctlpar\tx1440\outlinelevel2\adjustright \b\f38\cgrid {\f0 4.7.4  Function 41h - Get Extended System Configuration Data (ESCD) Info
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\lang1024\cgrid {\b\fs24 Synopsis:}{\b 
\par }\pard \li360\nowidctlpar\widctlpar\adjustright {\i {\*\bkmkstart iC}{\*\bkmkend iC}int FAR (*entryPoint)(Function, MinESCDWriteSize, ESCDSize, NVStorageBase, \tab \tab \tab \tab \tab \tab BiosSelector);\line int Function;\tab \tab \tab \tab \tab 
/* PnP BIOS Function 041h */\line \line unsiged int FAR *MinESCDWriteSize;\tab \tab /* Minimum buffer size in bytes for writing to NVS */\tab 
\par unsigned int FAR *ESCDSize;\tab \tab \tab /* Size allocated for the ESCD... */\line \tab \tab \tab \tab \tab \tab /* ...within the nonvolatile storage block */\line unsigned long FAR *NVStorageBase;\tab \tab /* 32-bit physical base address for.*/\line 
\tab \tab \tab \tab \tab \tab /* .mem mapped nonvolatile storage media */\line unsigned int BiosSelector;\tab \tab \tab /* PnP BIOS readable/writable selector */ 
\par }\pard \nowidctlpar\widctlpar\adjustright {\b\fs24 Description:}{\b 
\par }\pard \nowidctlpar\widctlpar\adjustright {\i Optional.  }{
This function provides information about the nonvolatile storage on the system that contains the Extended System Configuration Data (ESCD).  It returns the size, in bytes, of the minimum buffer required for writing to NVS in }{\i MinESCDWriteSize}{
, the maximum size, in bytes, of the block within the nonvolatile storage area allocated specifically to the ESCD in }{\i ESCDSize}{, and if the nonvolatile storage is memory mapped, the 32-bit absolute physical base address will be returned in }{\i 
NVStorageBase}{
.  The physical base address of the memory mapped nonvolatile storage will allow the caller to construct a 16-bit data segment descriptor with a limit of 64K and read/write access.  This will enable the Plug and Play system BIOS to read and write the memo
ry mapped nonvolatile storage in a protected mode environment.  If the nonvolatile storage is not memory mapped the value returned in }{\i NVStorageBase}{ should be 0.  It is assumed that the size of the nonvolatile storage that contains the ESCD 
{\*\bkmkstart iD}{\*\bkmkend iD}will not exceed 32K bytes.   
\par }\pard \nowidctlpar\widctlpar\adjustright {Refer to the }{\i ESCD Specification }{for a complete description of the interfaces to support the ESCD as well as the format of the ESCD.
\par }{\fs18 
\par }\pard\plain \s3\sb240\sa240\sl240\slmult0\keep\keepn\nowidctlpar\widctlpar\tx1440\outlinelevel2\adjustright \b\f38\cgrid {\f0 4.7.5   Function 42h - Read Extended System Configuration Data (ESCD)
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\lang1024\cgrid {\b\fs24 Synopsis:}{\b 
\par }\pard \li360\nowidctlpar\widctlpar\adjustright {\i int FAR (*entryPoint)(Function, ESCDBuffer, ESCDSelector, BiosSelector)\line int Function;\tab \tab \tab \tab \tab /* PnP BIOS Function 042h */\line char FAR *ESCDBuffer;\tab \tab \tab 
/* Addr of caller's buffer for storing ESCD */\line unsigned int ESCDSelector;\tab \tab \tab /* ESCD readable/writable selector */ \line unsigned int BiosSelector;\tab \tab \tab /* PnP BIOS readable/writable selector */ 
\par }\pard \nowidctlpar\widctlpar\adjustright {\b\fs24 Description:}{\b 
\par }{\i Optional.  }{This function is used to read the ESCD data from nonvolatile storage on the system into the buffer specified by }{\i ESCDBuffer.}{
  The entire ESCD will be placed into the buffer.  It is the responsibility of the caller to ensure that the buffer is large enough to store the entire ESCD.  The caller should use the output from Function 41 (the }{\i ESCDSize}{
 field) when calculating the size of the }{\i ESCDBuffer}{
.  The system BIOS will return the entire ESCD, including information about system board devices.  The system board device configuration information will be contained in the slot 0 portion of the ESCD.   The caller can determine the size of the data in th
e ESCD from the }{\i ESCD Configuration Header Structure}{.   In protected mode, the }{\i ESCDSelector}{ has base = }{\i NVStorageBase}{ and limit of at least }{\i NVStorageSize.}{ In real mode, the }{\i ESCDSelector}{ is a segment that points to }{\i 
NVStorageBase.
\par }{Refer to the }{\i ESCD Specification }{for a complete description of the interfaces to support the ESCD as well as the format of the ESCD.  
\par }\pard\plain \s3\sb240\sa240\sl240\slmult0\keep\keepn\nowidctlpar\widctlpar\tx1440\outlinelevel2\adjustright \b\f38\cgrid {\f0 4.7.6   Function 43h - Write Extended System Configuration Data (ESCD)
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\lang1024\cgrid {\b\fs24 Synopsis:}{\b 
\par }\pard \li360\nowidctlpar\widctlpar\adjustright {\i int FAR (*entryPoint)(Function, ESCDBuffer, ESCDSelector, BiosSelector);\line int Function;\tab \tab \tab \tab /* PnP BIOS Function 043h */\line char FAR *ESCDBuffer;\tab \tab 
/* Buffer containing complete ESCD to write... */\line \tab \tab \tab \tab \tab /* ...to nonvolatile storage */\line unsigned int ESCDSelector;\tab \tab /* ESCD readable/writable selector */ \line unsigned int BiosSelector;\tab \tab 
/* PnP BIOS readable/writable selector */ 
\par }\pard \nowidctlpar\widctlpar\adjustright {\b\fs24 Description:}{\b 
\par }{\i Optional.  }{This function will write the Extended Static Configuration Data (ESCD) contained in the }{\i ESCDBuffer }{
to nonvolatile storage on the system.  The data contained in the caller's buffer must contain a complete block of ESCD structures describing the configuration information for devices on the system.  {\*\bkmkstart iE}{\*\bkmkend iE}The
 caller should use the output from Function 41 (the MinESCDWriteSize field) when calculating the size of the }{\i ESCDBuffer}{.  The system BIOS can determine the size of the data in the ESCD structure from the }{\i ESCD Configuration Header Structure }{
within the caller's ESCD buffer.   
\par }\pard \nowidctlpar\widctlpar\adjustright {Refer to the }{\i ESCD Specification }{for a complete description of the interfaces to support the ESCD as well as the format of the ESCD.
\par }\pard\plain \s2\sb240\sa240\sl240\slmult0\keep\keepn\nowidctlpar\widctlpar\tx1440\outlinelevel1\adjustright \b\f38\fs28\cgrid {\f0 \page 4.8  Power Management Services}{\f0\ul 
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\lang1024\cgrid {The following subsections describe the Plug and Play support for allowing interaction with Advanced Power Management (APM) 1.1 and greater.
\par }\pard\plain \s3\sb240\sa240\sl240\slmult0\keep\keepn\nowidctlpar\widctlpar\tx1440\outlinelevel2\adjustright \b\f38\cgrid {\f0 4.8.1  Function 0Bh - Get APM ID Table}{\f0\ul 
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\lang1024\cgrid {\b\fs24 Synopsis:
\par }\pard \nowidctlpar\widctlpar\adjustright {\i int FAR (*entryPoint)(Function, Bufsize, ApmIdTable, BiosSelector);\line int Function;\tab \tab \tab \tab /* PnP BIOS Function 0Bh */\line unsigned int FAR *BufSize;\tab \tab 
/* Size of buffer to copy APM ID table to */\line unsigned char FAR *ApmIdTable;\tab \tab /* Address of caller's buffer for the table */\line unsigned int BiosSelector;\tab \tab \tab /* PnP BIOS readable/writable selector */ 
\par }\pard \nowidctlpar\widctlpar\adjustright {\b\fs24 Description:
\par }\pard \nowidctlpar\widctlpar\adjustright {\i Required for Power Management.  }{This 
function will copy the table of APM 1.1 (or greater) device identifier to Plug and Play device identifier mappings to the buffer specified by the caller.  This allows the operating system to use the APM interface to perform power management on individual 
devices controlled by the system BIOS.  If }{\i BufSize }{
indicates that the buffer is not large enough to contain the entire table, the system BIOS will return BUFFER_TOO_SMALL and the size of the buffer required to contain the entire table will be returned in the caller's }{\i BufSize}{
 parameter.  Therefore, the caller can call this function with }{\i BufSize}{ equal to 0 to determine the size of the buffer it needs to allocate for the APM identifier table.  The }{\i apmIDTable }{
argument contains the pointer to the caller's memory buffer.  If the buffer is large enough, on return }{\i apmIDTable}{ will contain the APM identifier table.  Each entry in the table will be specified in the following format:
\par }\trowd \trgaph108\trleft300\trkeep \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrdb\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2500\cltxlrtb \cellx4272\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrdb\brdrw15 
\clbrdrr\brdrs\brdrw15 \clshdng2500\cltxlrtb \cellx5676\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrdb\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2500\cltxlrtb \cellx7080\pard\plain 
\s87\qc\fi-360\li360\nowidctlpar\widctlpar\intbl\adjustright \b\fs20\lang1024\cgrid {Field\cell }\pard \s87\qc\fi-360\li360\nowidctlpar\widctlpar\intbl\adjustright {Length\cell }\pard \s87\qc\fi-360\li360\nowidctlpar\widctlpar\intbl\adjustright {Value
\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {\row }\trowd \trgaph108\trleft300\trkeep \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx4272\clvertalt
\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx5676\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx7080\pard\plain 
\s86\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {Device identifier\cell }\pard \s86\nowidctlpar\widctlpar\intbl\adjustright {DWORD\cell }\pard \s86\nowidctlpar\widctlpar\intbl\adjustright {Varies\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {\row }\trowd \trgaph108\trleft300\trkeep \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx4272\clvertalt\clbrdrt
\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx5676\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx7080\pard\plain 
\s86\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {{\*\bkmkstart iF}{\*\bkmkend iF}APM 1.1 identifier (version 1.1 or greater)\cell }\pard \s86\nowidctlpar\widctlpar\intbl\adjustright {WORD\cell }\pard 
\s86\nowidctlpar\widctlpar\intbl\adjustright {Varies\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {\row }\pard \nowidctlpar\widctlpar\adjustright {
\par }\pard \nowidctlpar\widctlpar\adjustright {\b\i \tab Device Identifier:
\par }\pard\plain \s89\fi-360\li1080\sb120\sl260\slmult0\nowidctlpar\widctlpar\tx1440\adjustright \f4\fs20\lang1024\cgrid {\f0 \tab 
This field is the Plug and Play device identifier.  The Logical Device ID provides a mechanism for uniquely identifying multiple logical devices embedded in a single physical board.  The format of the logical device ID is composed of }{\f0\lang1033 
three character compressed ASCII EISA ID and a manufacturer specific device code.}{\f0\fs22\lang1033 
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\lang1024\cgrid {
\par }\pard \nowidctlpar\widctlpar\adjustright {\b\i \tab APM identifier:}{
\par }\pard \nowidctlpar\widctlpar\adjustright {\tab This element specifies the corresponding APM device identifier.}{\fs18 
\par }\pard \nowidctlpar\widctlpar\adjustright {An APM identifier table with multiple entries would be described as follows:
\par }\trowd \trgaph108\trleft2172\trkeep \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrdb\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng2500\cltxlrtb \cellx6144\pard\plain \s87\qc\fi-360\li360\nowidctlpar\widctlpar\intbl\adjustright 
\b\fs20\lang1024\cgrid {Field\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {\row }\trowd \trgaph108\trleft2172\trkeep \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 
\cltxlrtb \cellx6144\pard\plain \s86\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {Device identifier #1\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {\row }\pard\plain 
\s86\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {APM identifier #1\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {\row }\pard\plain \s86\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {
Device identifier #2\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {\row }\pard\plain \s86\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {APM identifier #2\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {\row }\pard\plain \s86\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {\b         :\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {\b \row 
}\pard\plain \s86\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {\b         :\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {\b \row }\pard\plain \s86\nowidctlpar\widctlpar\intbl\adjustright 
\fs20\lang1024\cgrid {Device identifier #n\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {\row }\trowd \trgaph108\trleft2172\trkeep \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr
\brdrs\brdrw15 \cltxlrtb \cellx6144\pard\plain \s86\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {APM identifier #n\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {\row }\pard 
\nowidctlpar\widctlpar\adjustright {
\par This call supports APM version 1.1 or greater.  The APM interface INT 2Fh supports a get version call.
\par The }{\i BiosSelector}{ parameter enables the system BIOS, if necessary, to update system variables that are contained in the system BIOS memory space.  If this function is called from protected mode the caller must 
create a data segment descriptor using the 16-bit Protected Mode data segment base address specified in the Plug and Play Installation Check data structure, a limit of 64K, and the descriptor must be read/write capable.  If this function is called from re
al mode, }{\i BiosSelector }{
should be set to the Real Mode 16-bit data segment address as specified in the Plug and Play Installation Check structure.  Refer to section 4.4 above for more information on the Plug and Play Installation Check Structure and the eleme
nts that make up the structure.
\par This function is available in real mode and 16-bit protected mode.
\par Example scenario:  An operating system provides a device driver level-interface to both the Plug and Play BIOS as well as the APM 1.1 (or greater) interface.  An OEM or third party wishes to write a Plug and Play device driver for a device built into the 
system in order to provide enhancements available through operating-system services.  However, he also wishes to power manage the device using support alrea
dy available in the machine's APM 1.1 implementation.  This function provides a means for the device driver to determine which Plug and Play identifiers  have corresponding power management support through an APM 1.1 device identifier.
\par }{\b\fs24 Returns:}{\fs24 
\par }\pard \nowidctlpar\widctlpar\adjustright {0 if successful - SUCCESS\line !0 if an error (Bit 7 set) or a warning occurred - error code (The function return codes are described in Appendix C)
\par }\pard \nowidctlpar\widctlpar\adjustright {The FLAGS and registers will be preserved, except for AX which contains the return code.
\par }{\b\fs24 Example:
\par }\pard \nowidctlpar\widctlpar\adjustright {The following example illustrates how the 'C' style call interface could be made from an assembly language module:
\par }\pard \nowidctlpar\widctlpar\adjustright {\fs18 \tab \tab .\line \tab \tab .\line \tab \tab .\line \tab push\tab Bios Selector\line \tab push\tab segment/selector of APM Id table\tab \tab ; pointer to APM Id table buffer\line \tab push\tab 
offset of APM Id table\line \tab push\tab segment/selector of table buffer size\tab \tab ; pointer to APM Id table buffer size \line \tab push\tab offset of APM Id table buffer size\line \tab push\tab GET_APM_TABLE\tab \tab \tab ; Function 0Bh\line \tab 
call\tab FAR PTR entryPoint \line \tab add\tab sp,12\tab \tab \tab \tab \tab ; Clean up stack\line \tab cmp\tab ax,SUCCESS\tab \tab \tab \tab ; Function completed successfully?\line \tab jne\tab error\tab \tab \tab \tab \tab ; No-handle error condition
\line \tab \tab .\line \tab \tab .\line \tab \tab .
\par }\pard\plain \s1\sb240\sa240\keep\keepn\nowidctlpar\widctlpar\tlul\tx8640\tx9504\outlinelevel0\adjustright \b\f38\fs36\cgrid {\f0 \page Appendix A: Generic Option ROM Headers\tab 
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\lang1024\cgrid {
\par }\pard\plain \s66\keepn\nowidctlpar\widctlpar\adjustright \fs20\lang1024\cgrid {\b\fs28 Generic Option ROM Header expansion}{
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\lang1024\cgrid {(Offsets are all based from the beginning of the Header)
\par }\trowd \trgaph108\trleft-108\trkeep \clvertalt\clbrdrt\brdrs\brdrw30 \clbrdrl\brdrs\brdrw30 \clbrdrb\brdrs\brdrw30 \clbrdrr\brdrs\brdrw15 \clshdng2500\cltxlrtb \cellx888\clvertalt\clbrdrt\brdrs\brdrw30 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw30 
\clbrdrr\brdrs\brdrw15 \clshdng2500\cltxlrtb \cellx2124\clvertalt\clbrdrt\brdrs\brdrw30 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw30 \clbrdrr\brdrs\brdrw15 \clshdng2500\cltxlrtb \cellx3816\clvertalt\clbrdrt\brdrs\brdrw30 \clbrdrl\brdrs\brdrw15 \clbrdrb
\brdrs\brdrw30 \clbrdrr\brdrs\brdrw15 \clshdng2500\cltxlrtb \cellx7680\clvertalt\clbrdrt\brdrs\brdrw30 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw30 \clbrdrr\brdrs\brdrw30 \clshdng2500\cltxlrtb \cellx8772\pard 
\qc\keepn\nowidctlpar\widctlpar\intbl\adjustright {\b Offset\cell }\pard \qc\keepn\nowidctlpar\widctlpar\intbl\adjustright {\b Length\cell }\pard \qc\keepn\nowidctlpar\widctlpar\intbl\adjustright {\b Value\cell }\pard 
\keepn\nowidctlpar\widctlpar\intbl\adjustright {\b Description\cell }\pard \keepn\nowidctlpar\widctlpar\intbl\adjustright {\b \cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\b \row }\trowd \trgaph108\trleft-108\trkeep \clvertalt\clbrdrl
\brdrs\brdrw30 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx888\clvertalt\clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx2124\clvertalt\clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr
\brdrs\brdrw15 \cltxlrtb \cellx3816\clvertalt\clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx7680\clvertalt\clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw30 \cltxlrtb \cellx8772\pard 
\qc\keepn\nowidctlpar\widctlpar\intbl\adjustright {0h\cell }\pard \qc\keepn\nowidctlpar\widctlpar\intbl\adjustright {DWORD\cell }\pard \qc\keepn\nowidctlpar\widctlpar\intbl\adjustright {$??? (ASCII)\cell }\pard 
\keepn\nowidctlpar\widctlpar\intbl\adjustright {Signature\cell }\pard \keepn\nowidctlpar\widctlpar\intbl\adjustright {Generic\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\trowd \trgaph108\trleft-108\trkeep \clvertalt\clbrdrt\brdrs\brdrw15 
\clbrdrl\brdrs\brdrw30 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx888\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx2124\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl
\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx3816\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx7680\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl
\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw30 \cltxlrtb \cellx8772\pard \qc\keepn\nowidctlpar\widctlpar\intbl\adjustright {04h\cell }\pard \qc\keepn\nowidctlpar\widctlpar\intbl\adjustright {BYTE\cell }\pard 
\qc\keepn\nowidctlpar\widctlpar\intbl\adjustright {Varies\cell }\pard \keepn\nowidctlpar\widctlpar\intbl\adjustright {Structure Revision\cell }\pard \keepn\nowidctlpar\widctlpar\intbl\adjustright {Generic\cell }\pard 
\nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \qc\keepn\nowidctlpar\widctlpar\intbl\adjustright {05h\cell }\pard \qc\keepn\nowidctlpar\widctlpar\intbl\adjustright {BYTE\cell }\pard \qc\keepn\nowidctlpar\widctlpar\intbl\adjustright {Varies\cell 
}\pard \keepn\nowidctlpar\widctlpar\intbl\adjustright {Length (in 16 byte increments)\cell }\pard \keepn\nowidctlpar\widctlpar\intbl\adjustright {Generic\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard 
\qc\keepn\nowidctlpar\widctlpar\intbl\adjustright {06h\cell }\pard \qc\keepn\nowidctlpar\widctlpar\intbl\adjustright {WORD\cell }\pard \qc\keepn\nowidctlpar\widctlpar\intbl\adjustright {Varies\cell }\pard \keepn\nowidctlpar\widctlpar\intbl\adjustright {
Offset of next Header (0000 if none)\cell }\pard \keepn\nowidctlpar\widctlpar\intbl\adjustright {Generic\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \qc\keepn\nowidctlpar\widctlpar\intbl\adjustright {08h\cell }\pard 
\qc\keepn\nowidctlpar\widctlpar\intbl\adjustright {BYTE\cell }\pard \qc\keepn\nowidctlpar\widctlpar\intbl\adjustright {0FFFFh\cell }\pard \keepn\nowidctlpar\widctlpar\intbl\adjustright {Reserved\cell }\pard \keepn\nowidctlpar\widctlpar\intbl\adjustright {
Generic\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \qc\keepn\nowidctlpar\widctlpar\intbl\adjustright {09h\cell }\pard \qc\keepn\nowidctlpar\widctlpar\intbl\adjustright {BYTE\cell }\pard 
\qc\keepn\nowidctlpar\widctlpar\intbl\adjustright {Varies\cell }\pard \keepn\nowidctlpar\widctlpar\intbl\adjustright {Checksum\cell }\pard \keepn\nowidctlpar\widctlpar\intbl\adjustright {Generic\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row 
}\trowd \trgaph108\trleft-108\trkeep \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw30 \clbrdrb\brdrs\brdrw30 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx888\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw30 \clbrdrr
\brdrs\brdrw15 \cltxlrtb \cellx2124\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw30 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx3816\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw30 \clbrdrr
\brdrs\brdrw15 \cltxlrtb \cellx7680\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw30 \clbrdrr\brdrs\brdrw30 \cltxlrtb \cellx8772\pard \qc\keepn\nowidctlpar\widctlpar\intbl\adjustright {10h\cell }\pard 
\qc\keepn\nowidctlpar\widctlpar\intbl\adjustright {Varies\cell }\pard \qc\keepn\nowidctlpar\widctlpar\intbl\adjustright {Varies\cell }\pard \keepn\nowidctlpar\widctlpar\intbl\adjustright {Specific Header Type Data\cell }\pard 
\keepn\nowidctlpar\widctlpar\intbl\adjustright {Specific\cell }\pard \nowidctlpar\widctlpar\intbl\adjustright {\row }\pard \nowidctlpar\widctlpar\adjustright {
\par }{\b Signature}{
 - All Expansion Headers will contain a unique expansion header identifier.  Each different Expansion Header will have its own unique signature.  Software that wishes to make use of any given Expansion Header simply traverses the linked list of Generic Ex
pansion Headers until the Expansion Header with the desired signature is found, or the end of the list is encountered.  
\par Example: The Plug and Play expansion header's identifier is the ASCII string "$PnP" or hex 24 50 6E 50h.  }{\b 
\par }\pard \nowidctlpar\widctlpar\adjustright {\b Structure Revision}{ - This is an ordinal value that indicates the revision number of this structure only and does not imply a level of compliance with the Plug and Play BIOS version.
\par }\pard \nowidctlpar\widctlpar\adjustright {\b Length}{ - Length of the entire Expansion Header expressed in sixteen byte blocks.  The length count starts at the Signature field.}{\b 
\par }\pard \nowidctlpar\widctlpar\adjustright {  
\par }\pard \nowidctlpar\widctlpar\adjustright {\b Offset of Next Header}{ - This location contains a link to then next expansion ROM header in this Option ROM.  If there are no other expansion ROM headers then this field will have a value of 0h.
\par }{\b Reserved }{- Reserved for Expansion
\par }{\b Checksum}{ - Each Expansion Header is checksummed individually.  This allows the software that wishes to make use of an expansion header the ability to determine if the expansion header is valid.
\par The system software can determine if the expansion header is valid by performing a }{\b Checksum}{ operation.  The method for validating the checksum is to add up }{\i Length }{bytes, including the }{\i Checksum}{ field, into an 8-bit v
alue.  A resulting sum of zero indicates a valid checksum operation.
\par }{\b Specific Header data}{ - This area is used by the specific device header and is defined uniquely for each Expansion Header.
\par }\pard\plain \s1\sb240\sa240\keep\keepn\nowidctlpar\widctlpar\tlul\tx8640\outlinelevel0\adjustright \b\f38\fs36\cgrid {\f0 \page Appendix B: Device Driver Initialization Model\tab 
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\lang1024\cgrid {\i 
Please Note: The Device Driver Initialization Model (DDIM) is provided as an extension of the current option ROM model.  Current bus devices cannot be guaranteed that the systems in which they are installed will support DDIM.  Therefore, current bus devic
e Option ROMs 
(ISA, EISA, MCA, PCMCIA) must support the standard initialization model, and may optionally support the DDIM.  The Option ROM may determine if it is being initialized using a DDIM by attempting to write to, and read back from his data space.  If the Optio
n ROM can successfully write to its data space, then it should support a DDIM initialization.  Otherwise, it must perform a standard initialization.
\par As of this writing, the PCI architecture is the only architecture wherein Option ROMs are guaranteed support for DDIM.
\par }\pard \nowidctlpar\widctlpar\adjustright {
In an effort to reduce the amount of UMB (Upper Memory Block) space consumed by add-in Option ROMs, and to more efficiently use the available UMB space, Plug and Play Option ROMs should support the Device Driver Initialization Model (DDIM).
\par Under this model, all Option ROMs installed in a Plug and Play system which indicate that they support DDIM will be copied into RAM by the System BIOS.  The System BIOS will then execute a FAR CALL into the device's initialization vector.
\par Devices which sup
port DDIM may then initialize themselves, update their RAM image with static Data (if necessary), and then discard the initialization code, by updating the length byte at offset 3h and recalculating their checksum.  The System BIOS will then initialize th
e next DDIM ROM by copying it to RAM on the next 2 KB boundary following the end of the most recently initialized DDIM ROM (or in the next available UMB which is large enough to contain both the Runtime and Initialization code of the DDIM ROM).
\par Once all DDIM Option ROMs have been initialized, the System BIOS will Write Protect the RAM images and proceed with the boot process.
\par }{\b\fs24 Flow:
\par }\pard \nowidctlpar\widctlpar\adjustright {System BIOS copies the DDIM Option ROM Copy to RAM
\par }\pard \nowidctlpar\widctlpar\adjustright {System BIOS executes a FAR CALL to Initialization Vector
\par Option ROM initializes the device
\par Option ROM updates any static data structures
\par Option ROM updates the ROM Length and Check sum 
\par Option ROM returns to the System BIOS with Return Status
\par System BIOS Write Protects RAM image of ROM.
\par }{\b\fs24 Advantages:
\par }\pard\plain \s45\fi-576\li576\sa240\keep\nowidctlpar\widctlpar\adjustright \f39\fs20\cgrid {\f0 * Provides more efficient use of Upper Memory Blocks.  Initialization code may be discarded.
\par * Provides a seamless mechanism whereby Option ROMs may be copied to RAM
\par }\pard \s45\fi-576\li576\sa240\keep\nowidctlpar\widctlpar\adjustright {\f0 * Provides Option ROMs with a means of storing Static Data Structures built at boot time.
\par }\pard \s45\fi-576\li576\sa240\keep\nowidctlpar\widctlpar\adjustright {\f0 * Allows board vendors to use lower performance ROM devices (on buses that are guaranteed to support this architecture - PCI).
\par }\pard\plain \s1\sb240\sa240\keep\keepn\nowidctlpar\widctlpar\tlul\tx8640\outlinelevel0\adjustright \b\f38\fs36\cgrid {\page }{\f0 Appendix C:  Return Codes\tab }{\f0\ul 
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\lang1024\cgrid {The following table represents the return codes for the BIOS functions.
\par }\pard \nowidctlpar\widctlpar\adjustright {Bit 7 set indicates an error has occurred.
\par 
\par }{\b Success Codes 00h:
\par }\trowd \trgaph108\trleft288\trkeep \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng1000\cltxlrtb \cellx3840\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng1000\cltxlrtb 
\cellx4716\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng1000\cltxlrtb \cellx9300\pard\plain \s87\qc\fi-360\li360\nowidctlpar\widctlpar\intbl\adjustright \b\fs20\lang1024\cgrid {Return Code\cell }\pard 
\s87\qc\fi-360\li360\nowidctlpar\widctlpar\intbl\adjustright {Value\cell Description\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {\row }\trowd \trgaph108\trleft288\trkeep \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl
\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx3840\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx4716\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl
\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx9300\pard\plain \s86\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {SUCCESS\cell 00h\cell Function completed successfully\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {\row }\pard \nowidctlpar\widctlpar\adjustright {
\par }{\b Warning Codes 01h through 7Fh:}{\b 
\par }\trowd \trgaph108\trleft288\trkeep \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng1000\cltxlrtb \cellx3840\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng1000\cltxlrtb 
\cellx4716\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng1000\cltxlrtb \cellx9300\pard\plain \s87\qc\fi-360\li360\nowidctlpar\widctlpar\intbl\adjustright \b\fs20\lang1024\cgrid {Return Code\cell }\pard 
\s87\qc\fi-360\li360\nowidctlpar\widctlpar\intbl\adjustright {Value\cell Description\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {\row }\trowd \trgaph108\trleft288\trkeep \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl
\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx3840\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx4716\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl
\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx9300\pard\plain \s86\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {Reserved \cell 01h\cell \cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright 
\fs20\lang1024\cgrid {\row }\trowd \trgaph108\trleft288\trkeep \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx3840\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb
\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx4716\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx9300\pard\plain \s86\nowidctlpar\widctlpar\intbl\adjustright 
\fs20\lang1024\cgrid {NOT_SET_STATICALLY\cell 7Fh\cell 
Warning that indicates a device could not be configured statically, but was successfully configured dynamically.  This return code is used only when function 02h is requested to set a device both statically and dynamically.\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {\row }\pard \nowidctlpar\widctlpar\adjustright {
\par }{\b Error Codes 81h through FFh:}{\b 
\par }\trowd \trgaph108\trleft288\trkeep \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng1000\cltxlrtb \cellx3840\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng1000\cltxlrtb 
\cellx4716\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \clshdng1000\cltxlrtb \cellx9300\pard\plain \s87\qc\fi-360\li360\nowidctlpar\widctlpar\intbl\adjustright \b\fs20\lang1024\cgrid {Return Code\cell }\pard 
\s87\qc\fi-360\li360\nowidctlpar\widctlpar\intbl\adjustright {Value\cell Description\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {\row }\trowd \trgaph108\trleft288\trkeep \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl
\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx3840\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx4716\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl
\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx9300\pard\plain \s86\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {UNKNOWN_FUNCTION\cell 81h\cell Unknown, or invalid, function number passed\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {\row }\pard\plain \s86\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {FUNCTION_NOT_SUPPORTED\cell 82h\cell The function is not supported on this system.\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {\row }\pard\plain \s86\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {INVALID_HANDLE\cell 83h\cell Device node number/handle passed is invalid or out of range.\cell 
}\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {\row }\pard\plain \s86\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {BAD_PARAMETER\cell 84h\cell 
Function detected invalid resource descriptors or resource descriptors were specified out of order.\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {\row }\pard\plain \s86\nowidctlpar\widctlpar\intbl\adjustright 
\fs20\lang1024\cgrid {SET_FAILED\cell 85h\cell Set Device Node function failed.\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {\row }\pard\plain \s86\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {
EVENTS_NOT_PENDING\cell 86h\cell There are no events pending.\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {\row }\pard\plain \s86\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {SYSTEM_NOT_DOCKED\cell 87h
\cell The system is currently not docked.\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {\row }\pard\plain \s86\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {NO_ISA_PNP_CARDS\cell 88h\cell 
Indicates that no ISA Plug and Play cards are installed in the system.\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {\row }\pard\plain \s86\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {
UNABLE_TO_DETERMINE_DOCK_ CAPABILITIES\cell 89h\cell Indicates that the system was not able to determine the capabilities of the docking station.\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {\row }\pard\plain 
\s86\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {CONFIG_CHANGE_FAILED_NO_ BATTERY\cell 8Ah\cell The system failed the undocking sequence because it detected that the system unit did not have a battery.\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {\row }\pard\plain \s86\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {CONFIG_CHANGE_FAILED_ RESOURCE_CONFLICT\cell 8Bh\cell 
The system failed to successfully dock because it detected a resource conflict with one of the primary boot devices; such as Input, Output, or the IPL device.\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {\row 
}\pard\plain \s86\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {BUFFER_TOO_SMALL\cell 8Ch\cell The memory buffer passed in by the caller was not large enough to hold the data to be returned by the system BIOS.\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {\row }\pard\plain \s86\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {USE_ESCD_SUPPORT\cell }\pard \s86\nowidctlpar\widctlpar\intbl\adjustright {8Dh\cell }\pard 
\s86\nowidctlpar\widctlpar\intbl\adjustright {
This return code is used by functions 09h and 0Ah to instruct the caller that reporting resources explicitly assigned to devices in the system to the system BIOS must be handled through the interfaces defined by the }{\i ESCD Specification.}{\cell 
}\pard\plain \nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {\row }\pard\plain \s86\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {MESSAGE_NOT_SUPPORTED\cell }\pard \s86\nowidctlpar\widctlpar\intbl\adjustright {8Eh\cell 
}\pard \s86\nowidctlpar\widctlpar\intbl\adjustright {This return code indicates the message passed to the system BIOS through function 04h, Send Message, is not supported on the system.\cell }\pard\plain \nowidctlpar\widctlpar\intbl\adjustright 
\fs20\lang1024\cgrid {\row }\trowd \trgaph108\trleft288\trkeep \clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx3840\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb
\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx4716\clvertalt\clbrdrt\brdrs\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \clbrdrr\brdrs\brdrw15 \cltxlrtb \cellx9300\pard\plain \s86\nowidctlpar\widctlpar\intbl\adjustright 
\fs20\lang1024\cgrid {HARDWARE_ERROR\cell }\pard \s86\nowidctlpar\widctlpar\intbl\adjustright {8Fh\cell }\pard \s86\nowidctlpar\widctlpar\intbl\adjustright {This return code indicates that the system BIOS detected a hardware failure.\cell }\pard\plain 
\nowidctlpar\widctlpar\intbl\adjustright \fs20\lang1024\cgrid {\row }\pard \nowidctlpar\widctlpar\adjustright {
\par }{
\par }}