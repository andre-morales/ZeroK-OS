[BITS 16]
[CPU 8086]
[ORG 0x7C00]

; Author:   Andr√© Morales 
; Version:  0.2.1
; Creation: 07/10/2020
; Modified:
; @ 31/10/2020
; @ 02/01/2021

#include ext/stdconio_h.csm
; -- [0x0A00 - 0x0FFF] Stage 1.5
; -- [0x7600 - 0x77FF] MBR.
; -- [0x7800 - 0x79FF] Test VBR/EBR.
; -- [0x7A00 - 0x7BFF] Test VBR from EBR.
; -- [0x7C00 - 0x7DFF] Our loaded VBR (Stage 1).
; -- [0x7E00 - 0x7FFF] Unitialiazed varible storage

jmp Start | nop

times (21 + 12 + 26) db 0x00

Start:
	cli
	
	xor ax, ax
	mov ds, ax
	mov es, ax	
	mov ss, ax
	mov sp, 0x0A00
	
	mov [drive], dl
	mov word [drive.CHS_bytesPerSector], 512		
	call getDriveCHSProperties

	; Load MBR to 0x7600
	mov ax, 0
	push ax | push ax
	mov word [lbaDAPS.buffer], 0x7600
	call readSector
	
	; Load and compare VBRs in 0x7800
	mov si, 0x7600 + 0x1BE
	mov cx, 4
		
	.ReadPrimaryPartitionVBR:
		cmp byte [ds:si + 4], 0 | jz .nextpart
	
		mov dx, [ds:si + 8]
		mov bx, [ds:si + 10]
		{
			push bx
			
			mov word [lbaDAPS.buffer], 0x7800
			push bx | push dx
			call readSector
			
			pop bx
		}
		
		cmp byte [ds:si + 4], 5 | jne .normalPartition
		
		call ScanExtendedPartition
		jmp .nextpart
		
		.normalPartition: {
			push si | push cx
			
			mov si, 0x7800
			mov di, 0x7C00
			mov cx, 256
			repe cmpsw
			pop cx | pop si
			jz LoadStage2
		}
		.nextpart:
		add si, 16
	loop .ReadPrimaryPartitionVBR
	jmp Halt

ScanExtendedPartition: {
	push bp
	mov bp, sp
	push cx | push si
	
	mov [extendedPartitionLBA], dx
	mov [extendedPartitionLBA + 2], bx
	mov si, 0x7800 + 0x1BE
	
	.firstEntry:
		push bx | push dx
		mov word [lbaDAPS.buffer], 0x7A00

		add dx, [ds:si + 8]
		adc bx, [ds:si + 10]
		
		{
			push bx 
			push bx | push dx
			call readSector
			pop bx
		}
		
		push si
			mov si, 0x7A00
			mov di, 0x7C00
			mov cx, 256
			repe cmpsw
		pop si
		jz .equal
		
		pop dx | pop bx
		jmp .secondEntry
		
		.equal:
		jmp LoadStage2		
	
	
	.secondEntry:
		cmp byte [ds:si + 16 + 4], 0
		jz .end
		
		mov ax, [ds:si + 16 + 8]
		mov cx, [ds:si + 16 + 10]
		
		add ax, [extendedPartitionLBA]
		mov dx, ax
		
		adc cx, [extendedPartitionLBA + 2]
		mov bx, cx		
		{
			push bx 
			mov word [lbaDAPS.buffer], 0x7800
			push bx | push dx
			call readSector
			pop bx 
		}
		
		jmp .firstEntry
		
	.end:
	pop si | pop cx
	
	mov sp, bp
	pop bp
ret }

LoadStage2:
	push dx | push bx
	
	mov word [lbaDAPS.buffer], 0x0A00
	mov cx, 2
	.loadSector:
		add dx, 1
		adc bx, 0
		
		push bx
		push bx | push dx
		call readSector
		pop bx
		
		add word [lbaDAPS.buffer], 0x0200
	loop .loadSector

	mov dl, [drive]
	jmp 0xA0:0000h

Halt:
	mov ah, 0Eh
	mov al, 'H'
	int 10h
	
	cli | hlt	

; void (int32 LBA)
readSector: {
	push bp
	mov bp, sp
	sub sp, 4
	
	push es | push di
	push si
	push cx | push dx
		
	; -- Reading as CHS (Convert LBA to CHS) --
	; Calculate cylinder to BP - 2
	mov dx, [bp + 6] | mov ax, [bp + 4]          ; Get LBA
	div word [drive.CHS_sectorsTimesHeads]       ; LBA / (HPC * SPT) | DX:AX / (HPC * SPT)
	mov [bp - 2], ax                             ; Save Cylinders
	
	cmp ax, [drive.CHS_cylinders] | jle .CHSRead ; Is cylinder number safe?
	mov ah, 1 | jmp Halt ; Error code 1. Cylinder too big.
	
	.CHSRead:
	; Calculate sector to BP - 3
	mov dx, [bp + 6] | mov ax, [bp + 4]              ; Get LBA
	xor ch, ch | mov cl, [drive.CHS_sectorsPerTrack] 
	div cx                                           ; LBA % SPT + 1 | LBA % CX + 1
	inc dx
	mov [bp - 3], dl
	
	; Calculate head to BP - 4
	xor dx, dx
	div word [drive.CHS_headsPerCylinder]            ; (LBA / SPT) % HPC # (LBA / CX) % HPC
	mov [bp - 4], dl
	
	; Cylinder
	mov ax, [bp - 2]
	mov cl, 8 | rol ax, cl
	mov cl, 6 | shl al, cl 
	mov cx, ax
	
	or cl, [bp - 3]  ; Sector
	mov dh, [bp - 4] ; Head
	
	xor bx, bx | mov es, bx
	mov bx, [lbaDAPS.buffer]
	mov dl, [drive]
	mov al, 1
	mov ah, 0x02 | int 13h ; CHS read
	
	xor ax, ax
	
	.End:
	pop dx | pop cx
	pop si
	pop di | pop es
	
	mov sp, bp
	pop bp
	
	pop bx    ; Get return address from stack
	add sp, 4 ; Remove argument from stack
jmp bx }
	
#include ext/drive/query_drive_chs.csm

Constants:

times 510-($-$$) db 0x90 ; Fill the rest of the boostsector code with no-ops
dw 0xAA55                ; Boot signature

; --------- Variable space ---------
#include ext/drive/daps.csm
#include ext/drive/drive_properties.csm

extendedPartitionLBA: dd 0
