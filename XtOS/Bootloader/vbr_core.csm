[BITS 16]
[CPU 8086]
[ORG 0xA00]

; Author:   Andr√© Morales 
; Version:  0.1.2
; Creation: 02/01/2021
; Modified: 05/01/2021

; -- [0x0500 - 0x09FF] Stack
; -- [0x0A00 - 0x15FF] Stage 1.5 (Us)
; -- [0x2000 - 0x21FF] Fat16 Directory
; -- [0x7C00 - 0x7DFF] VBR

db 'Xt'
dw 5

#include ext/stdconio_h.csm

var short DirEntriesPerCluster
var short BytesPerCluster

Start: {
	xor ax, ax
	mov ds, ax
	mov es, ax
	mov ss, ax
	pop word [BegginingSector]
	pop word [BegginingSector + 2]
	
	mov [drive], dl
	Print(."\N         XtOS Bootloader v0.1.0")
	
	call getDriveGeometry
	
	call getBootPartitionProperties
	
	Getch()
	call LoadBootBin
	
	jmp 0x2000
}

LoadBootBin: {
	mov si, ."XTOS       /XTLOADERBIN"
	call FindFile
	
	mov word [lbaDAPS.buffer], 0x2000
	push word [fileCluster]
	call readClusterChain
ret }

var char* filePathPtr
var int directorySector
var short fileCluster
var char[12] currentFile
var bool lookingForFolder
var bool inRootDirectory

FindFile: {
	push bp
	mov bp, sp

	mov [filePathPtr], si
	mov byte [lookingForFolder], 1
	mov byte [inRootDirectory], 1
	
	mov si, RootDirPtr
	mov di, directorySector
	movsw
	movsw
	
	mov word [lbaDAPS.buffer], 0x2000
	
	; Read first sector of root directory.
	push word [directorySector + 2]
	push word [directorySector + 0]
	call readSector
	
	.ReadDirectory:
	; Copy specific file name from the
	; full path to currentFile
	.GetFileName:
	mov si, [filePathPtr]
	mov di, currentFile

		.l1:
		lodsb
		cmp al, '/' | jne .l2
		xor al, al | stosb
		jmp .SearchDirectory
		
		.l2:
		stosb
		test al, al | jnz .l1
		
		mov byte [lookingForFolder], 0
	
	.SearchDirectory:
	mov [filePathPtr], si ; Save our file path ptr back.
	
	.LoadFileEntries:
	mov si, 0x2000
	
	cmp byte [inRootDirectory], 1 | je .l3
	mov cx, [DirEntriesPerCluster]
	jmp .LoadFileEntry
	
	.l3:
	mov cx, 16
	
	.LoadFileEntry:
	call TestFATFileEntry
	cmp al, 1 | je .FileNotFound
	cmp al, 2 | je FileNotFoundOnDir
	
	; Store cluster number at 0x1A
	mov ax, [si + 0x1A]
	mov [fileCluster], ax
	
	; Were we looking for a folder?
	cmp byte [lookingForFolder], 1 | je .FoundFolder
	
	Print(."\NFound file.")
	jmp .End
	
	.FoundFolder:
	Print(."\NFound folder.")
	push ax
	call readCluster
		
	mov byte [inRootDirectory], 0
	jmp .ReadDirectory
	
	.FileNotFound:
	add si, 32
	loop .LoadFileEntry
	
	.LoadNextSector:
	Print(."LNS.")
	cli | hlt
	
	; File not present on this sector.
	.End:
	mov sp, bp
	pop bp
ret }

TestFATFileEntry: {
	push si | push si
	Print(."\NLooking for ")
	Print(currentFile)
	pop si
	
	mov al, [si + 0x00]
	D_Putch al
	
	cmp al, 0 | jne .NotEmpty
	mov al, 2 | jmp .End

	.NotEmpty:
	xor bx, bx
	.cmpFileName:
		lodsb
		mov ah, [currentFile + bx]
		D_Putch al
		D_Putch ah
		D_Putch ' '
		cmp ah, al | je .nxt
		mov al, 1 | jmp .End
		
		.nxt:
		inc bx
	cmp bx, 11 | jl .cmpFileName
	
	;mov al, [si + 0x0B]	; File Attribs
	;and al, 0x20
	;xor al, [lookingForFolder]
	;jnz FileTypeMismatch
	
	xor al, al
	
	.End:
	pop si
ret }

FileTypeMismatch: {
	Print(."\NFile type mismatch.")
	cli | hlt
}

FileNotFoundOnDir: {
	Print(."\NFile not found on directory.")
	cli | hlt
}

getBootPartitionProperties: {
	Print(."\N--- [Boot partition properties] ---")
	
	push ds 
	
	push ds | pop es
	mov ax, 0 | mov ds, ax
	
	mov si, 0x7C00 + 0x0B
	mov di, BPB
	
	xor ah, ah
	
	movsw
	lodsb | stosw
	movsw
	lodsb | stosw
	movsw
	add si, 3
	movsw
	
	add si, 8
	movsw | movsw
	
	add si, 7
	mov cx, 11 | rep movsb
	xor al, al | stosb
	
	mov cx, 8 | rep movsb
	xor al, al | stosb
	
	pop ds	
	
	mov bx, [BegginingSector]
	mov cx, [BegginingSector + 2]
	add bx, [BPB.ReservedLogicalSectors]
	adc cx, 0
	mov [FATPtr], bx
	mov [FATPtr + 2], cx
	
	mov ax, [BPB.LogicalSectorsPerFAT]
	mul word [BPB.FATs]
	add bx, ax
	adc cx, dx
	mov [RootDirPtr], bx
	mov [RootDirPtr + 2], cx	
	
	mov ax, 32
	mul word [BPB.RootDirEntries] 
	mov di, 512
	div di
	
	add bx, ax
	adc cx, 0
	mov [DataAreaPtr], bx
	mov [DataAreaPtr + 2], cx
	
	mov ax, [BPB.BytesPerLogicalSector]
	mul word [BPB.LogicalSectorsPerCluster]
	mov [BytesPerCluster], ax
	mov bx, 32 | div bx
	mov [DirEntriesPerCluster], ax
	
	Print(."\NLabel: ")
	Print(BPB.Label)
	Print(."\NBeggining: 0x")
	PrintHexNum [BegginingSector + 2]
	Putch(':')
	PrintHexNum [BegginingSector]
	
	Print(."\NFAT: 0x")
	PrintHexNum [FATPtr + 2]
	Putch(':')
	PrintHexNum [FATPtr]
	
	Print(."\NRoot Dir: 0x")
	PrintHexNum [RootDirPtr + 2]
	Putch(':')
	PrintHexNum [RootDirPtr]

	Print(."\NData Area: 0x")
	PrintHexNum [DataAreaPtr + 2]
	Putch(':')
	PrintHexNum [DataAreaPtr]
	
	Print(."\NBytes per Logical Sector: ")
	PrintDecNum [BPB.BytesPerLogicalSector] 
	Print(."\NLogical Sectors per Cluster: ")
	PrintDecNum [BPB.LogicalSectorsPerCluster] 
	Print(."\NBytes per Cluster: ")
	PrintDecNum [BytesPerCluster] 
	Print(."\NLogical Sectors per FAT: ")
	PrintDecNum [BPB.LogicalSectorsPerFAT] 
	Print(."\NFATs: ")
	PrintDecNum [BPB.FATs]
	Print(."\NRoot directory entries: ")
	PrintDecNum [BPB.RootDirEntries] 
	Print(."\NDirectory entries per cluster: ")
	PrintDecNum [DirEntriesPerCluster] 
ret }

getDriveGeometry: {
	call getDriveCHSProperties
	call getDriveLBAProperties

	Print(."\N--- [Geometries of drive: ")
	xor ah, ah
	mov al, [drive]
	call printHexNumber
	Print(."] ---")
	
	Print(."\NCHS (AH = 02h)")
	Print(."\N  Bytes per Sector: ")
	PrintDecNum [drive.CHS_bytesPerSector]
	
	Print(."\N  Sectors per Track: ")
	xor ah, ah
	mov al, [drive.CHS_sectorsPerTrack]
	call printDecNumber

	Print(."\N  Heads Per Cylinder: ")
	PrintDecNum [drive.CHS_headsPerCylinder]
	
	Print(."\N  Cylinders: ")
	PrintDecNum [drive.CHS_cylinders]
	
	Print(."\NLBA (AH = 48h)")
	
	mov al, [drive.LBA_support]
	test al, al | jz .printLBAProps
	cmp al, 1   | je .noDriveLBA
	Print(."\N  The BIOS doesn't support LBA.")
	jmp .End
	
	.noDriveLBA:
	Print(."\N  The drive doesn't support LBA.")
	jmp .End
	
	.printLBAProps:
	Print(."\N  Bytes per Sector: ")
	PrintDecNum [drive.LBA_bytesPerSector]
	
	.End:
ret }

; void (int LBA)
readSector: {
	push bp
	mov bp, sp
	sub sp, 4
	
	push es | push di
	push si
	push cx | push dx
	
	Print(."\NSector 0x")
	PrintHexNum [bp + 6]
	Putch(' ')
	PrintHexNum [bp + 4]
	
	cmp byte [drive.LBA_support], 0
	jnz .LBAtoCHS ; LBA not supported. Try CHS translation.
	
	; -- Reading as LBA --
	mov ax, [bp + 4] | mov [lbaDAPS.lba + 0], ax
	mov ax, [bp + 6] | mov [lbaDAPS.lba + 2], ax
	mov dl, [drive]
	mov si, lbaDAPS
	mov ah, 0x42 | int 13h ; Extended read
	xor ax, ax
	jmp .End
	
	; -- Reading as CHS (Convert LBA to CHS) --
	.LBAtoCHS: {		
		; Calculate cylinder to BP - 2
		mov dx, [bp + 6] | mov ax, [bp + 4]          ; Get LBA
		div word [drive.CHS_sectorsTimesHeads]       ; LBA / (HPC * SPT) | DX:AX / (HPC * SPT)
		mov [bp - 2], ax                             ; Save Cylinders
		
		; Print cylinder
		Print(."(")
		call printHexNumber
		
		cmp ax, [drive.CHS_cylinders] | jle .CHSRead ; Is cylinder number safe?
		
		mov ax, 1 | jmp .End ; Error code 1. Cylinder too big.
		
		.CHSRead:
		; Calculate sector to BP - 3
		mov dx, [bp + 6] | mov ax, [bp + 4]              ; Get LBA
		xor ch, ch | mov cl, [drive.CHS_sectorsPerTrack] 
		div cx                                           ; LBA % SPT + 1 | LBA % CX + 1
		inc dx
		mov [bp - 3], dl
		
		; Calculate head to BP - 4
		xor dx, dx
		div word [drive.CHS_headsPerCylinder]            ; (LBA / SPT) % HPC # (LBA / CX) % HPC
		mov [bp - 4], dl
		
		Print(."h, ")
		xor ah, ah
		mov al, [bp - 4]
		call printHexNumber
		
		Print(."h, ")
		xor ah, ah
		mov al, [bp - 3]
		call printHexNumber
		Print(."h)")
		
		; Cylinder
		mov ax, [bp - 2]
		mov cl, 8 | rol ax, cl
		mov cl, 6 | shl al, cl 
		mov cx, ax
		
		or cl, [bp - 3]  ; Sector
		mov dh, [bp - 4] ; Head
		
		xor bx, bx | mov es, bx
		mov bx, [lbaDAPS.buffer]
		mov dl, [drive]
		mov al, 1
		mov ah, 0x02 | int 13h ; CHS read
		
		xor ax, ax
	}
	
	.End:
	pop dx | pop cx
	pop si
	pop di | pop es
	
	mov sp, bp
	pop bp
	
	pop bx    ; Get return address from stack
	add sp, 4 ; Remove argument from stack
jmp bx }

; void (short cluster)
readCluster: {
	push bp
	mov bp, sp
	
	Print(."\NCluster 0x")
	PrintHexNum [bp + 4]
	
	mov ax, [bp + 4]
	sub ax, 2
	mul word [BPB.LogicalSectorsPerCluster]

	add ax, [DataAreaPtr]
	adc dx, [DataAreaPtr + 2]
	
	mov cx, [BPB.LogicalSectorsPerCluster]
	push word [lbaDAPS.buffer]
	.readSector:
		push ax
		
		push dx | push ax
		call readSector
		
		pop ax
		
		add ax, 1
		adc dx, 0
		add word [lbaDAPS.buffer], 0x200
	loop .readSector
	pop word [lbaDAPS.buffer]
	
	mov sp, bp
	pop bp
	
	pop bx
	add sp, 2
jmp bx}

; void (short cluster)
readClusterChain: {
	push bp
	mov bp, sp
	sub sp, 2
	
	push word [lbaDAPS.buffer]
	push word [bp + 4] | pop word [bp - 2]
	
	.readCluster:
	push word [bp - 2]
	call readCluster
		
	mov ax, [BytesPerCluster]
	add [lbaDAPS.buffer], ax
	
	xor dx, dx
	mov ax, [bp - 2]
	mov cx, 256 | div cx
	
	xor dx, dx
	add ax, [FATPtr]
	adc dx, [FATPtr + 2]
	
	push word [lbaDAPS.buffer]
	mov word [lbaDAPS.buffer], fatClusterMapBuffer
	push dx | push ax
	call readSector
	pop word [lbaDAPS.buffer]
	
	mov ax, 2
	mul word [bp - 2]
	mov di, ax
	mov ax, [fatClusterMapBuffer + di]
	
	mov [bp - 2], ax
	
	Print(."\NNCL 0x")
	PrintHexNum ax
	Print(."\NPCL 0x")
	PrintHexNum di
	Print(."\NCMB 0x")
	PrintHexNum fatClusterMapBuffer
	Print(."\NDAPS 0x")
	PrintHexNum [lbaDAPS.buffer]
	
	cmp word [bp - 2], 0xFFFF | je .end

	jmp .readCluster
	
	.end:
	pop word [lbaDAPS.buffer]
	
	mov sp, bp
	pop bp
	pop bx
	add sp, 2
jmp bx }

#include ext/stdconio.csm
#include ext/drive/query_drive_chs.csm
#include ext/drive/query_drive_lba.csm

#include ext/drive/daps.csm
#include ext/drive/drive_properties.csm

Constants:

times (512 * 5)-($-$$) db 0x90 ; Round to 1kb.

; -- Variable space --
var byte[512] fatClusterMapBuffer

Variables:

BegginingSector: dd 0

FATPtr: dd 0
RootDirPtr: dd 0
DataAreaPtr: dd 0

BPB:
	.BytesPerLogicalSector: dw 0x0000
	.LogicalSectorsPerCluster: dw 0x00
	.ReservedLogicalSectors: dw 0x0000
	.FATs: dw 0x0000
	.RootDirEntries: dw 0x0000
	.LogicalSectorsPerFAT: dw 0x0000
	.LTotalLogicalSectors: dd 0x00000000
	.Label: times 12 db 0x00
	.FSType: times 9 db 0x00
	


	